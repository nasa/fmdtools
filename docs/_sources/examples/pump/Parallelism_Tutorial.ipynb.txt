{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using Parallel Computing in fmdtools\n",
    "\n",
    "This notebook will discuss how to use parallel programming in fmdtools, including:\n",
    "- how to set up a model for parallelism\n",
    "- syntax for using parallelism in simulation functions\n",
    "- considerations for optimizing computational performance in a model\n",
    "\n",
    "```\n",
    "Copyright © 2024, United States Government, as represented by the Administrator of the National Aeronautics and Space Administration. All rights reserved.\n",
    "\n",
    "The “\"Fault Model Design tools - fmdtools version 2\"” software is licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0. \n",
    "\n",
    "Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:12:08.755381Z",
     "iopub.status.busy": "2025-03-12T17:12:08.755381Z",
     "iopub.status.idle": "2025-03-12T17:12:10.348892Z",
     "shell.execute_reply": "2025-03-12T17:12:10.348892Z"
    }
   },
   "outputs": [],
   "source": [
    "from ex_pump import * \n",
    "from fmdtools.sim.sample import FaultDomain, FaultSample\n",
    "import fmdtools.sim.propagate as propagate\n",
    "import fmdtools.analyze as an"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This notebook uses the pump example (see `ex_pump.py`) to illustrate the use of parallelism in fmdtools. This is fairly simple model, and thus it should be noted that there may be considerations with more complex models which may not be adequately covered here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:12:10.351891Z",
     "iopub.status.busy": "2025-03-12T17:12:10.351891Z",
     "iopub.status.idle": "2025-03-12T17:12:10.359480Z",
     "shell.execute_reply": "2025-03-12T17:12:10.359409Z"
    }
   },
   "outputs": [],
   "source": [
    "mdl = Pump()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:12:10.362439Z",
     "iopub.status.busy": "2025-03-12T17:12:10.361438Z",
     "iopub.status.idle": "2025-03-12T17:12:10.441691Z",
     "shell.execute_reply": "2025-03-12T17:12:10.441691Z"
    }
   },
   "outputs": [],
   "source": [
    "result, mdlhist = propagate.nominal(mdl, to_return='graph')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:12:10.444690Z",
     "iopub.status.busy": "2025-03-12T17:12:10.444690Z",
     "iopub.status.idle": "2025-03-12T17:12:10.743848Z",
     "shell.execute_reply": "2025-03-12T17:12:10.743848Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = result.tend.graph.draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:12:10.745863Z",
     "iopub.status.busy": "2025-03-12T17:12:10.745863Z",
     "iopub.status.idle": "2025-03-12T17:12:10.911224Z",
     "shell.execute_reply": "2025-03-12T17:12:10.911224Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x200 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = mdlhist.plot_line('flows.ee_1.s.current', 'flows.wat_2.s.flowrate')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Checks\n",
    "\n",
    "Before attempting to leverage parallelism in model execution, it can be helpful to check whether a model is compatible with python parallel computing libraries. In order for a model to be parallelized, it must be compatible with [pickling](https://docs.python.org/3/library/pickle.html#:~:text=%E2%80%9CPickling%E2%80%9D%20is%20the%20process%20whereby,back%20into%20an%20object%20hierarchy.)--python's method of data serialization. This is used in parallel programming methods to copy the model from the main process thread to the seperate processes of the pool.\n",
    "\n",
    "fmdtools has two methods to check whether a model can be pickled, `check_pickleability` and `check_model_pickleability`. The main difference between these is that `check_pickleability` works for all objects (e.g. functions and flows), while `check_model_pickleability` gives more information for an overall model structure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:12:10.914220Z",
     "iopub.status.busy": "2025-03-12T17:12:10.913221Z",
     "iopub.status.idle": "2025-03-12T17:12:10.917221Z",
     "shell.execute_reply": "2025-03-12T17:12:10.917221Z"
    }
   },
   "outputs": [],
   "source": [
    "from fmdtools.define.object.base import check_pickleability\n",
    "from fmdtools.define.architecture.base import check_model_pickleability"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:12:10.919221Z",
     "iopub.status.busy": "2025-03-12T17:12:10.919221Z",
     "iopub.status.idle": "2025-03-12T17:12:10.923745Z",
     "shell.execute_reply": "2025-03-12T17:12:10.923745Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_init_flexroles\n",
      "_simflows\n",
      "as_copy\n",
      "check_dict_creation\n",
      "container_m\n",
      "container_p\n",
      "container_sp\n",
      "container_t\n",
      "containers\n",
      "default_name\n",
      "default_sp\n",
      "default_track\n",
      "dynamicsims\n",
      "flexible_roles\n",
      "flows\n",
      "fxns\n",
      "graph\n",
      "h\n",
      "immutable_roles\n",
      "indicators\n",
      "m\n",
      "mut_kwargs\n",
      "mutables\n",
      "name\n",
      "p\n",
      "rolename\n",
      "roletype\n",
      "roletypes\n",
      "rolevars\n",
      "root\n",
      "simorder\n",
      "sp\n",
      "staticflows\n",
      "staticsims\n",
      "t\n",
      "track\n",
      "The object is pickleable\n"
     ]
    }
   ],
   "source": [
    "unpickleable_attributes = check_pickleability(mdl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:12:10.926744Z",
     "iopub.status.busy": "2025-03-12T17:12:10.925745Z",
     "iopub.status.idle": "2025-03-12T17:12:12.738145Z",
     "shell.execute_reply": "2025-03-12T17:12:12.738145Z"
    }
   },
   "outputs": [],
   "source": [
    "# check_model_pickleability(mdl)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you can see, this model is pickleable. However, this may not be the case for all structures if they rely on unpickleable data structures, one common one being iterators like .values()."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using Parallelism in Simulation\n",
    "\n",
    "Parallelism generally requires using some external parallel processing toolkit. The syntax used by fmdtools methods is compatible with:\n",
    "- [multiprocessing](https://docs.python.org/3/library/multiprocessing.html), python's default parallel computing library\n",
    "- [multiprocess](https://pypi.org/project/multiprocess/), a fork of multiprocessing developed by The UQ Foundation\n",
    "- [pathos](https://github.com/uqfoundation/pathos), a broader parallel computing package developed by The UQ Foundation\n",
    "\n",
    "And any other package that emulates multiprocessing.Pool"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:12:12.738145Z",
     "iopub.status.busy": "2025-03-12T17:12:12.738145Z",
     "iopub.status.idle": "2025-03-12T17:12:12.750525Z",
     "shell.execute_reply": "2025-03-12T17:12:12.750525Z"
    }
   },
   "outputs": [],
   "source": [
    "import multiprocessing as mp\n",
    "import multiprocess as ms"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Parallelism can speed up simulation time when there is a large number of independent simulations to run. The prefered methods for using parallelism are to use a `NominalApproach` or `SampleApproach` with the methods:\n",
    "- propagate.singlefaults (for all single-fault scenarios in a static model with no approach)\n",
    "- propagate.approach (for sampling a set of faults)\n",
    "- propagate.nominal_approach (for simulating the model nominally over a set of parameters)\n",
    "- propagate.nested_approach (for sampling a set of faults over a set of model parameters)\n",
    "\n",
    "These methods can be run in parallel by sending them a `pool` object from one of these modules as the optional `pool` argument. Further details on setting up and running an approach are provided in `docs/Approach Use-Cases.ipynb` "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:12:12.752625Z",
     "iopub.status.busy": "2025-03-12T17:12:12.752625Z",
     "iopub.status.idle": "2025-03-12T17:12:15.752135Z",
     "shell.execute_reply": "2025-03-12T17:12:15.752135Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "SCENARIOS COMPLETE: 100%|██████████| 24/24 [00:01<00:00, 13.72it/s]\n"
     ]
    }
   ],
   "source": [
    "pool = mp.Pool(4)\n",
    "fd = FaultDomain(mdl)\n",
    "fd.add_all()\n",
    "fs = FaultSample(fd)\n",
    "fs.add_fault_phases()\n",
    "endclasses, mdlhists = propagate.fault_sample(mdl, fs, pool=pool)\n",
    "#an.tabulate.simplefmea(endclasses)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:12:15.754150Z",
     "iopub.status.busy": "2025-03-12T17:12:15.754150Z",
     "iopub.status.idle": "2025-03-12T17:12:15.758771Z",
     "shell.execute_reply": "2025-03-12T17:12:15.758771Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<multiprocessing.pool.Pool state=TERMINATE pool_size=4>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pool"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Sometimes, it helps to \"warm up\" the pool. See, for example, how much longer per-second iterations take for the above compared to below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:12:15.760766Z",
     "iopub.status.busy": "2025-03-12T17:12:15.760766Z",
     "iopub.status.idle": "2025-03-12T17:12:18.487607Z",
     "shell.execute_reply": "2025-03-12T17:12:18.487607Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "SCENARIOS COMPLETE: 100%|██████████| 8/8 [00:01<00:00,  4.85it/s]\n"
     ]
    }
   ],
   "source": [
    "pool = mp.Pool(4)\n",
    "endclasses, mdlhists = propagate.single_faults(mdl, pool=pool)\n",
    "#an.tabulate.simplefmea(endclasses)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It can also be helpful to verify that the results of parallel simulation and normal serial execution are the same:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:12:18.490610Z",
     "iopub.status.busy": "2025-03-12T17:12:18.490610Z",
     "iopub.status.idle": "2025-03-12T17:12:21.913089Z",
     "shell.execute_reply": "2025-03-12T17:12:21.913089Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "SCENARIOS COMPLETE: 100%|██████████| 8/8 [00:01<00:00,  4.68it/s]\n",
      "SCENARIOS COMPLETE: 100%|██████████| 8/8 [00:00<00:00, 10.92it/s]\n"
     ]
    }
   ],
   "source": [
    "pool = mp.Pool(4)\n",
    "endclasses_par, mdlhists = propagate.single_faults(mdl, pool=pool, auto_close_pool=False)\n",
    "#tab_par = an.tabulate.simplefmea(endclasses_par)\n",
    "endclasses, mdlhists = propagate.single_faults(mdl)\n",
    "#tab = an.tabulate.simplefmea(endclasses)\n",
    "#tab - tab_par"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:12:21.916203Z",
     "iopub.status.busy": "2025-03-12T17:12:21.915149Z",
     "iopub.status.idle": "2025-03-12T17:12:24.137881Z",
     "shell.execute_reply": "2025-03-12T17:12:24.137881Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "SCENARIOS COMPLETE: 100%|██████████| 24/24 [00:00<00:00, 136.64it/s]\n",
      "SCENARIOS COMPLETE: 100%|██████████| 24/24 [00:00<00:00, 26.92it/s]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<multiprocessing.pool.Pool state=TERMINATE pool_size=4>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# pool = mp.Pool(4)\n",
    "endclasses_par, mdlhists = propagate.fault_sample(mdl, fs, pool=pool)\n",
    "#tab_par = an.tabulate.simplefmea(endclasses_par)\n",
    "endclasses, mdlhists = propagate.fault_sample(mdl, fs)\n",
    "#tab = an.tabulate.simplefmea(endclasses)\n",
    "#tab - tab_par\n",
    "pool"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "While fmdtools built-in methods are the easiest way to leverage parallelism, it can also be used with custom arguments/methods to meet the needs of simulation. However, (on Windows) these methods need to be defined in an external module with an \"if __name__=='__main__':\" statement, otherwise execution will hang from spawning new processes. This has to do with how multiprocessing works in windows."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To show how parellism can be leveraged manually for a desired use-case, below the model is run over the blockage fault mode at time t=1 with a different model parameter (delayed failure behavior), as defined in the `parallelism_methods.py` module in this folder."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:12:24.140013Z",
     "iopub.status.busy": "2025-03-12T17:12:24.140013Z",
     "iopub.status.idle": "2025-03-12T17:12:24.146549Z",
     "shell.execute_reply": "2025-03-12T17:12:24.146549Z"
    }
   },
   "outputs": [],
   "source": [
    "from parallelism_methods import delay_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:12:24.148691Z",
     "iopub.status.busy": "2025-03-12T17:12:24.148691Z",
     "iopub.status.idle": "2025-03-12T17:12:27.178497Z",
     "shell.execute_reply": "2025-03-12T17:12:27.178497Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[nominal.tend.classify.rate:          1.0\n",
       " nominal.tend.classify.cost:          0.0\n",
       " nominal.tend.classify.expected_cost: 0.0\n",
       " export_water_block_t               1e-05\n",
       " export_water_block_t  20125.000000000007\n",
       " export_water_block_t  20125.000000000007,\n",
       " nominal.tend.classify.rate:          1.0\n",
       " nominal.tend.classify.cost:          0.0\n",
       " nominal.tend.classify.expected_cost: 0.0\n",
       " export_water_block_t               1e-05\n",
       " export_water_block_t  20102.500000000007\n",
       " export_water_block_t  20102.500000000007,\n",
       " nominal.tend.classify.rate:          1.0\n",
       " nominal.tend.classify.cost:          0.0\n",
       " nominal.tend.classify.expected_cost: 0.0\n",
       " export_water_block_t               1e-05\n",
       " export_water_block_t  20080.000000000007\n",
       " export_water_block_t  20080.000000000007,\n",
       " nominal.tend.classify.rate:          1.0\n",
       " nominal.tend.classify.cost:          0.0\n",
       " nominal.tend.classify.expected_cost: 0.0\n",
       " export_water_block_t               1e-05\n",
       " export_water_block_t  20057.500000000007\n",
       " export_water_block_t  20057.500000000007,\n",
       " nominal.tend.classify.rate:          1.0\n",
       " nominal.tend.classify.cost:          0.0\n",
       " nominal.tend.classify.expected_cost: 0.0\n",
       " export_water_block_t               1e-05\n",
       " export_water_block_t  20035.000000000007\n",
       " export_water_block_t  20035.000000000007,\n",
       " nominal.tend.classify.rate:          1.0\n",
       " nominal.tend.classify.cost:          0.0\n",
       " nominal.tend.classify.expected_cost: 0.0\n",
       " export_water_block_t               1e-05\n",
       " export_water_block_t  15023.750000000005\n",
       " export_water_block_t  15023.750000000005,\n",
       " nominal.tend.classify.rate:          1.0\n",
       " nominal.tend.classify.cost:          0.0\n",
       " nominal.tend.classify.expected_cost: 0.0\n",
       " export_water_block_t               1e-05\n",
       " export_water_block_t  15023.750000000005\n",
       " export_water_block_t  15023.750000000005,\n",
       " nominal.tend.classify.rate:          1.0\n",
       " nominal.tend.classify.cost:          0.0\n",
       " nominal.tend.classify.expected_cost: 0.0\n",
       " export_water_block_t               1e-05\n",
       " export_water_block_t  15023.750000000005\n",
       " export_water_block_t  15023.750000000005,\n",
       " nominal.tend.classify.rate:          1.0\n",
       " nominal.tend.classify.cost:          0.0\n",
       " nominal.tend.classify.expected_cost: 0.0\n",
       " export_water_block_t               1e-05\n",
       " export_water_block_t  15023.750000000005\n",
       " export_water_block_t  15023.750000000005,\n",
       " nominal.tend.classify.rate:          1.0\n",
       " nominal.tend.classify.cost:          0.0\n",
       " nominal.tend.classify.expected_cost: 0.0\n",
       " export_water_block_t               1e-05\n",
       " export_water_block_t  15023.750000000005\n",
       " export_water_block_t  15023.750000000005]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = delay_test()\n",
    "results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this method, the model is run many times over a given fault with different delay parameters. It should be noted that this approach is not especially efficient, since the nominal scenario is simulated at each call of `propagate.one_fault()`. It is thus preferred to use the appropriate fault/parameter sampling approaches and propagate methods, since these methods only run the nominal simulation once for fault scenarios and can also use staged execution (copying the model at fault time for fault scenarios) to reduce the cost of each simulation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Performance Comparison\n",
    "\n",
    "Parallelism is often used in computation to speed up up a set of independent simulations. Conventionally, one might say it leads to a reduced computational cost of $t/n$, where t was the original time of the set of processes, and n is the number of cores.\n",
    "\n",
    "However, this computational performance increase is dependent on the implementation. In Python, there is some overhead from \n",
    "from communicating data structures in and out of parallel threads which can become a significant consideration when the data structures are large. Additionally, different Pools can execute more or less efficiently. Below these are each compared."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:12:27.180651Z",
     "iopub.status.busy": "2025-03-12T17:12:27.180651Z",
     "iopub.status.idle": "2025-03-12T17:12:27.184109Z",
     "shell.execute_reply": "2025-03-12T17:12:27.184109Z"
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from parallelism_methods import compare_pools, instantiate_pools, terminate_pools"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:12:27.186164Z",
     "iopub.status.busy": "2025-03-12T17:12:27.186164Z",
     "iopub.status.idle": "2025-03-12T17:12:27.240568Z",
     "shell.execute_reply": "2025-03-12T17:12:27.239507Z"
    }
   },
   "outputs": [],
   "source": [
    "cores=4\n",
    "pools = instantiate_pools(cores)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below is the baseline comparison, where the the following parameters characterize the sampling approach:\n",
    " - single faults: only the single-fault scenarios are considered\n",
    " - 3 points per phase: an evenly-spaced quadrature is sampled at each phase of operation (start, on, end) for the model\n",
    " - staged: the model is copied at each point in time where faults is injected during the model time to save computation\n",
    " - track: the entire model history is returned for each simulation\n",
    " \n",
    " This is typical for a small model like this where the per-model expense is low."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:12:27.243548Z",
     "iopub.status.busy": "2025-03-12T17:12:27.243548Z",
     "iopub.status.idle": "2025-03-12T17:12:38.608234Z",
     "shell.execute_reply": "2025-03-12T17:12:38.608234Z"
    }
   },
   "outputs": [],
   "source": [
    "mdl=Pump(track='all')\n",
    "fs = FaultSample(fd)\n",
    "fs.add_fault_phases(args = (3,))\n",
    "\n",
    "pools = instantiate_pools(5)\n",
    "_ = compare_pools(mdl, fs, pools, staged=True, verbose=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:12:38.610351Z",
     "iopub.status.busy": "2025-03-12T17:12:38.610351Z",
     "iopub.status.idle": "2025-03-12T17:12:44.176539Z",
     "shell.execute_reply": "2025-03-12T17:12:44.176539Z"
    }
   },
   "outputs": [],
   "source": [
    "exectimes = compare_pools(mdl, fs, pools, staged=True, verbose=False)\n",
    "exectimes_baseline = exectimes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:12:44.178644Z",
     "iopub.status.busy": "2025-03-12T17:12:44.178644Z",
     "iopub.status.idle": "2025-03-12T17:12:44.294294Z",
     "shell.execute_reply": "2025-03-12T17:12:44.293212Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 900x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(9, 3),)\n",
    "plt.bar(range(len(exectimes)), list(exectimes.values()), align='center')\n",
    "plt.xticks(range(len(exectimes)), list(exectimes.keys()))\n",
    "plt.title(\"Baseline Performance - Some faults, Staged, Normal Simulation, Full Model History\")\n",
    "plt.ylabel(\"Computational Time (s)\")\n",
    "plt.grid(axis='y')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown, in this situation, both the multiprocessing and threadpool pools give computational performance increases."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Comparison: No Histories\n",
    "\n",
    "In the below comparison, the same simulation approach is run, except without tracking a history of model states through the simulation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:12:44.296291Z",
     "iopub.status.busy": "2025-03-12T17:12:44.296291Z",
     "iopub.status.idle": "2025-03-12T17:12:48.732473Z",
     "shell.execute_reply": "2025-03-12T17:12:48.732473Z"
    }
   },
   "outputs": [],
   "source": [
    "mdl=Pump(track='none')\n",
    "exectimes = compare_pools(mdl, fs, pools, staged=True, verbose=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:12:48.735579Z",
     "iopub.status.busy": "2025-03-12T17:12:48.734574Z",
     "iopub.status.idle": "2025-03-12T17:12:48.868851Z",
     "shell.execute_reply": "2025-03-12T17:12:48.868851Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x282392e7dd0>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 900x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(9, 3),)\n",
    "width = 0.8\n",
    "plt.bar(range(len(exectimes)), list(exectimes.values()), align='center', color=\"blue\", label=\"comparison\")\n",
    "plt.bar(range(len(exectimes_baseline)), list(exectimes_baseline.values()), align='center', color=\"gray\", alpha=0.5, label=\"baseline\")\n",
    "plt.xticks(range(len(exectimes)), list(exectimes.keys()))\n",
    "plt.title(\"Computational Performance - Many Faults, Staged, Normal Simulation, No Model History\")\n",
    "plt.ylabel(\"Computational Time (s)\")\n",
    "plt.grid(axis='y')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown, in this situation, the overall simulation expense decreases, even in the serial execution case.\n",
    "\n",
    "Additionally, the case for using a parallel processing pool increases somewhat. This is because passing the model history back to the main process is nearly comparable in time to simulation itself.\n",
    "\n",
    "As a result, removing it saves a large amount of computational time when using parallel processing."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Comparison: Many Faults\n",
    "\n",
    "In the below comparison, many faults are injected in the system to increase the number of scenarios (ostensibly making the case better for parallelism)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:12:48.870894Z",
     "iopub.status.busy": "2025-03-12T17:12:48.870894Z",
     "iopub.status.idle": "2025-03-12T17:12:59.800446Z",
     "shell.execute_reply": "2025-03-12T17:12:59.800446Z"
    }
   },
   "outputs": [],
   "source": [
    "fs_many = FaultSample(fd)\n",
    "fs_many.add_fault_phases(args = (7,))\n",
    "mdl=Pump(track='all')\n",
    "exectimes = compare_pools(mdl, fs_many, pools, staged=True, verbose=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:12:59.803455Z",
     "iopub.status.busy": "2025-03-12T17:12:59.802457Z",
     "iopub.status.idle": "2025-03-12T17:12:59.928803Z",
     "shell.execute_reply": "2025-03-12T17:12:59.928803Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x2823930ce50>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 900x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(9, 3),)\n",
    "width = 0.8\n",
    "plt.bar(range(len(exectimes)), list(exectimes.values()), align='center', color=\"blue\", label=\"comparison\")\n",
    "plt.bar(range(len(exectimes_baseline)), list(exectimes_baseline.values()), align='center', color=\"gray\", alpha=0.8, label=\"baseline\")\n",
    "plt.xticks(range(len(exectimes)), list(exectimes.keys()))\n",
    "plt.title(\"Computational Performance - Many Faults, Staged, Normal Simulation, Full Model History\")\n",
    "plt.ylabel(\"Computational Time (s)\")\n",
    "plt.grid(axis='y')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown, increasing the number of joint-fault scenarios increases computational costs significantly--as would be expected.\n",
    "\n",
    "In this situation, multiprocessing performs comparatively better, but only slightly--instead of taking 1/4 the time, it only takes about 1/2 the time."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Comparison: Long simulation\n",
    "\n",
    "It may be of interest to simulate how the comparative performance changes for longer simulations. In this comparison, the simulation time is extended tenfold."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:12:59.930917Z",
     "iopub.status.busy": "2025-03-12T17:12:59.930917Z",
     "iopub.status.idle": "2025-03-12T17:13:05.793296Z",
     "shell.execute_reply": "2025-03-12T17:13:05.793296Z"
    }
   },
   "outputs": [],
   "source": [
    "mdl=Pump(sp=dict(times=(0,20, 500)), track='all')\n",
    "exectimes = compare_pools(mdl, fs, pools, staged=True, verbose=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:13:05.795409Z",
     "iopub.status.busy": "2025-03-12T17:13:05.795409Z",
     "iopub.status.idle": "2025-03-12T17:13:05.924667Z",
     "shell.execute_reply": "2025-03-12T17:13:05.924667Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1c0aa9058d0>"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 900x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(9, 3),)\n",
    "width = 0.8\n",
    "plt.bar(range(len(exectimes)), list(exectimes.values()), align='center', color=\"blue\", label=\"comparison\")\n",
    "plt.bar(range(len(exectimes_baseline)), list(exectimes_baseline.values()), align='center', color=\"gray\", alpha=0.8, label=\"baseline\")\n",
    "plt.xticks(range(len(exectimes)), list(exectimes.keys()))\n",
    "plt.title(\"Computational Performance - Normal Faults, Staged, Long Simulation, Full Model History\")\n",
    "plt.ylabel(\"Computational Time (s)\")\n",
    "plt.grid(axis='y')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown, the simulation time does increase significantly--about tenfold. In terms of comparative performance, pools other than multiprocessing now become competitive, though multiprocessing is still the fastest overall. \n",
    "\n",
    "This shows the main case for using parallesism--speeding up long simulations. Short simulations unfortunately require a significant amount of overhead due to copying in and out of the individual thread and we thus see less of a case for them there."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Comparison: Long Simulation No Tracking\n",
    "\n",
    "Finally, it may be interesting to see how performance is affected in long simulations when there is no tracking. This is because in these simulations, there should be very little overhead from creating the respective data structures, even when there is a long simulation. This comparison is shown below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:13:05.926666Z",
     "iopub.status.busy": "2025-03-12T17:13:05.926666Z",
     "iopub.status.idle": "2025-03-12T17:13:10.422033Z",
     "shell.execute_reply": "2025-03-12T17:13:10.422033Z"
    }
   },
   "outputs": [],
   "source": [
    "mdl=Pump(sp=dict(times=(0,20, 500)), track='none')\n",
    "exectimes = compare_pools(mdl, fs, pools, staged=True, verbose=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:13:10.425131Z",
     "iopub.status.busy": "2025-03-12T17:13:10.425131Z",
     "iopub.status.idle": "2025-03-12T17:13:10.556217Z",
     "shell.execute_reply": "2025-03-12T17:13:10.556217Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1c0aad73710>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 900x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(9, 3),)\n",
    "width = 0.8\n",
    "plt.bar(range(len(exectimes)), list(exectimes.values()), align='center', color=\"blue\", label=\"comparison\")\n",
    "plt.bar(range(len(exectimes_baseline)), list(exectimes_baseline.values()), align='center', color=\"gray\", alpha=0.8, label=\"baseline\")\n",
    "plt.xticks(range(len(exectimes)), list(exectimes.keys()))\n",
    "plt.title(\"Computational Performance - Normal Faults, Staged, Long Simulation, No Model History\")\n",
    "plt.ylabel(\"Computational Time (s)\")\n",
    "plt.grid(axis='y')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown, removing the tracking makes the long simulations much take less time than the short simulation!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Comparison: Long Simulation Only Necessary Tracking\n",
    "\n",
    "In practice, it can be necessary to track some states over time. Here we perform the same comparison using the 'valstates' option, which only tracks states which have been defined in the model to be necessary to track (using 'valparams')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:13:10.559226Z",
     "iopub.status.busy": "2025-03-12T17:13:10.559226Z",
     "iopub.status.idle": "2025-03-12T17:13:15.264448Z",
     "shell.execute_reply": "2025-03-12T17:13:15.264448Z"
    }
   },
   "outputs": [],
   "source": [
    "mdl=Pump(sp=dict(times=(0,20, 500))) # see default track for Pump\n",
    "exectimes = compare_pools(mdl, fs, pools, staged=True, verbose=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:13:15.267568Z",
     "iopub.status.busy": "2025-03-12T17:13:15.267568Z",
     "iopub.status.idle": "2025-03-12T17:13:15.404994Z",
     "shell.execute_reply": "2025-03-12T17:13:15.404994Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1c0aae0eed0>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 900x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(9, 3),)\n",
    "width = 0.8\n",
    "plt.bar(range(len(exectimes)), list(exectimes.values()), align='center', color=\"blue\", label=\"comparison\")\n",
    "plt.bar(range(len(exectimes_baseline)), list(exectimes_baseline.values()), align='center', color=\"gray\", alpha=0.8, label=\"baseline\")\n",
    "plt.xticks(range(len(exectimes)), list(exectimes.keys()))\n",
    "plt.title(\"Computational Performance - Normal Faults, Staged, Long Simulation, Only Necessary History\")\n",
    "plt.ylabel(\"Computational Time (s)\")\n",
    "plt.grid(axis='y')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown, only tracking a few variables results in similar computational time no tracking.\n",
    "\n",
    "This is because a major computational performance limitation in this model is not necessarily the model simulation itself, but the generation, update, and passing of the history. So it is often best to only track necessary parameters when possible, rather than the entire model history."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Comparison: Lower Tracking Time Resolution\n",
    "\n",
    "Finally, the number of recorded timesteps can be lowered to lower computational costs while still returning all relevant variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:13:15.407035Z",
     "iopub.status.busy": "2025-03-12T17:13:15.407035Z",
     "iopub.status.idle": "2025-03-12T17:13:21.041775Z",
     "shell.execute_reply": "2025-03-12T17:13:21.041775Z"
    }
   },
   "outputs": [],
   "source": [
    "mdl=Pump(sp=dict(times=(0,20, 500), track_times=(\"interval\", 5)), track='all')\n",
    "exectimes = compare_pools(mdl, fs, pools, staged=True, verbose=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:13:21.044838Z",
     "iopub.status.busy": "2025-03-12T17:13:21.043824Z",
     "iopub.status.idle": "2025-03-12T17:13:21.174310Z",
     "shell.execute_reply": "2025-03-12T17:13:21.173254Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1c0aad45a50>"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 900x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(9, 3),)\n",
    "width = 0.8\n",
    "plt.bar(range(len(exectimes)), list(exectimes.values()), align='center', color=\"blue\", label=\"comparison\")\n",
    "plt.bar(range(len(exectimes_baseline)), list(exectimes_baseline.values()), align='center', color=\"gray\", alpha=0.8, label=\"baseline\")\n",
    "plt.xticks(range(len(exectimes)), list(exectimes.keys()))\n",
    "plt.title(\"Computational Performance - Many Faults, Staged, Normal Simulation, Lower Time Resolution\")\n",
    "plt.ylabel(\"Computational Time (s)\")\n",
    "plt.grid(axis='y')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown, while lowering time resolution could theoretically lower computational time, it does not significantly change much in this example. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:13:21.176299Z",
     "iopub.status.busy": "2025-03-12T17:13:21.176299Z",
     "iopub.status.idle": "2025-03-12T17:13:21.209959Z",
     "shell.execute_reply": "2025-03-12T17:13:21.209959Z"
    }
   },
   "outputs": [],
   "source": [
    "terminate_pools(pools)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Comparison Conclusions:\n",
    "\n",
    "Parallelism can the improve computational performance of a given resilience simulation approach. However, this improvement is dependent on the parameters of the simulation. Generally, the official python `multiprocessing` module seems consistently give the best performance improvement over a single-process execution, although this can change depending on the underlying model and modelling approach. There are additionally reasons you might choose other pools-- `multiprocess` pools may enable more data structures in the model because they extend what can be communicated in and out of threads.\n",
    "\n",
    "In general, one of the major considerations for optimization compuational time is not just the *simulation of the model*, but the *size of the returned data structures*. Minimizing the size of the returned data structures can reduce computational time both by reducing the time of an individual simulation and by reducing the *parallelism overhead* from copying these data structures in and out of parallel threads. However, it is important to recognize that for resilience assessment, one often needs a history of model states (or, at least, states of interest) to properly quantify the dynamic costs (i.e., $\\int C_f(t) dt$). Indeed, in this model, only repair costs were able to be used in the comparison of non-tracked states, because the other dynamic costs required a history of their corresponding flows. Changing the number and size of tracked model states can influence the computational time, but only to a point--while one would expect lowering time-fidelity to have a significant effect, it does not because the overhead is less to do with filling the underlying data structures as it has to do with instantiating and returning them--a far more effective method is to only return the functions/flows which are needed by the model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Further Computational Cost Reduction via Profiling\n",
    "While parallelism and staged execution are helpful and relatively easy-to-implement methods of computational cost reduction, it can be helpful (especially for more complex models) to see what aspects of the model are taking the most computational time.\n",
    "\n",
    "While staged execution was not explored here, it can make a difference when faults are to be injected near the end of the simulation by making it unnecessary to simulate up to the fault time. However, it is less helpful when model instantiation/copy time is a significant fraction of simulation time.\n",
    "\n",
    "Python's builtin `cProfile` package can ge used to see the relative computational times of different functions/processes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:13:21.213964Z",
     "iopub.status.busy": "2025-03-12T17:13:21.212965Z",
     "iopub.status.idle": "2025-03-12T17:13:21.217667Z",
     "shell.execute_reply": "2025-03-12T17:13:21.217667Z"
    }
   },
   "outputs": [],
   "source": [
    "import cProfile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:13:21.220674Z",
     "iopub.status.busy": "2025-03-12T17:13:21.220674Z",
     "iopub.status.idle": "2025-03-12T17:13:21.352178Z",
     "shell.execute_reply": "2025-03-12T17:13:21.352178Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         232577 function calls (217980 primitive calls) in 0.141 seconds\n",
      "\n",
      "   Ordered by: internal time\n",
      "\n",
      "   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n",
      "     2562    0.015    0.000    0.034    0.000 base.py:629(get_roles_as_dict)\n",
      "8530/2976    0.009    0.000    0.028    0.000 base.py:852(<listcomp>)\n",
      "8530/2976    0.007    0.000    0.032    0.000 base.py:841(return_mutables)\n",
      "    843/1    0.007    0.000    0.124    0.124 base.py:734(__call__)\n",
      "    28669    0.006    0.000    0.008    0.000 {built-in method builtins.getattr}\n",
      "     5406    0.005    0.000    0.010    0.000 base.py:665(<dictcomp>)\n",
      "     2692    0.004    0.000    0.005    0.000 time.py:121(return_mutables)\n",
      "     2564    0.004    0.000    0.038    0.000 base.py:630(get_sims)\n",
      "      112    0.004    0.000    0.095    0.001 base.py:178(prop_static)\n",
      "    22199    0.004    0.000    0.004    0.000 {built-in method builtins.hasattr}\n",
      "    26064    0.004    0.000    0.004    0.000 {built-in method builtins.isinstance}\n",
      "      859    0.003    0.000    0.003    0.000 {method 'round' of 'numpy.ndarray' objects}\n",
      "1715/1699    0.003    0.000    0.005    0.000 copy.py:128(deepcopy)\n",
      "      859    0.003    0.000    0.009    0.000 base.py:339(gen_timerange)\n",
      "     5401    0.003    0.000    0.004    0.000 base.py:664(<dictcomp>)\n",
      "     2280    0.002    0.000    0.004    0.000 base.py:634(<dictcomp>)\n",
      " 1195/905    0.002    0.000    0.021    0.000 base.py:567(get_faults)\n",
      "     1696    0.002    0.000    0.007    0.000 base.py:284(set_field)\n",
      "     2568    0.002    0.000    0.002    0.000 time.py:115(__getattr__)\n",
      "     2578    0.002    0.000    0.003    0.000 base.py:519(get_default_roletypes)\n",
      "     2704    0.002    0.000    0.002    0.000 copy.py:66(copy)\n",
      "      518    0.002    0.000    0.011    0.000 base.py:247(assign)\n",
      "     6850    0.002    0.000    0.003    0.000 base.py:426(return_mutables)\n",
      "     1630    0.001    0.000    0.019    0.000 base.py:859(has_changed)\n",
      "     8530    0.001    0.000    0.002    0.000 base.py:831(find_mutables)\n",
      "     2692    0.001    0.000    0.004    0.000 mode.py:225(return_mutables)\n",
      "       16    0.001    0.000    0.001    0.000 {built-in method builtins.dir}\n",
      "  959/112    0.001    0.000    0.095    0.001 base.py:713(execute_static_behaviors)\n",
      "      518    0.001    0.000    0.002    0.000 base.py:186(get_field_dict)\n",
      "    10747    0.001    0.000    0.001    0.000 {method 'items' of 'dict' objects}\n",
      "      903    0.001    0.000    0.022    0.000 base.py:557(set_sub_faults)\n",
      "     1356    0.001    0.000    0.002    0.000 mode.py:313(has_fault)\n",
      "  560/224    0.001    0.000    0.002    0.000 base.py:54(get_var)\n",
      "      859    0.001    0.000    0.001    0.000 {built-in method numpy.arange}\n",
      "       56    0.001    0.000    0.003    0.000 history.py:205(log)\n",
      "     6850    0.001    0.000    0.001    0.000 {built-in method recordclass._dataobject.astuple}\n",
      "     6405    0.001    0.000    0.001    0.000 {method 'get' of 'dict' objects}\n",
      "     5725    0.001    0.000    0.001    0.000 {method 'update' of 'dict' objects}\n",
      "     1346    0.001    0.000    0.015    0.000 base.py:855(set_mutables)\n",
      "      170    0.001    0.000    0.004    0.000 ex_pump.py:415(static_behavior)\n",
      "     2280    0.001    0.000    0.001    0.000 {method 'remove' of 'list' objects}\n",
      "      859    0.001    0.000    0.004    0.000 fromnumeric.py:53(_wrapfunc)\n",
      "       11    0.001    0.000    0.001    0.000 base.py:457(<listcomp>)\n",
      "   903/56    0.001    0.000    0.107    0.002 base.py:685(update_static_behaviors)\n",
      "      847    0.001    0.000    0.015    0.000 base.py:638(update_arch_behaviors)\n",
      "       20    0.001    0.000    0.003    0.000 base.py:358(init_roles)\n",
      "      859    0.001    0.000    0.005    0.000 fromnumeric.py:3269(round)\n",
      "   336/56    0.001    0.000    0.005    0.000 base.py:722(inc_sim_time)\n",
      "     1173    0.001    0.000    0.009    0.000 time.py:129(update_time)\n",
      "     2334    0.001    0.000    0.001    0.000 {method 'startswith' of 'str' objects}\n",
      "      903    0.001    0.000    0.001    0.000 base.py:623(update_stochastic_states)\n",
      "      859    0.001    0.000    0.009    0.000 base.py:116(get_timerange)\n",
      "     3198    0.000    0.000    0.000    0.000 time.py:122(<genexpr>)\n",
      "      281    0.000    0.000    0.005    0.000 base.py:715(set_vars)\n",
      "      344    0.000    0.000    0.001    0.000 copy.py:243(_keep_alive)\n",
      "       13    0.000    0.000    0.001    0.000 inspect.py:2331(_signature_from_function)\n",
      "      348    0.000    0.000    0.000    0.000 base.py:240(<dictcomp>)\n",
      "      570    0.000    0.000    0.001    0.000 __init__.py:180(add)\n",
      "      336    0.000    0.000    0.000    0.000 {method '__deepcopy__' of 'numpy.generic' objects}\n",
      "       34    0.000    0.000    0.000    0.000 common.py:49(get_sub_include)\n",
      "     2867    0.000    0.000    0.000    0.000 {method 'copy' of 'set' objects}\n",
      "      843    0.000    0.000    0.000    0.000 time.py:177(get_sim_times)\n",
      "     2716    0.000    0.000    0.000    0.000 {method 'values' of 'dict' objects}\n",
      "      903    0.000    0.000    0.001    0.000 base.py:659(update_dynamic_behaviors)\n",
      "    26/13    0.000    0.000    0.002    0.000 inspect.py:2435(_signature_from_callable)\n",
      "      170    0.000    0.000    0.001    0.000 ex_pump.py:233(static_behavior)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:65(<listcomp>)\n",
      "    16/15    0.000    0.000    0.004    0.000 base.py:328(init_roletypes)\n",
      "     2420    0.000    0.000    0.000    0.000 {built-in method builtins.id}\n",
      "     2407    0.000    0.000    0.000    0.000 {built-in method builtins.len}\n",
      "       56    0.000    0.000    0.000    0.000 inspect.py:2669(__init__)\n",
      "     1356    0.000    0.000    0.000    0.000 {method 'intersection' of 'set' objects}\n",
      "      114    0.000    0.000    0.001    0.000 <frozen _collections_abc>:717(__ior__)\n",
      "        8    0.000    0.000    0.003    0.000 parameter.py:62(__init__)\n",
      "       12    0.000    0.000    0.000    0.000 {method 'sort' of 'numpy.ndarray' objects}\n",
      "       25    0.000    0.000    0.000    0.000 inspect.py:2955(__init__)\n",
      "     1365    0.000    0.000    0.000    0.000 {built-in method builtins.any}\n",
      "     1732    0.000    0.000    0.000    0.000 {built-in method builtins.setattr}\n",
      "       11    0.000    0.000    0.002    0.000 base.py:455(init_indicators)\n",
      "        9    0.000    0.000    0.009    0.001 base.py:281(add_flex_role_obj)\n",
      "      169    0.000    0.000    0.001    0.000 ex_pump.py:265(static_behavior)\n",
      "      903    0.000    0.000    0.000    0.000 time.py:111(has_executed)\n",
      "      169    0.000    0.000    0.000    0.000 ex_pump.py:310(static_behavior)\n",
      "        8    0.000    0.000    0.000    0.000 parameter.py:136(check_immutable)\n",
      "      167    0.000    0.000    0.095    0.001 base.py:149(update_arch_behaviors)\n",
      "    25/18    0.000    0.000    0.001    0.000 result.py:605(flatten)\n",
      "       12    0.000    0.000    0.000    0.000 time.py:137(set_timestep)\n",
      "        8    0.000    0.000    0.000    0.000 base.py:142(set_arg_type)\n",
      "       15    0.000    0.000    0.002    0.000 base.py:788(create_hist)\n",
      "    11/10    0.000    0.000    0.006    0.001 base.py:213(__init__)\n",
      "        5    0.000    0.000    0.006    0.001 base.py:825(__init__)\n",
      "     1371    0.000    0.000    0.000    0.000 copy.py:182(_deepcopy_atomic)\n",
      "        8    0.000    0.000    0.000    0.000 inspect.py:3215(__str__)\n",
      "        6    0.000    0.000    0.001    0.000 base.py:102(find_any_phase_overlap)\n",
      "      859    0.000    0.000    0.000    0.000 fromnumeric.py:3265(_round_dispatcher)\n",
      "      342    0.000    0.000    0.000    0.000 <frozen abc>:117(__instancecheck__)\n",
      "      342    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}\n",
      "       12    0.000    0.000    0.000    0.000 {method 'copy' of 'numpy.ndarray' objects}\n",
      "      115    0.000    0.000    0.001    0.000 __init__.py:65(__init__)\n",
      "    39/38    0.000    0.000    0.001    0.000 result.py:184(__init__)\n",
      "      170    0.000    0.000    0.000    0.000 ex_pump.py:382(set_faults)\n",
      "       56    0.000    0.000    0.000    0.000 enum.py:688(__call__)\n",
      "      170    0.000    0.000    0.000    0.000 base.py:234(<dictcomp>)\n",
      "      169    0.000    0.000    0.000    0.000 ex_pump.py:290(static_behavior)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:447(construct_graph)\n",
      "       39    0.000    0.000    0.000    0.000 __init__.py:1111(__init__)\n",
      "      686    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}\n",
      "      279    0.000    0.000    0.000    0.000 __init__.py:304(__iter__)\n",
      "       12    0.000    0.000    0.000    0.000 inspect.py:2037(_signature_bound_method)\n",
      "      340    0.000    0.000    0.000    0.000 {built-in method builtins.min}\n",
      "      112    0.000    0.000    0.001    0.000 __init__.py:130(copy)\n",
      "        1    0.000    0.000    0.141    0.141 {built-in method builtins.exec}\n",
      "      280    0.000    0.000    0.000    0.000 base.py:263(is_known_mutable)\n",
      "      293    0.000    0.000    0.000    0.000 {method 'update' of 'set' objects}\n",
      "       69    0.000    0.000    0.000    0.000 parameter.py:108(check_lim)\n",
      "       39    0.000    0.000    0.000    0.000 <frozen _collections_abc>:941(update)\n",
      "       13    0.000    0.000    0.002    0.000 inspect.py:3007(from_callable)\n",
      "      433    0.000    0.000    0.000    0.000 {built-in method builtins.issubclass}\n",
      "        1    0.000    0.000    0.012    0.012 base.py:101(__init__)\n",
      "      338    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}\n",
      "        8    0.000    0.000    0.000    0.000 parameter.py:157(check_type)\n",
      "      458    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}\n",
      "      170    0.000    0.000    0.000    0.000 ex_pump.py:216(set_faults)\n",
      "      6/3    0.000    0.000    0.001    0.000 copy.py:227(_deepcopy_dict)\n",
      "        2    0.000    0.000    0.002    0.001 parameter.py:176(copy_with_vals)\n",
      "        9    0.000    0.000    0.007    0.001 base.py:1161(init_obj)\n",
      "        3    0.000    0.000    0.000    0.000 base.py:487(init_indicator_hist)\n",
      "        1    0.000    0.000    0.140    0.140 propagate.py:73(nominal)\n",
      "      170    0.000    0.000    0.000    0.000 ex_pump.py:406(indicate_over_pressure)\n",
      "        6    0.000    0.000    0.002    0.000 base.py:91(__init__)\n",
      "       26    0.000    0.000    0.000    0.000 inspect.py:2756(__str__)\n",
      "      224    0.000    0.000    0.000    0.000 __init__.py:74(__len__)\n",
      "       24    0.000    0.000    0.000    0.000 numerictypes.py:357(issubdtype)\n",
      "       12    0.000    0.000    0.000    0.000 {built-in method numpy.asanyarray}\n",
      "        6    0.000    0.000    0.001    0.000 base.py:225(init_hist)\n",
      "        1    0.000    0.000    0.000    0.000 {method '__reduce_ex__' of 'object' objects}\n",
      "        8    0.000    0.000    0.002    0.000 parameter.py:180(check_pickle)\n",
      "      281    0.000    0.000    0.000    0.000 base.py:514(inject_faults)\n",
      "       69    0.000    0.000    0.000    0.000 inspect.py:3002(<genexpr>)\n",
      "       55    0.000    0.000    0.000    0.000 base.py:165(prop_dynamic)\n",
      "        6    0.000    0.000    0.000    0.000 time.py:95(__init__)\n",
      "       39    0.000    0.000    0.000    0.000 result.py:372(__setattr__)\n",
      "        1    0.000    0.000    0.015    0.015 base.py:431(new)\n",
      "        5    0.000    0.000    0.007    0.001 base.py:370(add_sim)\n",
      "       12    0.000    0.000    0.000    0.000 fromnumeric.py:865(sort)\n",
      "       24    0.000    0.000    0.000    0.000 base.py:216(is_numeric)\n",
      "       13    0.000    0.000    0.000    0.000 inspect.py:167(get_annotations)\n",
      "       14    0.000    0.000    0.000    0.000 inspect.py:735(unwrap)\n",
      "       70    0.000    0.000    0.000    0.000 inspect.py:300(ismethod)\n",
      "        4    0.000    0.000    0.000    0.000 history.py:132(init_att)\n",
      "        6    0.000    0.000    0.005    0.001 base.py:195(__init__)\n",
      "       82    0.000    0.000    0.000    0.000 result.py:341(items)\n",
      "        6    0.000    0.000    0.000    0.000 mode.py:209(__init__)\n",
      "       11    0.000    0.000    0.000    0.000 base.py:301(init_track)\n",
      "       62    0.000    0.000    0.000    0.000 inspect.py:378(isfunction)\n",
      "       24    0.000    0.000    0.000    0.000 {built-in method numpy.array}\n",
      "       48    0.000    0.000    0.000    0.000 numerictypes.py:283(issubclass_)\n",
      "       12    0.000    0.000    0.000    0.000 {built-in method recordclass._dataobject.asdict}\n",
      "      297    0.000    0.000    0.000    0.000 {built-in method builtins.iter}\n",
      "        4    0.000    0.000    0.003    0.001 base.py:330(add_flow)\n",
      "       16    0.000    0.000    0.001    0.000 base.py:131(get_histrange)\n",
      "        6    0.000    0.000    0.000    0.000 base.py:115(get_true_fields)\n",
      "       25    0.000    0.000    0.000    0.000 result.py:114(check_include_errors)\n",
      "        5    0.000    0.000    0.006    0.001 function.py:81(__init__)\n",
      "        6    0.000    0.000    0.000    0.000 base.py:122(<listcomp>)\n",
      "        1    0.000    0.000    0.002    0.002 base.py:397(new_params)\n",
      "        5    0.000    0.000    0.001    0.000 base.py:867(create_arch_kwargs)\n",
      "        3    0.000    0.000    0.000    0.000 __init__.py:1166(__copy__)\n",
      "       12    0.000    0.000    0.000    0.000 inspect.py:3023(replace)\n",
      "        6    0.000    0.000    0.000    0.000 base.py:558(get_roles)\n",
      "       56    0.000    0.000    0.000    0.000 base.py:142(get_hist_ind)\n",
      "        4    0.000    0.000    0.000    0.000 base.py:526(filter_kwargs)\n",
      "       56    0.000    0.000    0.000    0.000 ex_pump.py:509(indicate_on)\n",
      "        6    0.000    0.000    0.000    0.000 base.py:585(<listcomp>)\n",
      "      169    0.000    0.000    0.000    0.000 {method 'clear' of 'set' objects}\n",
      "       69    0.000    0.000    0.000    0.000 base.py:176(set_arg_as_type)\n",
      "      169    0.000    0.000    0.000    0.000 {method 'copy' of 'list' objects}\n",
      "        1    0.000    0.000    0.009    0.009 ex_pump.py:462(init_architecture)\n",
      "        1    0.000    0.000    0.000    0.000 result.py:130(clean_to_return)\n",
      "       10    0.000    0.000    0.000    0.000 base.py:596(<listcomp>)\n",
      "      114    0.000    0.000    0.000    0.000 inspect.py:2734(kind)\n",
      "       56    0.000    0.000    0.000    0.000 ex_pump.py:490(indicate_finished)\n",
      "       13    0.000    0.000    0.002    0.000 inspect.py:3261(signature)\n",
      "       56    0.000    0.000    0.000    0.000 enum.py:1095(__new__)\n",
      "        9    0.000    0.000    0.000    0.000 base.py:254(get_flex_role_kwargs)\n",
      "       10    0.000    0.000    0.000    0.000 base.py:590(get_roles_values)\n",
      "     11/6    0.000    0.000    0.000    0.000 base.py:241(update_seed)\n",
      "        2    0.000    0.000    0.000    0.000 base.py:378(create_hist)\n",
      "        1    0.000    0.000    0.140    0.140 <string>:1(<module>)\n",
      "       26    0.000    0.000    0.000    0.000 base.py:68(check_role)\n",
      "        1    0.000    0.000    0.000    0.000 copyreg.py:113(_slotnames)\n",
      "        1    0.000    0.000    0.000    0.000 copy.py:259(_reconstruct)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:887(check_flows)\n",
      "       10    0.000    0.000    0.000    0.000 base.py:836(<listcomp>)\n",
      "       94    0.000    0.000    0.000    0.000 inspect.py:2722(name)\n",
      "        1    0.000    0.000    0.015    0.015 propagate.py:575(__init__)\n",
      "       40    0.000    0.000    0.000    0.000 __init__.py:1128(__setitem__)\n",
      "        5    0.000    0.000    0.007    0.001 function.py:490(add_fxn)\n",
      "        1    0.000    0.000    0.125    0.125 propagate.py:382(run)\n",
      "        6    0.000    0.000    0.000    0.000 base.py:107(<listcomp>)\n",
      "      112    0.000    0.000    0.000    0.000 {method 'index' of 'list' objects}\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:602(create_simevents)\n",
      "        1    0.000    0.000    0.001    0.001 base.py:410(build)\n",
      "       12    0.000    0.000    0.000    0.000 base.py:228(get_connected_sims)\n",
      "       23    0.000    0.000    0.000    0.000 __init__.py:1118(__len__)\n",
      "       16    0.000    0.000    0.000    0.000 inspect.py:292(isclass)\n",
      "       16    0.000    0.000    0.000    0.000 base.py:295(check_slots)\n",
      "        6    0.000    0.000    0.000    0.000 base.py:221(set_time)\n",
      "       18    0.000    0.000    0.000    0.000 {method 'format' of 'str' objects}\n",
      "        6    0.000    0.000    0.000    0.000 base.py:104(<dictcomp>)\n",
      "        5    0.000    0.000    0.001    0.000 base.py:348(find_roletype_initiators)\n",
      "        1    0.000    0.000    0.000    0.000 graph.py:975(add_edges_from)\n",
      "       10    0.000    0.000    0.000    0.000 base.py:163(get_sub_kwargs)\n",
      "       56    0.000    0.000    0.000    0.000 {method 'isidentifier' of 'str' objects}\n",
      "       56    0.000    0.000    0.000    0.000 {method '__contains__' of 'frozenset' objects}\n",
      "        1    0.000    0.000    0.000    0.000 ex_pump.py:513(classify)\n",
      "        4    0.000    0.000    0.001    0.000 base.py:85(create_hist)\n",
      "        1    0.000    0.000    0.015    0.015 propagate.py:590(init_model)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:907(<listcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:463(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:265(get_result)\n",
      "       12    0.000    0.000    0.000    0.000 base.py:230(<listcomp>)\n",
      "        2    0.000    0.000    0.000    0.000 state.py:345(init_hist_att)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:63(find_roletype_initiators)\n",
      "       12    0.000    0.000    0.000    0.000 base.py:430(asdict)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:531(get_flows)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:290(get_endclass)\n",
      "       20    0.000    0.000    0.000    0.000 {method 'values' of 'mappingproxy' objects}\n",
      "        2    0.000    0.000    0.000    0.000 graph.py:573(add_nodes_from)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:216(is_dynamic)\n",
      "        5    0.000    0.000    0.000    0.000 __init__.py:201(update)\n",
      "        1    0.000    0.000    0.000    0.000 isolate.py:43(isolates)\n",
      "        2    0.000    0.000    0.000    0.000 base.py:365(init_hist_att)\n",
      "        4    0.000    0.000    0.000    0.000 {built-in method numpy.empty}\n",
      "       10    0.000    0.000    0.000    0.000 base.py:595(<listcomp>)\n",
      "       25    0.000    0.000    0.000    0.000 result.py:123(check_include_error)\n",
      "       16    0.000    0.000    0.000    0.000 graph.py:1333(neighbors)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:840(<dictcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:232(init_flexible_roles)\n",
      "       40    0.000    0.000    0.000    0.000 {built-in method builtins.callable}\n",
      "        1    0.000    0.000    0.000    0.000 copy.py:201(_deepcopy_list)\n",
      "        6    0.000    0.000    0.000    0.000 base.py:106(<listcomp>)\n",
      "        9    0.000    0.000    0.000    0.000 base.py:536(<dictcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:443(<listcomp>)\n",
      "        1    0.000    0.000    0.125    0.125 propagate.py:634(run)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:235(init_time_hist)\n",
      "        1    0.000    0.000    0.000    0.000 functools.py:981(__get__)\n",
      "        1    0.000    0.000    0.001    0.001 function.py:510(build)\n",
      "        1    0.000    0.000    0.000    0.000 function.py:534(calc_repaircost)\n",
      "        9    0.000    0.000    0.000    0.000 base.py:351(get_full_name)\n",
      "        1    0.000    0.000    0.125    0.125 propagate.py:623(__call__)\n",
      "        1    0.000    0.000    0.000    0.000 graph.py:339(__init__)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:902(<listcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'reduce' of 'numpy.ufunc' objects}\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:68(get_mdl_kwargs)\n",
      "       32    0.000    0.000    0.000    0.000 __init__.py:165(__contains__)\n",
      "        1    0.000    0.000    0.000    0.000 history.py:268(cut)\n",
      "       25    0.000    0.000    0.000    0.000 inspect.py:3015(parameters)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:370(get_resvars)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:874(<dictcomp>)\n",
      "        3    0.000    0.000    0.000    0.000 base.py:812(<listcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 fromnumeric.py:71(_wrapreduction)\n",
      "        1    0.000    0.000    0.125    0.125 propagate.py:482(__call__)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:848(<dictcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:460(get_indicators)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:730(cut_hist)\n",
      "       11    0.000    0.000    0.000    0.000 base.py:279(create_name)\n",
      "        1    0.000    0.000    0.000    0.000 isolate.py:86(<genexpr>)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:469(<dictcomp>)\n",
      "        2    0.000    0.000    0.000    0.000 base.py:86(get_track)\n",
      "       10    0.000    0.000    0.000    0.000 reportviews.py:531(__iter__)\n",
      "       12    0.000    0.000    0.000    0.000 fromnumeric.py:861(_sort_dispatcher)\n",
      "        1    0.000    0.000    0.000    0.000 inspect.py:1790(_shadowed_dict)\n",
      "       14    0.000    0.000    0.000    0.000 {built-in method sys.getrecursionlimit}\n",
      "        1    0.000    0.000    0.000    0.000 inspect.py:2063(_signature_is_builtin)\n",
      "        4    0.000    0.000    0.000    0.000 base.py:444(<listcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:437(<listcomp>)\n",
      "        5    0.000    0.000    0.000    0.000 __init__.py:1121(__getitem__)\n",
      "        1    0.000    0.000    0.000    0.000 <class 'networkx.utils.decorators.argmap'> compilation 4:1(argmap_isolates_1)\n",
      "        1    0.000    0.000    0.000    0.000 result.py:103(fromdict)\n",
      "        1    0.000    0.000    0.000    0.000 fromnumeric.py:2836(min)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:439(<listcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 inspect.py:1804(getattr_static)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:684(get_vars)\n",
      "        1    0.000    0.000    0.000    0.000 inspect.py:1774(_check_class)\n",
      "        2    0.000    0.000    0.000    0.000 base.py:431(<dictcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:62(get_sim_call_kwargs)\n",
      "        1    0.000    0.000    0.000    0.000 graph.py:1499(degree)\n",
      "        2    0.000    0.000    0.000    0.000 base.py:607(return_faultmodes)\n",
      "        2    0.000    0.000    0.000    0.000 copy.py:264(<genexpr>)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:321(get_resgraph)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:204(is_iter)\n",
      "       10    0.000    0.000    0.000    0.000 {built-in method builtins.repr}\n",
      "        1    0.000    0.000    0.000    0.000 reportviews.py:421(__init__)\n",
      "        3    0.000    0.000    0.000    0.000 scenario.py:49(get)\n",
      "        1    0.000    0.000    0.000    0.000 backends.py:525(_call_if_no_backends_installed)\n",
      "       10    0.000    0.000    0.000    0.000 inspect.py:2726(default)\n",
      "        8    0.000    0.000    0.000    0.000 base.py:57(check_role)\n",
      "        3    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x00007FFD96A64FE0}\n",
      "        5    0.000    0.000    0.000    0.000 base.py:210(is_static)\n",
      "        1    0.000    0.000    0.000    0.000 inspect.py:2075(_signature_is_functionlike)\n",
      "        2    0.000    0.000    0.000    0.000 base.py:308(t_key)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'get' of 'mappingproxy' objects}\n",
      "        3    0.000    0.000    0.000    0.000 inspect.py:1762(_static_getmro)\n",
      "        1    0.000    0.000    0.000    0.000 result.py:444(fromdict)\n",
      "        1    0.000    0.000    0.000    0.000 timer.py:62(__init__)\n",
      "        8    0.000    0.000    0.000    0.000 inspect.py:3019(return_annotation)\n",
      "       10    0.000    0.000    0.000    0.000 {method 'reverse' of 'list' objects}\n",
      "        3    0.000    0.000    0.000    0.000 misc.py:593(_clear_cache)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:673(check_faults)\n",
      "        2    0.000    0.000    0.000    0.000 __init__.py:1134(__iter__)\n",
      "        1    0.000    0.000    0.000    0.000 inspect.py:310(ismethoddescriptor)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:863(init_block)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:455(<listcomp>)\n",
      "        3    0.000    0.000    0.000    0.000 {method 'copy' of 'dict' objects}\n",
      "        1    0.000    0.000    0.000    0.000 graph.py:63(__set__)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:346(<dictcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 inspect.py:2426(_descriptor_get)\n",
      "        6    0.000    0.000    0.000    0.000 copy.py:107(_copy_immutable)\n",
      "        1    0.000    0.000    0.000    0.000 graph.py:38(__set__)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:604(<dictcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 inspect.py:1783(_is_type)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:219(<listcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:387(<listcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 fromnumeric.py:72(<dictcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 __init__.py:1138(__contains__)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:310(<listcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 reportviews.py:428(__call__)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:111(<dictcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 inspect.py:505(isbuiltin)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n",
      "        2    0.000    0.000    0.000    0.000 base.py:609(<dictcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method builtins.sum}\n",
      "        1    0.000    0.000    0.000    0.000 function.py:556(<listcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:607(<listcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 {method '__exit__' of '_thread.RLock' objects}\n",
      "        1    0.000    0.000    0.000    0.000 {method 'sort' of 'list' objects}\n",
      "        1    0.000    0.000    0.000    0.000 fromnumeric.py:2831(_min_dispatcher)\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "mdl=Pump(sp=dict(track='all'))\n",
    "prof = cProfile.run('propagate.nominal(mdl)', sort='tottime')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:13:21.354284Z",
     "iopub.status.busy": "2025-03-12T17:13:21.354284Z",
     "iopub.status.idle": "2025-03-12T17:13:28.109224Z",
     "shell.execute_reply": "2025-03-12T17:13:28.109224Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "SCENARIOS COMPLETE: 100%|██████████| 72/72 [00:07<00:00,  9.09it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         10746646 function calls (10175950 primitive calls) in 8.807 seconds\n",
      "\n",
      "   Ordered by: internal time\n",
      "\n",
      "   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n",
      "    99392    0.796    0.000    1.885    0.000 base.py:629(get_roles_as_dict)\n",
      "326136/113762    0.511    0.000    1.586    0.000 base.py:852(<listcomp>)\n",
      "32340/154    0.403    0.000    7.317    0.048 base.py:734(__call__)\n",
      "326136/113762    0.374    0.000    1.763    0.000 base.py:841(return_mutables)\n",
      "  1260502    0.357    0.000    0.486    0.000 {built-in method builtins.getattr}\n",
      "   209750    0.254    0.000    0.550    0.000 base.py:665(<dictcomp>)\n",
      "   102928    0.240    0.000    0.289    0.000 time.py:121(return_mutables)\n",
      "1190555/1190553    0.220    0.000    0.239    0.000 {built-in method builtins.isinstance}\n",
      "    99574    0.217    0.000    2.035    0.000 base.py:630(get_sims)\n",
      "     4281    0.215    0.000    5.278    0.001 base.py:178(prop_static)\n",
      "    34192    0.192    0.000    0.192    0.000 {method 'round' of 'numpy.ndarray' objects}\n",
      "     5591    0.191    0.000    0.191    0.000 {built-in method builtins.dir}\n",
      "85865/80049    0.188    0.000    0.335    0.000 copy.py:128(deepcopy)\n",
      "   875579    0.180    0.000    0.180    0.000 {built-in method builtins.hasattr}\n",
      "    34192    0.175    0.000    0.516    0.000 base.py:339(gen_timerange)\n",
      "   209016    0.156    0.000    0.210    0.000 base.py:664(<dictcomp>)\n",
      "    78443    0.137    0.000    0.506    0.000 base.py:284(set_field)\n",
      "46049/34594    0.131    0.000    1.452    0.000 base.py:567(get_faults)\n",
      "    88413    0.131    0.000    0.207    0.000 base.py:634(<dictcomp>)\n",
      "   100084    0.126    0.000    0.127    0.000 time.py:115(__getattr__)\n",
      "   121482    0.120    0.000    0.165    0.000 copy.py:66(copy)\n",
      "   101883    0.112    0.000    0.132    0.000 base.py:519(get_default_roletypes)\n",
      "    24958    0.107    0.000    0.754    0.000 base.py:247(assign)\n",
      "   261894    0.090    0.000    0.145    0.000 base.py:426(return_mutables)\n",
      "    62307    0.087    0.000    1.089    0.000 base.py:859(has_changed)\n",
      "   326136    0.082    0.000    0.094    0.000 base.py:831(find_mutables)\n",
      "     2974    0.080    0.000    0.115    0.000 base.py:448(<dictcomp>)\n",
      "    26182    0.080    0.000    0.146    0.000 base.py:186(get_field_dict)\n",
      "   102928    0.078    0.000    0.216    0.000 mode.py:225(return_mutables)\n",
      "   594052    0.077    0.000    0.077    0.000 {method 'startswith' of 'str' objects}\n",
      "36512/4281    0.071    0.000    5.293    0.001 base.py:713(execute_static_behaviors)\n",
      "    34520    0.068    0.000    1.514    0.000 base.py:557(set_sub_faults)\n",
      "   434107    0.064    0.000    0.064    0.000 {method 'items' of 'dict' objects}\n",
      "     5593    0.062    0.000    0.163    0.000 inspect.py:2331(_signature_from_function)\n",
      "21594/8652    0.059    0.000    0.089    0.000 base.py:54(get_var)\n",
      "    47794    0.059    0.000    0.086    0.000 mode.py:313(has_fault)\n",
      "    34192    0.057    0.000    0.057    0.000 {built-in method numpy.arange}\n",
      "   261894    0.055    0.000    0.055    0.000 {built-in method recordclass._dataobject.astuple}\n",
      "   361539    0.055    0.000    0.055    0.000 {method 'get' of 'dict' objects}\n",
      "     2145    0.055    0.000    0.180    0.000 history.py:205(log)\n",
      "11186/5593    0.053    0.000    0.284    0.000 inspect.py:2435(_signature_from_callable)\n",
      "   225703    0.051    0.000    0.051    0.000 {method 'update' of 'dict' objects}\n",
      "     1847    0.049    0.000    0.076    0.000 base.py:457(<listcomp>)\n",
      "    51455    0.047    0.000    0.808    0.000 base.py:855(set_mutables)\n",
      "    34192    0.040    0.000    0.241    0.000 fromnumeric.py:53(_wrapfunc)\n",
      "     6469    0.040    0.000    0.199    0.000 ex_pump.py:415(static_behavior)\n",
      "34376/2145    0.038    0.000    5.974    0.003 base.py:685(update_static_behaviors)\n",
      "    32231    0.036    0.000    0.809    0.000 base.py:638(update_arch_behaviors)\n",
      "    34192    0.036    0.000    0.277    0.000 fromnumeric.py:3269(round)\n",
      "12870/2145    0.034    0.000    0.258    0.000 base.py:722(inc_sim_time)\n",
      "    45150    0.034    0.000    0.500    0.000 time.py:129(update_time)\n",
      "    19243    0.033    0.000    0.039    0.000 copy.py:243(_keep_alive)\n",
      "     3080    0.033    0.000    0.091    0.000 base.py:358(init_roles)\n",
      "    11185    0.032    0.000    0.044    0.000 inspect.py:2955(__init__)\n",
      "      770    0.031    0.000    0.044    0.000 base.py:65(<listcomp>)\n",
      "    34192    0.031    0.000    0.547    0.000 base.py:116(get_timerange)\n",
      "     2150    0.030    0.000    0.329    0.000 parameter.py:62(__init__)\n",
      "    12429    0.030    0.000    0.049    0.000 inspect.py:2669(__init__)\n",
      "   122274    0.029    0.000    0.029    0.000 time.py:122(<genexpr>)\n",
      "    13887    0.028    0.000    0.028    0.000 {method '__deepcopy__' of 'numpy.generic' objects}\n",
      "    34376    0.028    0.000    0.038    0.000 base.py:623(update_stochastic_states)\n",
      "     2974    0.027    0.000    0.306    0.000 mode.py:228(get_fault)\n",
      "    10825    0.027    0.000    0.313    0.000 base.py:715(set_vars)\n",
      "    15582    0.027    0.000    0.027    0.000 base.py:240(<dictcomp>)\n",
      "     2150    0.026    0.000    0.036    0.000 parameter.py:136(check_immutable)\n",
      "    22945    0.026    0.000    0.033    0.000 __init__.py:180(add)\n",
      "     2150    0.026    0.000    0.035    0.000 base.py:142(set_arg_type)\n",
      "     4816    0.025    0.000    0.065    0.000 base.py:115(get_true_fields)\n",
      "   111230    0.024    0.000    0.024    0.000 {method 'copy' of 'set' objects}\n",
      "174397/173605    0.022    0.000    0.023    0.000 {built-in method builtins.len}\n",
      "   108339    0.021    0.000    0.021    0.000 {method 'values' of 'dict' objects}\n",
      "      375    0.021    0.000    0.021    0.000 {method 'acquire' of '_thread.lock' objects}\n",
      "    32340    0.021    0.000    0.021    0.000 time.py:177(get_sim_times)\n",
      "     5592    0.020    0.000    0.048    0.000 inspect.py:2037(_signature_bound_method)\n",
      "    88418    0.020    0.000    0.020    0.000 {method 'remove' of 'list' objects}\n",
      "   133848    0.020    0.000    0.020    0.000 {built-in method builtins.id}\n",
      "    34376    0.019    0.000    0.030    0.000 base.py:659(update_dynamic_behaviors)\n",
      "      146    0.019    0.000    0.019    0.000 socket.py:623(send)\n",
      "     2766    0.017    0.000    0.048    0.000 time.py:137(set_timestep)\n",
      "     1689    0.017    0.000    0.049    0.000 base.py:102(find_any_phase_overlap)\n",
      "     2150    0.017    0.000    0.032    0.000 inspect.py:3215(__str__)\n",
      "     6466    0.017    0.000    0.041    0.000 ex_pump.py:233(static_behavior)\n",
      "    88730    0.016    0.000    0.016    0.000 {built-in method builtins.setattr}\n",
      "    10600    0.015    0.000    0.021    0.000 base.py:234(<dictcomp>)\n",
      "    19194    0.015    0.000    0.026    0.000 parameter.py:108(check_lim)\n",
      "    47794    0.015    0.000    0.015    0.000 {method 'intersection' of 'set' objects}\n",
      "     1386    0.015    0.000    1.113    0.001 base.py:281(add_flex_role_obj)\n",
      "     4589    0.014    0.000    0.048    0.000 <frozen _collections_abc>:717(__ior__)\n",
      "     2150    0.013    0.000    0.017    0.000 parameter.py:157(check_type)\n",
      "     2907    0.013    0.000    0.186    0.000 base.py:341(copy)\n",
      "    49180    0.013    0.000    0.013    0.000 {built-in method builtins.any}\n",
      "      770    0.013    0.000    0.362    0.000 base.py:825(__init__)\n",
      "     5593    0.012    0.000    0.017    0.000 inspect.py:167(get_annotations)\n",
      "     4816    0.012    0.000    0.038    0.000 base.py:122(<listcomp>)\n",
      "2757/2154    0.012    0.000    0.046    0.000 result.py:605(flatten)\n",
      "      918    0.011    0.000    0.549    0.001 base.py:410(assign_roles)\n",
      "6414/6341    0.011    0.000    0.045    0.000 result.py:184(__init__)\n",
      "     6426    0.011    0.000    0.023    0.000 ex_pump.py:310(static_behavior)\n",
      "    34376    0.011    0.000    0.011    0.000 time.py:111(has_executed)\n",
      "     2974    0.011    0.000    0.060    0.000 mode.py:63(__init__)\n",
      "     6416    0.010    0.000    5.297    0.001 base.py:149(update_arch_behaviors)\n",
      "     6435    0.010    0.000    0.031    0.000 ex_pump.py:265(static_behavior)\n",
      "     1224    0.010    0.000    0.232    0.000 parameter.py:205(copy)\n",
      "    66316    0.010    0.000    0.010    0.000 copy.py:182(_deepcopy_atomic)\n",
      "      765    0.010    0.000    1.019    0.001 base.py:983(copy)\n",
      "    21666    0.009    0.000    0.019    0.000 <frozen abc>:117(__instancecheck__)\n",
      "    21666    0.009    0.000    0.009    0.000 {built-in method _abc._abc_instancecheck}\n",
      "     6414    0.009    0.000    0.033    0.000 __init__.py:1111(__init__)\n",
      "    12429    0.009    0.000    0.013    0.000 enum.py:688(__call__)\n",
      "     5594    0.009    0.000    0.013    0.000 inspect.py:735(unwrap)\n",
      "1847/1693    0.009    0.000    0.249    0.000 base.py:213(__init__)\n",
      "     1689    0.009    0.000    0.318    0.000 base.py:91(__init__)\n",
      "    18022    0.008    0.000    0.011    0.000 inspect.py:3002(<genexpr>)\n",
      "      920    0.008    0.000    0.180    0.000 parameter.py:176(copy_with_vals)\n",
      "    49836    0.008    0.000    0.008    0.000 {method 'append' of 'list' objects}\n",
      "    34192    0.008    0.000    0.008    0.000 fromnumeric.py:3265(_round_dispatcher)\n",
      "     6605    0.008    0.000    0.010    0.000 inspect.py:2756(__str__)\n",
      "     6414    0.008    0.000    0.019    0.000 <frozen _collections_abc>:941(update)\n",
      "     4692    0.008    0.000    0.008    0.000 {built-in method numpy.array}\n",
      "     1683    0.008    0.000    0.031    0.000 history.py:195(copy)\n",
      "     5593    0.008    0.000    0.291    0.000 inspect.py:3007(from_callable)\n",
      "     2974    0.007    0.000    0.215    0.000 base.py:445(get_pref_attrs)\n",
      "     5592    0.007    0.000    0.024    0.000 inspect.py:3023(replace)\n",
      "2617/2463    0.007    0.000    0.098    0.000 base.py:328(init_roletypes)\n",
      "     4743    0.007    0.000    0.055    0.000 __init__.py:65(__init__)\n",
      "    16424    0.007    0.000    0.008    0.000 inspect.py:378(isfunction)\n",
      "     3378    0.007    0.000    0.007    0.000 {method 'copy' of 'numpy.ndarray' objects}\n",
      "     6469    0.006    0.000    0.010    0.000 ex_pump.py:382(set_faults)\n",
      "     6435    0.006    0.000    0.019    0.000 ex_pump.py:290(static_behavior)\n",
      "     4281    0.006    0.000    0.060    0.000 __init__.py:130(copy)\n",
      "     2150    0.006    0.000    0.183    0.000 parameter.py:180(check_pickle)\n",
      "    10697    0.006    0.000    0.008    0.000 __init__.py:304(__iter__)\n",
      "     3378    0.006    0.000    0.006    0.000 {method 'sort' of 'numpy.ndarray' objects}\n",
      "     1842    0.006    0.000    0.054    0.000 time.py:95(__init__)\n",
      "     1851    0.006    0.000    0.041    0.000 base.py:788(create_hist)\n",
      "      766    0.006    0.000    0.198    0.000 base.py:397(new_params)\n",
      "     3378    0.005    0.000    0.023    0.000 fromnumeric.py:865(sort)\n",
      "     5593    0.005    0.000    0.297    0.000 inspect.py:3261(signature)\n",
      "     2459    0.005    0.000    0.006    0.000 base.py:301(init_track)\n",
      "     1842    0.005    0.000    0.021    0.000 mode.py:209(__init__)\n",
      "     3378    0.005    0.000    0.005    0.000 {built-in method numpy.asanyarray}\n",
      "    19194    0.005    0.000    0.005    0.000 base.py:176(set_arg_as_type)\n",
      "    10725    0.005    0.000    0.005    0.000 base.py:263(is_known_mutable)\n",
      "      770    0.005    0.000    1.094    0.001 base.py:370(add_sim)\n",
      "    25720    0.005    0.000    0.005    0.000 {built-in method builtins.issubclass}\n",
      "    13808    0.005    0.000    0.005    0.000 {method 'split' of 'str' objects}\n",
      "10897/10825    0.005    0.000    0.037    0.000 base.py:514(inject_faults)\n",
      "    10825    0.005    0.000    0.005    0.000 {built-in method builtins.min}\n",
      "    11116    0.005    0.000    0.005    0.000 {method 'update' of 'set' objects}\n",
      "     6414    0.005    0.000    0.005    0.000 result.py:372(__setattr__)\n",
      "    19600    0.005    0.000    0.005    0.000 {method 'join' of 'str' objects}\n",
      "     7163    0.005    0.000    0.006    0.000 result.py:341(items)\n",
      "     1072    0.005    0.000    0.024    0.000 copy.py:259(_reconstruct)\n",
      "2141/1912    0.005    0.000    0.022    0.000 copy.py:227(_deepcopy_dict)\n",
      "     1761    0.004    0.000    0.005    0.000 base.py:585(<listcomp>)\n",
      "     1761    0.004    0.000    0.012    0.000 base.py:558(get_roles)\n",
      "     6466    0.004    0.000    0.004    0.000 ex_pump.py:216(set_faults)\n",
      "     2532    0.004    0.000    0.004    0.000 {built-in method recordclass._dataobject.asdict}\n",
      "    31225    0.004    0.000    0.004    0.000 inspect.py:2734(kind)\n",
      "     1386    0.004    0.000    1.035    0.001 base.py:1161(init_obj)\n",
      "     2656    0.004    0.000    0.303    0.000 mode.py:279(<dictcomp>)\n",
      "      504    0.004    0.000    0.010    0.000 result.py:425(all_with)\n",
      "     8562    0.004    0.000    0.005    0.000 __init__.py:74(__len__)\n",
      "     2865    0.004    0.000    0.008    0.000 numerictypes.py:357(issubdtype)\n",
      "     6469    0.004    0.000    0.004    0.000 ex_pump.py:406(indicate_over_pressure)\n",
      "    12429    0.004    0.000    0.004    0.000 enum.py:1095(__new__)\n",
      "     1847    0.004    0.000    0.147    0.000 base.py:455(init_indicators)\n",
      "      770    0.004    0.000    0.366    0.000 function.py:81(__init__)\n",
      "     2135    0.003    0.000    0.006    0.000 base.py:165(prop_dynamic)\n",
      "     7792    0.003    0.000    0.005    0.000 inspect.py:300(ismethod)\n",
      "     3384    0.003    0.000    0.004    0.000 common.py:49(get_sub_include)\n",
      "      154    0.003    0.000    0.004    0.000 graph.py:975(add_edges_from)\n",
      "     1072    0.003    0.000    0.007    0.000 {method '__reduce_ex__' of 'object' objects}\n",
      "      612    0.003    0.000    0.072    0.000 base.py:66(copy)\n",
      "    19260    0.003    0.000    0.003    0.000 inspect.py:2722(name)\n",
      "     2656    0.003    0.000    0.306    0.000 mode.py:275(get_faults)\n",
      "     2856    0.003    0.000    0.013    0.000 base.py:216(is_numeric)\n",
      "    16712    0.003    0.000    0.003    0.000 copy.py:107(_copy_immutable)\n",
      "      924    0.003    0.000    0.217    0.000 base.py:195(__init__)\n",
      "      154    0.003    0.000    1.237    0.008 base.py:101(__init__)\n",
      "      919    0.003    0.000    0.004    0.000 copyreg.py:113(_slotnames)\n",
      "     1689    0.003    0.000    0.003    0.000 base.py:107(<listcomp>)\n",
      "     5730    0.003    0.000    0.004    0.000 numerictypes.py:283(issubclass_)\n",
      "     4549    0.003    0.000    0.003    0.000 {method 'format' of 'str' objects}\n",
      "      770    0.003    0.000    0.085    0.000 base.py:867(create_arch_kwargs)\n",
      "     5090    0.003    0.000    0.003    0.000 __init__.py:1118(__len__)\n",
      "      154    0.003    0.000    0.065    0.000 base.py:410(build)\n",
      "    12429    0.003    0.000    0.003    0.000 {method '__contains__' of 'frozenset' objects}\n",
      "    11756    0.002    0.000    0.002    0.000 {built-in method builtins.iter}\n",
      "      153    0.002    0.000    1.428    0.009 base.py:568(copy)\n",
      "     2757    0.002    0.000    0.003    0.000 result.py:114(check_include_errors)\n",
      "       73    0.002    0.000    7.921    0.109 std.py:1160(__iter__)\n",
      "    16780    0.002    0.000    0.002    0.000 {built-in method builtins.callable}\n",
      "      924    0.002    0.000    0.045    0.000 base.py:225(init_hist)\n",
      "      730    0.002    0.000    0.007    0.000 base.py:590(get_roles_values)\n",
      "     2145    0.002    0.000    0.002    0.000 ex_pump.py:509(indicate_on)\n",
      "     1852    0.002    0.000    0.045    0.000 base.py:131(get_histrange)\n",
      "     1990    0.002    0.000    0.003    0.000 copy.py:201(_deepcopy_list)\n",
      "     6292    0.002    0.000    0.002    0.000 __init__.py:1128(__setitem__)\n",
      "     1689    0.002    0.000    0.002    0.000 base.py:104(<dictcomp>)\n",
      "    12429    0.002    0.000    0.002    0.000 {method 'isidentifier' of 'str' objects}\n",
      "      730    0.002    0.000    0.003    0.000 base.py:596(<listcomp>)\n",
      "     7742    0.002    0.000    0.002    0.000 {method 'values' of 'mappingproxy' objects}\n",
      "     4004    0.002    0.000    0.002    0.000 base.py:68(check_role)\n",
      "       73    0.002    0.000    0.003    0.000 propagate.py:602(create_simevents)\n",
      "      770    0.002    0.000    0.005    0.000 base.py:887(check_flows)\n",
      "      648    0.002    0.000    0.013    0.000 result.py:353(__getattr__)\n",
      "      308    0.002    0.000    0.002    0.000 graph.py:573(add_nodes_from)\n",
      "     1386    0.002    0.000    0.006    0.000 base.py:254(get_flex_role_kwargs)\n",
      "       73    0.002    0.000    0.033    0.000 ex_pump.py:513(classify)\n",
      "    11185    0.002    0.000    0.002    0.000 inspect.py:3015(parameters)\n",
      "       72    0.002    0.000    7.863    0.109 propagate.py:681(exec_sim)\n",
      "      770    0.002    0.000    1.096    0.001 function.py:490(add_fxn)\n",
      "     1540    0.002    0.000    0.006    0.000 base.py:163(get_sub_kwargs)\n",
      "     6460    0.002    0.000    0.002    0.000 {method 'clear' of 'set' objects}\n",
      "       47    0.002    0.000    0.004    0.000 std.py:464(format_meter)\n",
      "  776/771    0.002    0.000    0.026    0.000 base.py:241(update_seed)\n",
      "     2145    0.002    0.000    0.002    0.000 base.py:142(get_hist_ind)\n",
      "      154    0.002    0.000    1.127    0.007 ex_pump.py:462(init_architecture)\n",
      "      770    0.002    0.000    0.019    0.000 base.py:216(is_dynamic)\n",
      "      730    0.002    0.000    0.005    0.000 base.py:836(<listcomp>)\n",
      "     2145    0.002    0.000    0.002    0.000 ex_pump.py:490(indicate_finished)\n",
      "      924    0.002    0.000    0.023    0.000 base.py:221(set_time)\n",
      "     6460    0.002    0.000    0.002    0.000 {method 'copy' of 'list' objects}\n",
      "     2617    0.002    0.000    0.002    0.000 base.py:295(check_slots)\n",
      "      770    0.002    0.000    0.078    0.000 base.py:348(find_roletype_initiators)\n",
      "      154    0.002    0.000    0.015    0.000 base.py:447(construct_graph)\n",
      "     1689    0.002    0.000    0.002    0.000 base.py:106(<listcomp>)\n",
      "      154    0.002    0.000    7.371    0.048 propagate.py:382(run)\n",
      "      770    0.002    0.000    0.002    0.000 base.py:907(<listcomp>)\n",
      "  459/153    0.001    0.000    0.012    0.000 copy.py:210(_deepcopy_tuple)\n",
      "     2460    0.001    0.000    0.005    0.000 base.py:430(asdict)\n",
      "     4290    0.001    0.000    0.001    0.000 {method 'index' of 'list' objects}\n",
      "      616    0.001    0.000    0.029    0.000 base.py:330(add_flow)\n",
      "      770    0.001    0.000    0.002    0.000 base.py:531(get_flows)\n",
      "     3178    0.001    0.000    0.002    0.000 utils.py:375(<genexpr>)\n",
      "      770    0.001    0.000    0.045    0.000 base.py:63(find_roletype_initiators)\n",
      "      770    0.001    0.000    0.001    0.000 base.py:840(<dictcomp>)\n",
      "     2144    0.001    0.000    0.007    0.000 copy.py:264(<genexpr>)\n",
      "       73    0.001    0.000    7.372    0.101 propagate.py:634(run)\n",
      "       74    0.001    0.000    0.001    0.000 {method 'reduce' of 'numpy.ufunc' objects}\n",
      "      154    0.001    0.000    0.002    0.000 functools.py:981(__get__)\n",
      "      154    0.001    0.000    0.003    0.000 base.py:443(<listcomp>)\n",
      "     1836    0.001    0.000    0.006    0.000 function_base.py:873(copy)\n",
      "      913    0.001    0.000    0.001    0.000 graph.py:1333(neighbors)\n",
      "      192    0.001    0.000    0.003    0.000 {built-in method builtins.sum}\n",
      "      770    0.001    0.000    0.002    0.000 __init__.py:201(update)\n",
      "      154    0.001    0.000    0.001    0.000 graph.py:339(__init__)\n",
      "        1    0.001    0.001    8.801    8.801 propagate.py:1021(run)\n",
      "     1540    0.001    0.000    0.001    0.000 reportviews.py:531(__iter__)\n",
      "      302    0.001    0.000    0.001    0.000 __init__.py:1166(__copy__)\n",
      "       49    0.001    0.000    0.015    0.000 iostream.py:655(write)\n",
      "     5594    0.001    0.000    0.001    0.000 {built-in method sys.getrecursionlimit}\n",
      "      153    0.001    0.000    0.073    0.000 base.py:593(<dictcomp>)\n",
      "      770    0.001    0.000    0.001    0.000 base.py:874(<dictcomp>)\n",
      "     1466    0.001    0.000    0.001    0.000 inspect.py:292(isclass)\n",
      "      145    0.001    0.000    0.006    0.000 base.py:684(get_vars)\n",
      "      146    0.001    0.000    0.021    0.000 iostream.py:259(schedule)\n",
      "      847    0.001    0.000    0.001    0.000 base.py:536(<dictcomp>)\n",
      "     2757    0.001    0.000    0.001    0.000 result.py:123(check_include_error)\n",
      "       45    0.001    0.000    0.055    0.001 std.py:1198(update)\n",
      "      616    0.001    0.000    0.001    0.000 base.py:444(<listcomp>)\n",
      "      770    0.001    0.000    0.001    0.000 base.py:902(<listcomp>)\n",
      "     3378    0.001    0.000    0.001    0.000 fromnumeric.py:861(_sort_dispatcher)\n",
      "      154    0.001    0.000    0.066    0.000 function.py:510(build)\n",
      "      730    0.001    0.000    0.001    0.000 base.py:595(<listcomp>)\n",
      "       73    0.001    0.000    0.001    0.000 history.py:268(cut)\n",
      "       49    0.001    0.000    0.032    0.001 iostream.py:592(flush)\n",
      "      154    0.001    0.000    0.003    0.000 isolate.py:43(isolates)\n",
      "      308    0.001    0.000    0.001    0.000 base.py:431(<dictcomp>)\n",
      "       73    0.001    0.000    0.044    0.001 base.py:290(get_endclass)\n",
      "      297    0.001    0.000    0.002    0.000 base.py:228(get_connected_sims)\n",
      "     1530    0.001    0.000    0.001    0.000 base.py:351(get_full_name)\n",
      "      154    0.001    0.000    0.020    0.000 base.py:439(<listcomp>)\n",
      "     1847    0.001    0.000    0.001    0.000 base.py:279(create_name)\n",
      "       73    0.001    0.000    0.725    0.010 propagate.py:575(__init__)\n",
      "      154    0.001    0.000    0.001    0.000 base.py:437(<listcomp>)\n",
      "      770    0.001    0.000    0.001    0.000 base.py:848(<dictcomp>)\n",
      "       73    0.001    0.000    0.021    0.000 function.py:534(calc_repaircost)\n",
      "       73    0.001    0.000    0.049    0.001 base.py:265(get_result)\n",
      "       73    0.001    0.000    0.002    0.000 base.py:730(cut_hist)\n",
      "      154    0.001    0.000    0.002    0.000 isolate.py:86(<genexpr>)\n",
      "      310    0.001    0.000    0.008    0.000 base.py:85(create_hist)\n",
      "      297    0.001    0.000    0.001    0.000 base.py:230(<listcomp>)\n",
      "      271    0.001    0.000    0.001    0.000 std.py:231(__call__)\n",
      "      307    0.001    0.000    0.022    0.000 timer.py:62(__init__)\n",
      "       49    0.001    0.000    0.022    0.000 threading.py:611(wait)\n",
      "      154    0.001    0.000    0.001    0.000 base.py:232(init_flexible_roles)\n",
      "       77    0.001    0.000    0.009    0.000 base.py:526(filter_kwargs)\n",
      "       47    0.001    0.000    0.049    0.001 std.py:457(print_status)\n",
      "  459/153    0.001    0.000    0.011    0.000 copy.py:211(<listcomp>)\n",
      "      770    0.000    0.000    0.001    0.000 base.py:210(is_static)\n",
      "       96    0.000    0.000    0.046    0.000 utils.py:194(inner)\n",
      "     1826    0.000    0.000    0.000    0.000 __init__.py:165(__contains__)\n",
      "       94    0.000    0.000    0.000    0.000 {built-in method _thread.allocate_lock}\n",
      "     3131    0.000    0.000    0.000    0.000 {built-in method unicodedata.east_asian_width}\n",
      "        1    0.000    0.000    0.630    0.630 propagate.py:1044(<listcomp>)\n",
      "      154    0.000    0.000    0.003    0.000 <class 'networkx.utils.decorators.argmap'> compilation 4:1(argmap_isolates_1)\n",
      "     74/1    0.000    0.000    8.805    8.805 propagate.py:482(__call__)\n",
      "      195    0.000    0.000    0.001    0.000 threading.py:1192(is_alive)\n",
      "       74    0.000    0.000    0.002    0.000 fromnumeric.py:71(_wrapreduction)\n",
      "       49    0.000    0.000    0.000    0.000 threading.py:243(__init__)\n",
      "       93    0.000    0.000    0.000    0.000 std.py:400(format_interval)\n",
      "       45    0.000    0.000    0.021    0.000 threading.py:295(wait)\n",
      "      154    0.000    0.000    0.000    0.000 reportviews.py:421(__init__)\n",
      "       73    0.000    0.000    0.719    0.010 propagate.py:590(init_model)\n",
      "      648    0.000    0.000    0.000    0.000 result.py:94(get_dict_attr)\n",
      "       94    0.000    0.000    0.001    0.000 utils.py:273(_is_ascii)\n",
      "       40    0.000    0.000    0.001    0.000 ipkernel.py:775(_clean_thread_parent_frames)\n",
      "     2150    0.000    0.000    0.000    0.000 inspect.py:3019(return_annotation)\n",
      "      919    0.000    0.000    0.000    0.000 {method 'get' of 'mappingproxy' objects}\n",
      "       74    0.000    0.000    0.003    0.000 propagate.py:463(__init__)\n",
      "     1836    0.000    0.000    0.000    0.000 function_base.py:869(_copy_dispatcher)\n",
      "     2305    0.000    0.000    0.000    0.000 {built-in method builtins.repr}\n",
      "       50    0.000    0.000    0.000    0.000 {method 'acquire' of '_multiprocessing.SemLock' objects}\n",
      "       47    0.000    0.000    0.000    0.000 std.py:1446(format_dict)\n",
      "       73    0.000    0.000    7.381    0.101 propagate.py:623(__call__)\n",
      "       72    0.000    0.000    0.008    0.000 base.py:546(set_fault_disturbances)\n",
      "       72    0.000    0.000    0.000    0.000 base.py:755(_get_role_call)\n",
      "     1232    0.000    0.000    0.000    0.000 base.py:57(check_role)\n",
      "      154    0.000    0.000    0.003    0.000 backends.py:525(_call_if_no_backends_installed)\n",
      "       46    0.000    0.000    0.054    0.001 std.py:1325(refresh)\n",
      "      154    0.000    0.000    0.001    0.000 graph.py:1499(degree)\n",
      "       73    0.000    0.000    0.003    0.000 base.py:370(get_resvars)\n",
      "       73    0.000    0.000    0.001    0.000 result.py:103(fromdict)\n",
      "       47    0.000    0.000    0.005    0.000 std.py:1150(__str__)\n",
      "       47    0.000    0.000    0.054    0.001 std.py:1464(display)\n",
      "       74    0.000    0.000    0.003    0.000 result.py:130(clean_to_return)\n",
      "       47    0.000    0.000    0.000    0.000 std.py:186(__format__)\n",
      "      462    0.000    0.000    0.000    0.000 misc.py:593(_clear_cache)\n",
      "       90    0.000    0.000    0.000    0.000 mode.py:353(add_fault)\n",
      "       50    0.000    0.000    0.001    0.000 std.py:102(acquire)\n",
      "      146    0.000    0.000    0.000    0.000 base.py:308(t_key)\n",
      "       47    0.000    0.000    0.046    0.001 std.py:451(fp_write)\n",
      "       50    0.000    0.000    0.000    0.000 std.py:106(release)\n",
      "      378    0.000    0.000    0.000    0.000 threading.py:1168(ident)\n",
      "      195    0.000    0.000    0.000    0.000 threading.py:1125(_wait_for_tstate_lock)\n",
      "      765    0.000    0.000    0.000    0.000 base.py:1002(<dictcomp>)\n",
      "       73    0.000    0.000    0.000    0.000 base.py:321(get_resgraph)\n",
      "      154    0.000    0.000    0.000    0.000 graph.py:38(__set__)\n",
      "      154    0.000    0.000    0.000    0.000 base.py:111(<dictcomp>)\n",
      "      658    0.000    0.000    0.000    0.000 __init__.py:1138(__contains__)\n",
      "      154    0.000    0.000    0.000    0.000 graph.py:63(__set__)\n",
      "       72    0.000    0.000    0.007    0.000 mode.py:449(get_fault_disturbances)\n",
      "       73    0.000    0.000    0.002    0.000 fromnumeric.py:2836(min)\n",
      "        1    0.000    0.000    8.807    8.807 <string>:1(<module>)\n",
      "       74    0.000    0.000    0.018    0.000 base.py:607(return_faultmodes)\n",
      "      153    0.000    0.000    0.000    0.000 copyreg.py:104(__newobj__)\n",
      "       20    0.000    0.000    0.000    0.000 ipkernel.py:790(<setcomp>)\n",
      "      146    0.000    0.000    0.000    0.000 iostream.py:138(_event_pipe)\n",
      "      289    0.000    0.000    0.000    0.000 result.py:337(keys)\n",
      "       20    0.000    0.000    0.000    0.000 threading.py:1501(enumerate)\n",
      "       49    0.000    0.000    0.001    0.000 threading.py:562(__init__)\n",
      "      304    0.000    0.000    0.000    0.000 __init__.py:1121(__getitem__)\n",
      "      770    0.000    0.000    0.000    0.000 base.py:219(<listcomp>)\n",
      "      456    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x00007FFD96A64FE0}\n",
      "      154    0.000    0.000    0.000    0.000 base.py:235(init_time_hist)\n",
      "      146    0.000    0.000    0.000    0.000 __init__.py:1134(__iter__)\n",
      "       47    0.000    0.000    0.002    0.000 utils.py:378(disp_len)\n",
      "       50    0.000    0.000    0.000    0.000 {method 'release' of '_multiprocessing.SemLock' objects}\n",
      "      154    0.000    0.000    0.002    0.000 base.py:455(<listcomp>)\n",
      "      770    0.000    0.000    0.000    0.000 base.py:863(init_block)\n",
      "        1    0.000    0.000    8.553    8.553 propagate.py:825(run)\n",
      "       47    0.000    0.000    0.000    0.000 std.py:153(__init__)\n",
      "       49    0.000    0.000    0.014    0.000 iostream.py:577(_schedule_flush)\n",
      "       74    0.000    0.000    0.000    0.000 base.py:609(<dictcomp>)\n",
      "       46    0.000    0.000    0.000    0.000 {built-in method now}\n",
      "      730    0.000    0.000    0.000    0.000 {method 'reverse' of 'list' objects}\n",
      "       73    0.000    0.000    0.000    0.000 propagate.py:607(<listcomp>)\n",
      "       47    0.000    0.000    0.000    0.000 {method 'sub' of 're.Pattern' objects}\n",
      "       73    0.000    0.000    0.000    0.000 base.py:346(<dictcomp>)\n",
      "       72    0.000    0.000    0.000    0.000 mode.py:68(valid_fault)\n",
      "       16    0.000    0.000    0.000    0.000 base.py:412(get_memory)\n",
      "      987    0.000    0.000    0.000    0.000 {built-in method builtins.ord}\n",
      "       73    0.000    0.000    0.000    0.000 propagate.py:673(check_faults)\n",
      "      288    0.000    0.000    0.000    0.000 {method 'endswith' of 'str' objects}\n",
      "       81    0.000    0.000    0.000    0.000 <frozen _collections_abc>:771(get)\n",
      "       49    0.000    0.000    0.000    0.000 iostream.py:550(_is_master_process)\n",
      "       49    0.000    0.000    0.000    0.000 iostream.py:505(parent_header)\n",
      "       73    0.000    0.000    0.000    0.000 propagate.py:604(<dictcomp>)\n",
      "       49    0.000    0.000    0.000    0.000 threading.py:1453(current_thread)\n",
      "      223    0.000    0.000    0.000    0.000 {method '__exit__' of '_thread.RLock' objects}\n",
      "       73    0.000    0.000    0.000    0.000 function.py:556(<listcomp>)\n",
      "       73    0.000    0.000    0.001    0.000 result.py:444(fromdict)\n",
      "       45    0.000    0.000    0.000    0.000 threading.py:283(_acquire_restore)\n",
      "       47    0.000    0.000    0.002    0.000 utils.py:374(_text_width)\n",
      "       74    0.000    0.000    0.000    0.000 fromnumeric.py:72(<dictcomp>)\n",
      "       73    0.000    0.000    0.000    0.000 base.py:204(is_iter)\n",
      "       60    0.000    0.000    0.000    0.000 timer.py:84(inc)\n",
      "       73    0.000    0.000    0.000    0.000 base.py:387(<listcomp>)\n",
      "      196    0.000    0.000    0.000    0.000 {built-in method time.time}\n",
      "       72    0.000    0.000    0.000    0.000 scenario.py:88(asdict)\n",
      "      154    0.000    0.000    0.000    0.000 reportviews.py:428(__call__)\n",
      "       73    0.000    0.000    0.000    0.000 base.py:310(<listcomp>)\n",
      "      369    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}\n",
      "      196    0.000    0.000    0.000    0.000 threading.py:575(is_set)\n",
      "       49    0.000    0.000    0.000    0.000 threading.py:274(__exit__)\n",
      "       50    0.000    0.000    0.000    0.000 {method 'acquire' of '_thread.RLock' objects}\n",
      "       72    0.000    0.000    0.000    0.000 propagate.py:845(get_output)\n",
      "        1    0.000    0.000    8.806    8.806 propagate.py:225(fault_sample)\n",
      "        9    0.000    0.000    0.001    0.000 base.py:771(get_memory)\n",
      "      302    0.000    0.000    0.000    0.000 {method 'copy' of 'dict' objects}\n",
      "        1    0.000    0.000    0.247    0.247 propagate.py:985(run_nom)\n",
      "       91    0.000    0.000    0.000    0.000 {built-in method sys.getsizeof}\n",
      "        1    0.000    0.000    0.001    0.001 function.py:561(get_memory)\n",
      "        1    0.000    0.000    8.807    8.807 {built-in method builtins.exec}\n",
      "        1    0.000    0.000    0.002    0.002 std.py:952(__init__)\n",
      "      233    0.000    0.000    0.000    0.000 {built-in method builtins.divmod}\n",
      "      153    0.000    0.000    0.000    0.000 {method 'lower' of 'str' objects}\n",
      "      191    0.000    0.000    0.000    0.000 {method 'append' of 'collections.deque' objects}\n",
      "       49    0.000    0.000    0.000    0.000 threading.py:271(__enter__)\n",
      "       45    0.000    0.000    0.000    0.000 threading.py:286(_is_owned)\n",
      "       72    0.000    0.000    0.000    0.000 base.py:761(<listcomp>)\n",
      "       45    0.000    0.000    0.000    0.000 threading.py:280(_release_save)\n",
      "       47    0.000    0.000    0.000    0.000 {built-in method builtins.max}\n",
      "       47    0.000    0.000    0.000    0.000 utils.py:108(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 __init__.py:48(create_string_buffer)\n",
      "       49    0.000    0.000    0.000    0.000 {built-in method nt.getpid}\n",
      "       47    0.000    0.000    0.000    0.000 std.py:167(colour)\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:297(_screen_shape_windows)\n",
      "        4    0.000    0.000    0.000    0.000 history.py:132(init_att)\n",
      "       73    0.000    0.000    0.000    0.000 {method 'sort' of 'list' objects}\n",
      "       16    0.000    0.000    0.000    0.000 base.py:496(get_memory)\n",
      "      152    0.000    0.000    0.000    0.000 inspect.py:2726(default)\n",
      "       47    0.000    0.000    0.000    0.000 utils.py:112(__format__)\n",
      "       49    0.000    0.000    0.000    0.000 {built-in method _thread.get_ident}\n",
      "        1    0.000    0.000    0.000    0.000 result.py:669(get_memory)\n",
      "        1    0.000    0.000    0.001    0.001 propagate.py:807(__init__)\n",
      "        3    0.000    0.000    0.000    0.000 base.py:487(init_indicator_hist)\n",
      "       50    0.000    0.000    0.000    0.000 {method 'release' of '_thread.RLock' objects}\n",
      "       49    0.000    0.000    0.000    0.000 {method 'write' of '_io.StringIO' objects}\n",
      "       47    0.000    0.000    0.000    0.000 std.py:163(colour)\n",
      "        1    0.000    0.000    0.001    0.001 std.py:438(status_printer)\n",
      "       73    0.000    0.000    0.000    0.000 fromnumeric.py:2831(_min_dispatcher)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:877(check_hist_memory)\n",
      "       49    0.000    0.000    0.000    0.000 {method '__enter__' of '_thread.lock' objects}\n",
      "       49    0.000    0.000    0.000    0.000 {built-in method builtins.abs}\n",
      "        1    0.000    0.000    0.015    0.015 base.py:431(new)\n",
      "        1    0.000    0.000    0.001    0.001 propagate.py:891(check_mdl_memory)\n",
      "        2    0.000    0.000    0.001    0.001 std.py:1265(close)\n",
      "       49    0.000    0.000    0.000    0.000 {method '__exit__' of '_thread.lock' objects}\n",
      "       49    0.000    0.000    0.000    0.000 {method 'get' of '_contextvars.ContextVar' objects}\n",
      "       45    0.000    0.000    0.000    0.000 {method 'release' of '_thread.lock' objects}\n",
      "        2    0.000    0.000    0.000    0.000 base.py:378(create_hist)\n",
      "        1    0.000    0.000    0.000    0.000 std.py:663(__new__)\n",
      "        1    0.000    0.000    0.630    0.630 propagate.py:1037(gen_inputs)\n",
      "        3    0.000    0.000    0.000    0.000 _weakrefset.py:63(__iter__)\n",
      "        1    0.000    0.000    0.000    0.000 std.py:686(_decr_instances)\n",
      "        1    0.000    0.000    0.000    0.000 inspect.py:1790(_shadowed_dict)\n",
      "        2    0.000    0.000    0.000    0.000 base.py:365(init_hist_att)\n",
      "        3    0.000    0.000    0.000    0.000 sample.py:916(scenarios)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:62(get_sim_call_kwargs)\n",
      "        2    0.000    0.000    0.000    0.000 state.py:345(init_hist_att)\n",
      "        1    0.000    0.000    0.000    0.000 std.py:679(_get_free_pos)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:850(gen_sim_kwargs)\n",
      "        1    0.000    0.000    0.000    0.000 fromnumeric.py:2177(sum)\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:213(__init__)\n",
      "        4    0.000    0.000    0.000    0.000 {built-in method numpy.empty}\n",
      "        1    0.000    0.000    0.000    0.000 inspect.py:2075(_signature_is_functionlike)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:643(<dictcomp>)\n",
      "        3    0.000    0.000    0.000    0.000 inspect.py:1762(_static_getmro)\n",
      "        2    0.000    0.000    0.000    0.000 std.py:1286(fp_write)\n",
      "        1    0.000    0.000    0.000    0.000 inspect.py:2063(_signature_is_builtin)\n",
      "        1    0.000    0.000    8.805    8.805 propagate.py:978(__call__)\n",
      "        2    0.000    0.000    0.000    0.000 _weakrefset.py:27(__exit__)\n",
      "        3    0.000    0.000    0.000    0.000 {method 'remove' of 'set' objects}\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:68(get_mdl_kwargs)\n",
      "        4    0.000    0.000    0.000    0.000 std.py:110(__enter__)\n",
      "        4    0.000    0.000    0.000    0.000 std.py:113(__exit__)\n",
      "        3    0.000    0.000    0.000    0.000 base.py:812(<listcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:266(_supports_unicode)\n",
      "        2    0.000    0.000    0.000    0.000 _weakrefset.py:53(_commit_removals)\n",
      "        1    0.000    0.000    0.000    0.000 inspect.py:1804(getattr_static)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:469(<dictcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 inspect.py:310(ismethoddescriptor)\n",
      "        2    0.000    0.000    0.000    0.000 base.py:86(get_track)\n",
      "        1    0.000    0.000    0.000    0.000 functools.py:393(__get__)\n",
      "        1    0.000    0.000    0.000    0.000 inspect.py:1774(_check_class)\n",
      "        1    0.000    0.000    0.000    0.000 sample.py:912(get_times)\n",
      "        1    0.000    0.000    0.000    0.000 _weakrefset.py:85(add)\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method fromtimestamp}\n",
      "        1    0.000    0.000    0.000    0.000 inspect.py:2426(_descriptor_get)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:460(get_indicators)\n",
      "        3    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}\n",
      "        1    0.000    0.000    0.000    0.000 std.py:682(<setcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 _weakrefset.py:110(remove)\n",
      "        3    0.000    0.000    0.000    0.000 scenario.py:49(get)\n",
      "        2    0.000    0.000    0.000    0.000 utils.py:187(disable_on_exception)\n",
      "        1    0.000    0.000    0.000    0.000 function.py:577(<listcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:641(get_models)\n",
      "        3    0.000    0.000    0.000    0.000 utils.py:152(wrapper_setattr)\n",
      "        2    0.000    0.000    0.000    0.000 _weakrefset.py:21(__enter__)\n",
      "        1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:1207(_handle_fromlist)\n",
      "        4    0.000    0.000    0.000    0.000 utils.py:222(__eq__)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:821(close_pool)\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:125(__eq__)\n",
      "        1    0.000    0.000    0.000    0.000 std.py:1112(__len__)\n",
      "        1    0.000    0.000    0.000    0.000 _monitor.py:94(report)\n",
      "        2    0.000    0.000    0.000    0.000 _weakrefset.py:17(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 inspect.py:1783(_is_type)\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:156(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:252(_is_utf)\n",
      "        3    0.000    0.000    0.000    0.000 std.py:226(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method fromkeys}\n",
      "        2    0.000    0.000    0.000    0.000 std.py:1153(_comparable)\n",
      "        1    0.000    0.000    0.000    0.000 inspect.py:505(isbuiltin)\n",
      "        1    0.000    0.000    0.000    0.000 std.py:1147(__del__)\n",
      "        2    0.000    0.000    0.000    0.000 {method 'pop' of 'list' objects}\n",
      "        1    0.000    0.000    0.000    0.000 {method 'encode' of 'str' objects}\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:873(std_runner)\n",
      "        2    0.000    0.000    0.000    0.000 std.py:1157(__hash__)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method _weakref.proxy}\n",
      "        1    0.000    0.000    0.000    0.000 std.py:760(get_lock)\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:282(_screen_shape_wrapper)\n",
      "        1    0.000    0.000    0.000    0.000 tz.py:74(utcoffset)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:139(__getattr__)\n",
      "        1    0.000    0.000    0.000    0.000 fromnumeric.py:2172(_sum_dispatcher)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'difference' of 'set' objects}\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method sys.audit}\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:690(close_pool)\n",
      "        1    0.000    0.000    0.000    0.000 std.py:1301(<lambda>)\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "prof = cProfile.run('propagate.fault_sample(mdl, fs)', sort='tottime')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:13:28.112332Z",
     "iopub.status.busy": "2025-03-12T17:13:28.112332Z",
     "iopub.status.idle": "2025-03-12T17:13:34.832317Z",
     "shell.execute_reply": "2025-03-12T17:13:34.832317Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "SCENARIOS COMPLETE: 100%|██████████| 72/72 [00:07<00:00,  9.50it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         10745834 function calls (10175140 primitive calls) in 8.527 seconds\n",
      "\n",
      "   Ordered by: cumulative time\n",
      "\n",
      "   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n",
      "        1    0.000    0.000    8.527    8.527 {built-in method builtins.exec}\n",
      "        1    0.000    0.000    8.527    8.527 <string>:1(<module>)\n",
      "        1    0.000    0.000    8.527    8.527 propagate.py:225(fault_sample)\n",
      "        1    0.000    0.000    8.526    8.526 propagate.py:978(__call__)\n",
      "     74/1    0.000    0.000    8.526    8.526 propagate.py:482(__call__)\n",
      "        1    0.001    0.001    8.523    8.523 propagate.py:1021(run)\n",
      "        1    0.000    0.000    8.247    8.247 propagate.py:825(run)\n",
      "       73    0.002    0.000    7.576    0.104 std.py:1160(__iter__)\n",
      "       72    0.002    0.000    7.522    0.104 propagate.py:681(exec_sim)\n",
      "       73    0.000    0.000    7.064    0.097 propagate.py:623(__call__)\n",
      "       73    0.001    0.000    7.055    0.097 propagate.py:634(run)\n",
      "      154    0.002    0.000    7.054    0.046 propagate.py:382(run)\n",
      "32340/154    0.384    0.000    6.998    0.045 base.py:734(__call__)\n",
      "34376/2145    0.035    0.000    5.703    0.003 base.py:685(update_static_behaviors)\n",
      "     6416    0.009    0.000    5.058    0.001 base.py:149(update_arch_behaviors)\n",
      "36512/4281    0.067    0.000    5.055    0.001 base.py:713(execute_static_behaviors)\n",
      "     4281    0.204    0.000    5.040    0.001 base.py:178(prop_static)\n",
      "    99574    0.207    0.000    1.944    0.000 base.py:630(get_sims)\n",
      "    99392    0.759    0.000    1.803    0.000 base.py:629(get_roles_as_dict)\n",
      "326136/113762    0.362    0.000    1.697    0.000 base.py:841(return_mutables)\n",
      "326136/113762    0.493    0.000    1.529    0.000 base.py:852(<listcomp>)\n",
      "      153    0.002    0.000    1.488    0.010 base.py:568(copy)\n",
      "    34520    0.066    0.000    1.444    0.000 base.py:557(set_sub_faults)\n",
      "46049/34594    0.123    0.000    1.385    0.000 base.py:567(get_faults)\n",
      "      154    0.003    0.000    1.286    0.008 base.py:101(__init__)\n",
      "      154    0.002    0.000    1.171    0.008 ex_pump.py:462(init_architecture)\n",
      "     1386    0.016    0.000    1.156    0.001 base.py:281(add_flex_role_obj)\n",
      "      770    0.002    0.000    1.140    0.001 function.py:490(add_fxn)\n",
      "      770    0.005    0.000    1.138    0.001 base.py:370(add_sim)\n",
      "     1386    0.004    0.000    1.076    0.001 base.py:1161(init_obj)\n",
      "      765    0.010    0.000    1.064    0.001 base.py:983(copy)\n",
      "    62307    0.082    0.000    1.045    0.000 base.py:859(has_changed)\n",
      "    51455    0.045    0.000    0.779    0.000 base.py:855(set_mutables)\n",
      "    32231    0.036    0.000    0.777    0.000 base.py:638(update_arch_behaviors)\n",
      "       73    0.001    0.000    0.731    0.010 propagate.py:575(__init__)\n",
      "    24958    0.105    0.000    0.727    0.000 base.py:247(assign)\n",
      "       73    0.000    0.000    0.725    0.010 propagate.py:590(init_model)\n",
      "        1    0.000    0.000    0.669    0.669 propagate.py:1037(gen_inputs)\n",
      "        1    0.000    0.000    0.669    0.669 propagate.py:1044(<listcomp>)\n",
      "      918    0.012    0.000    0.574    0.001 base.py:410(assign_roles)\n",
      "   209750    0.245    0.000    0.526    0.000 base.py:665(<dictcomp>)\n",
      "    34192    0.028    0.000    0.523    0.000 base.py:116(get_timerange)\n",
      "    34192    0.165    0.000    0.495    0.000 base.py:339(gen_timerange)\n",
      "    78443    0.133    0.000    0.487    0.000 base.py:284(set_field)\n",
      "    45150    0.032    0.000    0.472    0.000 time.py:129(update_time)\n",
      "  1260502    0.344    0.000    0.466    0.000 {built-in method builtins.getattr}\n",
      "      770    0.003    0.000    0.378    0.000 function.py:81(__init__)\n",
      "      770    0.013    0.000    0.375    0.000 base.py:825(__init__)\n",
      "     2150    0.033    0.000    0.341    0.000 parameter.py:62(__init__)\n",
      "     1689    0.009    0.000    0.330    0.000 base.py:91(__init__)\n",
      "85865/80049    0.181    0.000    0.323    0.000 copy.py:128(deepcopy)\n",
      "     5593    0.006    0.000    0.306    0.000 inspect.py:3261(signature)\n",
      "     2974    0.029    0.000    0.301    0.000 mode.py:228(get_fault)\n",
      "     5593    0.008    0.000    0.301    0.000 inspect.py:3007(from_callable)\n",
      "     2656    0.003    0.000    0.300    0.000 mode.py:275(get_faults)\n",
      "    10825    0.025    0.000    0.298    0.000 base.py:715(set_vars)\n",
      "     2656    0.004    0.000    0.297    0.000 mode.py:279(<dictcomp>)\n",
      "11186/5593    0.054    0.000    0.293    0.000 inspect.py:2435(_signature_from_callable)\n",
      "        1    0.000    0.000    0.275    0.275 propagate.py:985(run_nom)\n",
      "   102928    0.228    0.000    0.273    0.000 time.py:121(return_mutables)\n",
      "    34192    0.034    0.000    0.268    0.000 fromnumeric.py:3269(round)\n",
      "1847/1693    0.010    0.000    0.257    0.000 base.py:213(__init__)\n",
      "12870/2145    0.032    0.000    0.247    0.000 base.py:722(inc_sim_time)\n",
      "     1224    0.010    0.000    0.243    0.000 parameter.py:205(copy)\n",
      "    34192    0.038    0.000    0.233    0.000 fromnumeric.py:53(_wrapfunc)\n",
      "  1190546    0.207    0.000    0.225    0.000 {built-in method builtins.isinstance}\n",
      "      924    0.003    0.000    0.224    0.000 base.py:195(__init__)\n",
      "     2974    0.008    0.000    0.211    0.000 base.py:445(get_pref_attrs)\n",
      "   102928    0.074    0.000    0.208    0.000 mode.py:225(return_mutables)\n",
      "      766    0.006    0.000    0.204    0.000 base.py:397(new_params)\n",
      "   209016    0.151    0.000    0.202    0.000 base.py:664(<dictcomp>)\n",
      "    88413    0.128    0.000    0.197    0.000 base.py:634(<dictcomp>)\n",
      "     2907    0.014    0.000    0.195    0.000 base.py:341(copy)\n",
      "     5591    0.194    0.000    0.194    0.000 {built-in method builtins.dir}\n",
      "     6469    0.038    0.000    0.189    0.000 ex_pump.py:415(static_behavior)\n",
      "     2150    0.006    0.000    0.189    0.000 parameter.py:180(check_pickle)\n",
      "    34192    0.187    0.000    0.187    0.000 {method 'round' of 'numpy.ndarray' objects}\n",
      "      920    0.009    0.000    0.186    0.000 parameter.py:176(copy_with_vals)\n",
      "   875573    0.172    0.000    0.172    0.000 {built-in method builtins.hasattr}\n",
      "     2145    0.051    0.000    0.170    0.000 history.py:205(log)\n",
      "     5593    0.063    0.000    0.168    0.000 inspect.py:2331(_signature_from_function)\n",
      "   121482    0.116    0.000    0.159    0.000 copy.py:66(copy)\n",
      "     1847    0.004    0.000    0.153    0.000 base.py:455(init_indicators)\n",
      "   261894    0.089    0.000    0.143    0.000 base.py:426(return_mutables)\n",
      "    26182    0.077    0.000    0.140    0.000 base.py:186(get_field_dict)\n",
      "   101883    0.108    0.000    0.128    0.000 base.py:519(get_default_roletypes)\n",
      "   100084    0.119    0.000    0.120    0.000 time.py:115(__getattr__)\n",
      "     2974    0.079    0.000    0.113    0.000 base.py:448(<dictcomp>)\n",
      "2617/2463    0.008    0.000    0.100    0.000 base.py:328(init_roletypes)\n",
      "     3080    0.034    0.000    0.093    0.000 base.py:358(init_roles)\n",
      "   326136    0.079    0.000    0.091    0.000 base.py:831(find_mutables)\n",
      "      770    0.003    0.000    0.087    0.000 base.py:867(create_arch_kwargs)\n",
      "21594/8652    0.056    0.000    0.084    0.000 base.py:54(get_var)\n",
      "    47794    0.056    0.000    0.082    0.000 mode.py:313(has_fault)\n",
      "      770    0.002    0.000    0.080    0.000 base.py:348(find_roletype_initiators)\n",
      "     1847    0.051    0.000    0.078    0.000 base.py:457(<listcomp>)\n",
      "      153    0.001    0.000    0.076    0.000 base.py:593(<dictcomp>)\n",
      "   594052    0.076    0.000    0.076    0.000 {method 'startswith' of 'str' objects}\n",
      "      612    0.003    0.000    0.076    0.000 base.py:66(copy)\n",
      "      154    0.001    0.000    0.069    0.000 function.py:510(build)\n",
      "      154    0.003    0.000    0.069    0.000 base.py:410(build)\n",
      "     4816    0.024    0.000    0.064    0.000 base.py:115(get_true_fields)\n",
      "   434104    0.061    0.000    0.061    0.000 {method 'items' of 'dict' objects}\n",
      "     2974    0.011    0.000    0.058    0.000 mode.py:63(__init__)\n",
      "     1842    0.006    0.000    0.056    0.000 time.py:95(__init__)\n",
      "     4281    0.005    0.000    0.055    0.000 __init__.py:130(copy)\n",
      "    34192    0.055    0.000    0.055    0.000 {built-in method numpy.arange}\n",
      "   261894    0.054    0.000    0.054    0.000 {built-in method recordclass._dataobject.astuple}\n",
      "   361539    0.053    0.000    0.053    0.000 {method 'get' of 'dict' objects}\n",
      "     4743    0.007    0.000    0.052    0.000 __init__.py:65(__init__)\n",
      "       73    0.001    0.000    0.051    0.001 base.py:265(get_result)\n",
      "       42    0.001    0.000    0.051    0.001 std.py:1198(update)\n",
      "    12429    0.031    0.000    0.051    0.000 inspect.py:2669(__init__)\n",
      "       43    0.000    0.000    0.050    0.001 std.py:1325(refresh)\n",
      "     2766    0.017    0.000    0.050    0.000 time.py:137(set_timestep)\n",
      "     5592    0.021    0.000    0.050    0.000 inspect.py:2037(_signature_bound_method)\n",
      "       44    0.000    0.000    0.049    0.001 std.py:1464(display)\n",
      "     1689    0.018    0.000    0.049    0.000 base.py:102(find_any_phase_overlap)\n",
      "     1852    0.002    0.000    0.049    0.000 base.py:131(get_histrange)\n",
      "      924    0.002    0.000    0.049    0.000 base.py:225(init_hist)\n",
      "   225700    0.048    0.000    0.048    0.000 {method 'update' of 'dict' objects}\n",
      "6414/6341    0.011    0.000    0.046    0.000 result.py:184(__init__)\n",
      "       73    0.001    0.000    0.046    0.001 base.py:290(get_endclass)\n",
      "      770    0.001    0.000    0.045    0.000 base.py:63(find_roletype_initiators)\n",
      "2757/2154    0.011    0.000    0.045    0.000 result.py:605(flatten)\n",
      "     4589    0.013    0.000    0.045    0.000 <frozen _collections_abc>:717(__ior__)\n",
      "    11185    0.032    0.000    0.045    0.000 inspect.py:2955(__init__)\n",
      "       44    0.000    0.000    0.044    0.001 std.py:457(print_status)\n",
      "      770    0.031    0.000    0.044    0.000 base.py:65(<listcomp>)\n",
      "       44    0.000    0.000    0.042    0.001 std.py:451(fp_write)\n",
      "       90    0.000    0.000    0.042    0.000 utils.py:194(inner)\n",
      "     1851    0.006    0.000    0.041    0.000 base.py:788(create_hist)\n",
      "     6466    0.016    0.000    0.039    0.000 ex_pump.py:233(static_behavior)\n",
      "     4816    0.012    0.000    0.038    0.000 base.py:122(<listcomp>)\n",
      "10897/10825    0.005    0.000    0.038    0.000 base.py:514(inject_faults)\n",
      "     2150    0.027    0.000    0.038    0.000 parameter.py:136(check_immutable)\n",
      "    19243    0.032    0.000    0.038    0.000 copy.py:243(_keep_alive)\n",
      "    34376    0.027    0.000    0.037    0.000 base.py:623(update_stochastic_states)\n",
      "     2150    0.026    0.000    0.036    0.000 base.py:142(set_arg_type)\n",
      "       73    0.002    0.000    0.034    0.000 ex_pump.py:513(classify)\n",
      "     6414    0.009    0.000    0.033    0.000 __init__.py:1111(__init__)\n",
      "     2150    0.017    0.000    0.033    0.000 inspect.py:3215(__str__)\n",
      "     1683    0.008    0.000    0.031    0.000 history.py:195(copy)\n",
      "    22945    0.024    0.000    0.031    0.000 __init__.py:180(add)\n",
      "       46    0.001    0.000    0.030    0.001 iostream.py:592(flush)\n",
      "     6435    0.010    0.000    0.030    0.000 ex_pump.py:265(static_behavior)\n",
      "      616    0.001    0.000    0.029    0.000 base.py:330(add_flow)\n",
      "    34376    0.019    0.000    0.029    0.000 base.py:659(update_dynamic_behaviors)\n",
      "   122274    0.028    0.000    0.028    0.000 time.py:122(<genexpr>)\n",
      "    19194    0.015    0.000    0.026    0.000 parameter.py:108(check_lim)\n",
      "    13887    0.026    0.000    0.026    0.000 {method '__deepcopy__' of 'numpy.generic' objects}\n",
      "     1072    0.005    0.000    0.026    0.000 copy.py:259(_reconstruct)\n",
      "  776/771    0.001    0.000    0.025    0.000 base.py:241(update_seed)\n",
      "    15582    0.025    0.000    0.025    0.000 base.py:240(<dictcomp>)\n",
      "      924    0.002    0.000    0.025    0.000 base.py:221(set_time)\n",
      "     5592    0.008    0.000    0.024    0.000 inspect.py:3023(replace)\n",
      "      307    0.001    0.000    0.023    0.000 timer.py:62(__init__)\n",
      "   111230    0.023    0.000    0.023    0.000 {method 'copy' of 'set' objects}\n",
      "     1842    0.005    0.000    0.023    0.000 mode.py:209(__init__)\n",
      "     3378    0.006    0.000    0.023    0.000 fromnumeric.py:865(sort)\n",
      "       46    0.001    0.000    0.023    0.000 threading.py:611(wait)\n",
      "174391/173599    0.022    0.000    0.022    0.000 {built-in method builtins.len}\n",
      "     6426    0.010    0.000    0.022    0.000 ex_pump.py:310(static_behavior)\n",
      "       43    0.000    0.000    0.022    0.001 threading.py:295(wait)\n",
      "      154    0.001    0.000    0.022    0.000 base.py:439(<listcomp>)\n",
      "2141/1912    0.004    0.000    0.022    0.000 copy.py:227(_deepcopy_dict)\n",
      "       73    0.001    0.000    0.022    0.000 function.py:534(calc_repaircost)\n",
      "      355    0.021    0.000    0.021    0.000 {method 'acquire' of '_thread.lock' objects}\n",
      "      770    0.002    0.000    0.021    0.000 base.py:216(is_dynamic)\n",
      "    10600    0.015    0.000    0.020    0.000 base.py:234(<dictcomp>)\n",
      "    88418    0.020    0.000    0.020    0.000 {method 'remove' of 'list' objects}\n",
      "    32340    0.019    0.000    0.019    0.000 time.py:177(get_sim_times)\n",
      "   133848    0.019    0.000    0.019    0.000 {built-in method builtins.id}\n",
      "     6414    0.008    0.000    0.019    0.000 <frozen _collections_abc>:941(update)\n",
      "       74    0.000    0.000    0.019    0.000 base.py:607(return_faultmodes)\n",
      "   108339    0.019    0.000    0.019    0.000 {method 'values' of 'dict' objects}\n",
      "    21666    0.010    0.000    0.018    0.000 <frozen abc>:117(__instancecheck__)\n",
      "     6435    0.006    0.000    0.018    0.000 ex_pump.py:290(static_behavior)\n",
      "     2150    0.014    0.000    0.018    0.000 parameter.py:157(check_type)\n",
      "     5593    0.012    0.000    0.017    0.000 inspect.py:167(get_annotations)\n",
      "      137    0.001    0.000    0.016    0.000 iostream.py:259(schedule)\n",
      "    88730    0.016    0.000    0.016    0.000 {built-in method builtins.setattr}\n",
      "      154    0.002    0.000    0.015    0.000 base.py:447(construct_graph)\n",
      "      137    0.015    0.000    0.015    0.000 socket.py:623(send)\n",
      "    47794    0.014    0.000    0.014    0.000 {method 'intersection' of 'set' objects}\n",
      "    12429    0.010    0.000    0.014    0.000 enum.py:688(__call__)\n",
      "     5594    0.010    0.000    0.013    0.000 inspect.py:735(unwrap)\n",
      "     2856    0.003    0.000    0.013    0.000 base.py:216(is_numeric)\n",
      "      648    0.002    0.000    0.013    0.000 result.py:353(__getattr__)\n",
      "    49180    0.012    0.000    0.012    0.000 {built-in method builtins.any}\n",
      "     1761    0.004    0.000    0.012    0.000 base.py:558(get_roles)\n",
      "  459/153    0.001    0.000    0.012    0.000 copy.py:210(_deepcopy_tuple)\n",
      "       46    0.001    0.000    0.012    0.000 iostream.py:655(write)\n",
      "  459/153    0.001    0.000    0.012    0.000 copy.py:211(<listcomp>)\n",
      "    18022    0.009    0.000    0.011    0.000 inspect.py:3002(<genexpr>)\n",
      "     6469    0.006    0.000    0.011    0.000 ex_pump.py:382(set_faults)\n",
      "       46    0.000    0.000    0.011    0.000 iostream.py:577(_schedule_flush)\n",
      "     6605    0.008    0.000    0.010    0.000 inspect.py:2756(__str__)\n",
      "    34376    0.010    0.000    0.010    0.000 time.py:111(has_executed)\n",
      "      504    0.004    0.000    0.010    0.000 result.py:425(all_with)\n",
      "    66316    0.010    0.000    0.010    0.000 copy.py:182(_deepcopy_atomic)\n",
      "       77    0.001    0.000    0.009    0.000 base.py:526(filter_kwargs)\n",
      "    21666    0.009    0.000    0.009    0.000 {built-in method _abc._abc_instancecheck}\n",
      "    16424    0.007    0.000    0.009    0.000 inspect.py:378(isfunction)\n",
      "       72    0.000    0.000    0.008    0.000 base.py:546(set_fault_disturbances)\n",
      "    49836    0.008    0.000    0.008    0.000 {method 'append' of 'list' objects}\n",
      "        1    0.000    0.000    0.008    0.008 base.py:431(new)\n",
      "    10697    0.006    0.000    0.008    0.000 __init__.py:304(__iter__)\n",
      "       72    0.000    0.000    0.008    0.000 mode.py:449(get_fault_disturbances)\n",
      "     2865    0.004    0.000    0.008    0.000 numerictypes.py:357(issubdtype)\n",
      "     2144    0.001    0.000    0.008    0.000 copy.py:264(<genexpr>)\n",
      "    34192    0.008    0.000    0.008    0.000 fromnumeric.py:3265(_round_dispatcher)\n",
      "      310    0.001    0.000    0.007    0.000 base.py:85(create_hist)\n",
      "     1072    0.003    0.000    0.007    0.000 {method '__reduce_ex__' of 'object' objects}\n",
      "     4692    0.007    0.000    0.007    0.000 {built-in method numpy.array}\n",
      "     3378    0.007    0.000    0.007    0.000 {method 'copy' of 'numpy.ndarray' objects}\n",
      "      145    0.001    0.000    0.007    0.000 base.py:684(get_vars)\n",
      "      730    0.002    0.000    0.007    0.000 base.py:590(get_roles_values)\n",
      "     2459    0.005    0.000    0.007    0.000 base.py:301(init_track)\n",
      "     1386    0.002    0.000    0.007    0.000 base.py:254(get_flex_role_kwargs)\n",
      "     2135    0.003    0.000    0.006    0.000 base.py:165(prop_dynamic)\n",
      "     1540    0.002    0.000    0.006    0.000 base.py:163(get_sub_kwargs)\n",
      "     1761    0.005    0.000    0.006    0.000 base.py:585(<listcomp>)\n",
      "     2460    0.001    0.000    0.006    0.000 base.py:430(asdict)\n",
      "     1836    0.001    0.000    0.006    0.000 function_base.py:873(copy)\n",
      "     7163    0.004    0.000    0.005    0.000 result.py:341(items)\n",
      "     3378    0.005    0.000    0.005    0.000 {method 'sort' of 'numpy.ndarray' objects}\n",
      "      770    0.002    0.000    0.005    0.000 base.py:887(check_flows)\n",
      "     7792    0.004    0.000    0.005    0.000 inspect.py:300(ismethod)\n",
      "      730    0.002    0.000    0.005    0.000 base.py:836(<listcomp>)\n",
      "    19194    0.005    0.000    0.005    0.000 base.py:176(set_arg_as_type)\n",
      "    25720    0.005    0.000    0.005    0.000 {built-in method builtins.issubclass}\n",
      "     6414    0.005    0.000    0.005    0.000 result.py:372(__setattr__)\n",
      "    10725    0.005    0.000    0.005    0.000 base.py:263(is_known_mutable)\n",
      "     3378    0.005    0.000    0.005    0.000 {built-in method numpy.asanyarray}\n",
      "       44    0.000    0.000    0.005    0.000 std.py:1150(__str__)\n",
      "    11116    0.005    0.000    0.005    0.000 {method 'update' of 'set' objects}\n",
      "    19600    0.005    0.000    0.005    0.000 {method 'join' of 'str' objects}\n",
      "    10825    0.005    0.000    0.005    0.000 {built-in method builtins.min}\n",
      "    13808    0.005    0.000    0.005    0.000 {method 'split' of 'str' objects}\n",
      "    31225    0.004    0.000    0.004    0.000 inspect.py:2734(kind)\n",
      "     2532    0.004    0.000    0.004    0.000 {built-in method recordclass._dataobject.asdict}\n",
      "     8562    0.003    0.000    0.004    0.000 __init__.py:74(__len__)\n",
      "     6466    0.004    0.000    0.004    0.000 ex_pump.py:216(set_faults)\n",
      "     6469    0.004    0.000    0.004    0.000 ex_pump.py:406(indicate_over_pressure)\n",
      "      919    0.003    0.000    0.004    0.000 copyreg.py:113(_slotnames)\n",
      "    12429    0.004    0.000    0.004    0.000 enum.py:1095(__new__)\n",
      "     3384    0.003    0.000    0.004    0.000 common.py:49(get_sub_include)\n",
      "       44    0.002    0.000    0.004    0.000 std.py:464(format_meter)\n",
      "     5730    0.003    0.000    0.004    0.000 numerictypes.py:283(issubclass_)\n",
      "      154    0.000    0.000    0.004    0.000 <class 'networkx.utils.decorators.argmap'> compilation 4:1(argmap_isolates_1)\n",
      "      154    0.003    0.000    0.004    0.000 graph.py:975(add_edges_from)\n",
      "     1689    0.003    0.000    0.003    0.000 base.py:107(<listcomp>)\n",
      "     5090    0.003    0.000    0.003    0.000 __init__.py:1118(__len__)\n",
      "       73    0.000    0.000    0.003    0.000 base.py:370(get_resvars)\n",
      "     1990    0.002    0.000    0.003    0.000 copy.py:201(_deepcopy_list)\n",
      "    19260    0.003    0.000    0.003    0.000 inspect.py:2722(name)\n",
      "     2757    0.002    0.000    0.003    0.000 result.py:114(check_include_errors)\n",
      "      154    0.000    0.000    0.003    0.000 backends.py:525(_call_if_no_backends_installed)\n",
      "       73    0.002    0.000    0.003    0.000 propagate.py:602(create_simevents)\n",
      "     4543    0.003    0.000    0.003    0.000 {method 'format' of 'str' objects}\n",
      "      730    0.002    0.000    0.003    0.000 base.py:596(<listcomp>)\n",
      "      308    0.002    0.000    0.003    0.000 graph.py:573(add_nodes_from)\n",
      "      154    0.001    0.000    0.003    0.000 isolate.py:43(isolates)\n",
      "      154    0.001    0.000    0.003    0.000 base.py:443(<listcomp>)\n",
      "    16712    0.003    0.000    0.003    0.000 copy.py:107(_copy_immutable)\n",
      "      770    0.001    0.000    0.003    0.000 __init__.py:201(update)\n",
      "    12429    0.003    0.000    0.003    0.000 {method '__contains__' of 'frozenset' objects}\n",
      "    16780    0.002    0.000    0.002    0.000 {built-in method builtins.callable}\n",
      "      189    0.001    0.000    0.002    0.000 {built-in method builtins.sum}\n",
      "       74    0.000    0.000    0.002    0.000 propagate.py:463(__init__)\n",
      "       44    0.000    0.000    0.002    0.000 utils.py:378(disp_len)\n",
      "     6292    0.002    0.000    0.002    0.000 __init__.py:1128(__setitem__)\n",
      "    11756    0.002    0.000    0.002    0.000 {built-in method builtins.iter}\n",
      "     7742    0.002    0.000    0.002    0.000 {method 'values' of 'mappingproxy' objects}\n",
      "    12429    0.002    0.000    0.002    0.000 {method 'isidentifier' of 'str' objects}\n",
      "     1689    0.002    0.000    0.002    0.000 base.py:104(<dictcomp>)\n",
      "       44    0.000    0.000    0.002    0.000 utils.py:374(_text_width)\n",
      "     2617    0.002    0.000    0.002    0.000 base.py:295(check_slots)\n",
      "      770    0.001    0.000    0.002    0.000 base.py:531(get_flows)\n",
      "       74    0.000    0.000    0.002    0.000 result.py:130(clean_to_return)\n",
      "      154    0.001    0.000    0.002    0.000 functools.py:981(__get__)\n",
      "      297    0.001    0.000    0.002    0.000 base.py:228(get_connected_sims)\n",
      "     2145    0.002    0.000    0.002    0.000 ex_pump.py:509(indicate_on)\n",
      "     4004    0.002    0.000    0.002    0.000 base.py:68(check_role)\n",
      "    11185    0.002    0.000    0.002    0.000 inspect.py:3015(parameters)\n",
      "       73    0.000    0.000    0.002    0.000 fromnumeric.py:2836(min)\n",
      "      770    0.002    0.000    0.002    0.000 base.py:907(<listcomp>)\n",
      "      154    0.000    0.000    0.002    0.000 base.py:455(<listcomp>)\n",
      "     6460    0.002    0.000    0.002    0.000 {method 'copy' of 'list' objects}\n",
      "     6460    0.002    0.000    0.002    0.000 {method 'clear' of 'set' objects}\n",
      "     2145    0.002    0.000    0.002    0.000 base.py:142(get_hist_ind)\n",
      "     2145    0.002    0.000    0.002    0.000 ex_pump.py:490(indicate_finished)\n",
      "      154    0.001    0.000    0.002    0.000 isolate.py:86(<genexpr>)\n",
      "       74    0.000    0.000    0.002    0.000 fromnumeric.py:71(_wrapreduction)\n",
      "     1466    0.001    0.000    0.002    0.000 inspect.py:292(isclass)\n",
      "     2974    0.001    0.000    0.002    0.000 utils.py:375(<genexpr>)\n",
      "      154    0.001    0.000    0.001    0.000 base.py:437(<listcomp>)\n",
      "     1689    0.001    0.000    0.001    0.000 base.py:106(<listcomp>)\n",
      "      154    0.001    0.000    0.001    0.000 graph.py:339(__init__)\n",
      "       73    0.000    0.000    0.001    0.000 base.py:730(cut_hist)\n",
      "      730    0.001    0.000    0.001    0.000 base.py:595(<listcomp>)\n",
      "      770    0.001    0.000    0.001    0.000 base.py:840(<dictcomp>)\n",
      "        1    0.000    0.000    0.001    0.001 std.py:952(__init__)\n",
      "     4290    0.001    0.000    0.001    0.000 {method 'index' of 'list' objects}\n",
      "       73    0.001    0.000    0.001    0.000 history.py:268(cut)\n",
      "      302    0.001    0.000    0.001    0.000 __init__.py:1166(__copy__)\n",
      "      770    0.001    0.000    0.001    0.000 base.py:874(<dictcomp>)\n",
      "      616    0.001    0.000    0.001    0.000 base.py:444(<listcomp>)\n",
      "      770    0.001    0.000    0.001    0.000 base.py:902(<listcomp>)\n",
      "     1540    0.001    0.000    0.001    0.000 reportviews.py:531(__iter__)\n",
      "       74    0.001    0.000    0.001    0.000 {method 'reduce' of 'numpy.ufunc' objects}\n",
      "     5594    0.001    0.000    0.001    0.000 {built-in method sys.getrecursionlimit}\n",
      "       73    0.000    0.000    0.001    0.000 result.py:444(fromdict)\n",
      "      154    0.000    0.000    0.001    0.000 graph.py:1499(degree)\n",
      "      183    0.000    0.000    0.001    0.000 threading.py:1192(is_alive)\n",
      "      297    0.001    0.000    0.001    0.000 base.py:230(<listcomp>)\n",
      "       46    0.000    0.000    0.001    0.000 threading.py:562(__init__)\n",
      "      913    0.001    0.000    0.001    0.000 graph.py:1333(neighbors)\n",
      "       73    0.000    0.000    0.001    0.000 result.py:103(fromdict)\n",
      "      770    0.000    0.000    0.001    0.000 base.py:210(is_static)\n",
      "     2757    0.001    0.000    0.001    0.000 result.py:123(check_include_error)\n",
      "      847    0.001    0.000    0.001    0.000 base.py:536(<dictcomp>)\n",
      "       40    0.000    0.000    0.001    0.000 ipkernel.py:775(_clean_thread_parent_frames)\n",
      "        2    0.000    0.000    0.001    0.000 std.py:1265(close)\n",
      "     3378    0.001    0.000    0.001    0.000 fromnumeric.py:861(_sort_dispatcher)\n",
      "     1530    0.001    0.000    0.001    0.000 base.py:351(get_full_name)\n",
      "     1847    0.001    0.000    0.001    0.000 base.py:279(create_name)\n",
      "      308    0.001    0.000    0.001    0.000 base.py:431(<dictcomp>)\n",
      "      154    0.000    0.000    0.001    0.000 base.py:232(init_flexible_roles)\n",
      "        1    0.000    0.000    0.001    0.001 propagate.py:807(__init__)\n",
      "      770    0.001    0.000    0.001    0.000 base.py:848(<dictcomp>)\n",
      "      253    0.001    0.000    0.001    0.000 std.py:231(__call__)\n",
      "       47    0.000    0.000    0.001    0.000 std.py:102(acquire)\n",
      "       44    0.000    0.000    0.001    0.000 std.py:1446(format_dict)\n",
      "      154    0.000    0.000    0.001    0.000 reportviews.py:421(__init__)\n",
      "        1    0.000    0.000    0.001    0.001 std.py:438(status_printer)\n",
      "     1826    0.001    0.000    0.001    0.000 __init__.py:165(__contains__)\n",
      "     2930    0.000    0.000    0.000    0.000 {built-in method unicodedata.east_asian_width}\n",
      "       88    0.000    0.000    0.000    0.000 utils.py:273(_is_ascii)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:891(check_mdl_memory)\n",
      "       87    0.000    0.000    0.000    0.000 std.py:400(format_interval)\n",
      "        1    0.000    0.000    0.000    0.000 function.py:561(get_memory)\n",
      "      648    0.000    0.000    0.000    0.000 result.py:94(get_dict_attr)\n",
      "       46    0.000    0.000    0.000    0.000 threading.py:243(__init__)\n",
      "      919    0.000    0.000    0.000    0.000 {method 'get' of 'mappingproxy' objects}\n",
      "       90    0.000    0.000    0.000    0.000 mode.py:353(add_fault)\n",
      "       73    0.000    0.000    0.000    0.000 base.py:321(get_resgraph)\n",
      "     2150    0.000    0.000    0.000    0.000 inspect.py:3019(return_annotation)\n",
      "       89    0.000    0.000    0.000    0.000 {built-in method _thread.allocate_lock}\n",
      "       20    0.000    0.000    0.000    0.000 ipkernel.py:790(<setcomp>)\n",
      "     2305    0.000    0.000    0.000    0.000 {built-in method builtins.repr}\n",
      "       47    0.000    0.000    0.000    0.000 std.py:106(release)\n",
      "      462    0.000    0.000    0.000    0.000 misc.py:593(_clear_cache)\n",
      "     1836    0.000    0.000    0.000    0.000 function_base.py:869(_copy_dispatcher)\n",
      "        9    0.000    0.000    0.000    0.000 base.py:771(get_memory)\n",
      "       47    0.000    0.000    0.000    0.000 {method 'acquire' of '_multiprocessing.SemLock' objects}\n",
      "      183    0.000    0.000    0.000    0.000 threading.py:1125(_wait_for_tstate_lock)\n",
      "       44    0.000    0.000    0.000    0.000 std.py:186(__format__)\n",
      "       72    0.000    0.000    0.000    0.000 base.py:755(_get_role_call)\n",
      "       73    0.000    0.000    0.000    0.000 base.py:204(is_iter)\n",
      "     1232    0.000    0.000    0.000    0.000 base.py:57(check_role)\n",
      "      146    0.000    0.000    0.000    0.000 base.py:308(t_key)\n",
      "      770    0.000    0.000    0.000    0.000 base.py:219(<listcomp>)\n",
      "      154    0.000    0.000    0.000    0.000 base.py:111(<dictcomp>)\n",
      "      153    0.000    0.000    0.000    0.000 copyreg.py:104(__newobj__)\n",
      "      765    0.000    0.000    0.000    0.000 base.py:1002(<dictcomp>)\n",
      "      289    0.000    0.000    0.000    0.000 result.py:337(keys)\n",
      "      154    0.000    0.000    0.000    0.000 base.py:235(init_time_hist)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:62(get_sim_call_kwargs)\n",
      "      154    0.000    0.000    0.000    0.000 graph.py:38(__set__)\n",
      "      154    0.000    0.000    0.000    0.000 graph.py:63(__set__)\n",
      "      658    0.000    0.000    0.000    0.000 __init__.py:1138(__contains__)\n",
      "      372    0.000    0.000    0.000    0.000 threading.py:1168(ident)\n",
      "       73    0.000    0.000    0.000    0.000 propagate.py:673(check_faults)\n",
      "      146    0.000    0.000    0.000    0.000 __init__.py:1134(__iter__)\n",
      "       72    0.000    0.000    0.000    0.000 scenario.py:88(asdict)\n",
      "      456    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x00007FFD96A64FE0}\n",
      "       81    0.000    0.000    0.000    0.000 <frozen _collections_abc>:771(get)\n",
      "      304    0.000    0.000    0.000    0.000 __init__.py:1121(__getitem__)\n",
      "        2    0.000    0.000    0.000    0.000 std.py:1286(fp_write)\n",
      "       72    0.000    0.000    0.000    0.000 mode.py:68(valid_fault)\n",
      "      137    0.000    0.000    0.000    0.000 iostream.py:138(_event_pipe)\n",
      "       16    0.000    0.000    0.000    0.000 base.py:496(get_memory)\n",
      "       44    0.000    0.000    0.000    0.000 std.py:153(__init__)\n",
      "       73    0.000    0.000    0.000    0.000 base.py:346(<dictcomp>)\n",
      "      770    0.000    0.000    0.000    0.000 base.py:863(init_block)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:877(check_hist_memory)\n",
      "       74    0.000    0.000    0.000    0.000 base.py:609(<dictcomp>)\n",
      "       44    0.000    0.000    0.000    0.000 {method 'sub' of 're.Pattern' objects}\n",
      "        1    0.000    0.000    0.000    0.000 result.py:669(get_memory)\n",
      "       47    0.000    0.000    0.000    0.000 {method 'release' of '_multiprocessing.SemLock' objects}\n",
      "       46    0.000    0.000    0.000    0.000 iostream.py:550(_is_master_process)\n",
      "      730    0.000    0.000    0.000    0.000 {method 'reverse' of 'list' objects}\n",
      "      288    0.000    0.000    0.000    0.000 {method 'endswith' of 'str' objects}\n",
      "       73    0.000    0.000    0.000    0.000 propagate.py:607(<listcomp>)\n",
      "       16    0.000    0.000    0.000    0.000 base.py:412(get_memory)\n",
      "       20    0.000    0.000    0.000    0.000 threading.py:1501(enumerate)\n",
      "       43    0.000    0.000    0.000    0.000 {built-in method now}\n",
      "       73    0.000    0.000    0.000    0.000 propagate.py:604(<dictcomp>)\n",
      "       46    0.000    0.000    0.000    0.000 threading.py:1453(current_thread)\n",
      "       46    0.000    0.000    0.000    0.000 iostream.py:505(parent_header)\n",
      "      924    0.000    0.000    0.000    0.000 {built-in method builtins.ord}\n",
      "       43    0.000    0.000    0.000    0.000 threading.py:283(_acquire_restore)\n",
      "       73    0.000    0.000    0.000    0.000 function.py:556(<listcomp>)\n",
      "      220    0.000    0.000    0.000    0.000 {method '__exit__' of '_thread.RLock' objects}\n",
      "       73    0.000    0.000    0.000    0.000 base.py:310(<listcomp>)\n",
      "       74    0.000    0.000    0.000    0.000 fromnumeric.py:72(<dictcomp>)\n",
      "       73    0.000    0.000    0.000    0.000 base.py:387(<listcomp>)\n",
      "      154    0.000    0.000    0.000    0.000 reportviews.py:428(__call__)\n",
      "       60    0.000    0.000    0.000    0.000 timer.py:84(inc)\n",
      "       46    0.000    0.000    0.000    0.000 threading.py:274(__exit__)\n",
      "      186    0.000    0.000    0.000    0.000 {built-in method time.time}\n",
      "      369    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}\n",
      "       72    0.000    0.000    0.000    0.000 propagate.py:845(get_output)\n",
      "      184    0.000    0.000    0.000    0.000 threading.py:575(is_set)\n",
      "       46    0.000    0.000    0.000    0.000 threading.py:271(__enter__)\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:297(_screen_shape_windows)\n",
      "       47    0.000    0.000    0.000    0.000 {method 'acquire' of '_thread.RLock' objects}\n",
      "      302    0.000    0.000    0.000    0.000 {method 'copy' of 'dict' objects}\n",
      "        2    0.000    0.000    0.000    0.000 base.py:378(create_hist)\n",
      "        3    0.000    0.000    0.000    0.000 base.py:487(init_indicator_hist)\n",
      "       43    0.000    0.000    0.000    0.000 threading.py:286(_is_owned)\n",
      "       43    0.000    0.000    0.000    0.000 threading.py:280(_release_save)\n",
      "      153    0.000    0.000    0.000    0.000 {method 'lower' of 'str' objects}\n",
      "      218    0.000    0.000    0.000    0.000 {built-in method builtins.divmod}\n",
      "        1    0.000    0.000    0.000    0.000 fromnumeric.py:2177(sum)\n",
      "      180    0.000    0.000    0.000    0.000 {method 'append' of 'collections.deque' objects}\n",
      "        1    0.000    0.000    0.000    0.000 std.py:686(_decr_instances)\n",
      "       72    0.000    0.000    0.000    0.000 base.py:761(<listcomp>)\n",
      "       44    0.000    0.000    0.000    0.000 utils.py:108(__init__)\n",
      "       91    0.000    0.000    0.000    0.000 {built-in method sys.getsizeof}\n",
      "        4    0.000    0.000    0.000    0.000 history.py:132(init_att)\n",
      "        1    0.000    0.000    0.000    0.000 std.py:663(__new__)\n",
      "       46    0.000    0.000    0.000    0.000 {built-in method nt.getpid}\n",
      "       44    0.000    0.000    0.000    0.000 std.py:167(colour)\n",
      "        4    0.000    0.000    0.000    0.000 std.py:110(__enter__)\n",
      "      152    0.000    0.000    0.000    0.000 inspect.py:2726(default)\n",
      "        1    0.000    0.000    0.000    0.000 __init__.py:48(create_string_buffer)\n",
      "       73    0.000    0.000    0.000    0.000 {method 'sort' of 'list' objects}\n",
      "       44    0.000    0.000    0.000    0.000 {built-in method builtins.max}\n",
      "       46    0.000    0.000    0.000    0.000 {built-in method _thread.get_ident}\n",
      "       44    0.000    0.000    0.000    0.000 utils.py:112(__format__)\n",
      "        2    0.000    0.000    0.000    0.000 state.py:345(init_hist_att)\n",
      "       73    0.000    0.000    0.000    0.000 fromnumeric.py:2831(_min_dispatcher)\n",
      "        2    0.000    0.000    0.000    0.000 base.py:365(init_hist_att)\n",
      "       44    0.000    0.000    0.000    0.000 std.py:163(colour)\n",
      "       46    0.000    0.000    0.000    0.000 {method 'write' of '_io.StringIO' objects}\n",
      "        3    0.000    0.000    0.000    0.000 _weakrefset.py:63(__iter__)\n",
      "       47    0.000    0.000    0.000    0.000 {method 'release' of '_thread.RLock' objects}\n",
      "       46    0.000    0.000    0.000    0.000 {built-in method builtins.abs}\n",
      "        1    0.000    0.000    0.000    0.000 std.py:679(_get_free_pos)\n",
      "        1    0.000    0.000    0.000    0.000 inspect.py:1804(getattr_static)\n",
      "        4    0.000    0.000    0.000    0.000 std.py:113(__exit__)\n",
      "       46    0.000    0.000    0.000    0.000 {method '__enter__' of '_thread.lock' objects}\n",
      "       46    0.000    0.000    0.000    0.000 {method '__exit__' of '_thread.lock' objects}\n",
      "       46    0.000    0.000    0.000    0.000 {method 'get' of '_contextvars.ContextVar' objects}\n",
      "       43    0.000    0.000    0.000    0.000 {method 'release' of '_thread.lock' objects}\n",
      "        1    0.000    0.000    0.000    0.000 std.py:682(<setcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 inspect.py:2063(_signature_is_builtin)\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:213(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 inspect.py:1774(_check_class)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:850(gen_sim_kwargs)\n",
      "        1    0.000    0.000    0.000    0.000 _weakrefset.py:110(remove)\n",
      "        2    0.000    0.000    0.000    0.000 _weakrefset.py:27(__exit__)\n",
      "        1    0.000    0.000    0.000    0.000 inspect.py:2075(_signature_is_functionlike)\n",
      "        3    0.000    0.000    0.000    0.000 {method 'remove' of 'set' objects}\n",
      "        1    0.000    0.000    0.000    0.000 inspect.py:1790(_shadowed_dict)\n",
      "        1    0.000    0.000    0.000    0.000 inspect.py:310(ismethoddescriptor)\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:266(_supports_unicode)\n",
      "        3    0.000    0.000    0.000    0.000 sample.py:916(scenarios)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:68(get_mdl_kwargs)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:460(get_indicators)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:641(get_models)\n",
      "        1    0.000    0.000    0.000    0.000 _weakrefset.py:85(add)\n",
      "        2    0.000    0.000    0.000    0.000 _weakrefset.py:53(_commit_removals)\n",
      "        3    0.000    0.000    0.000    0.000 inspect.py:1762(_static_getmro)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:643(<dictcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 inspect.py:1783(_is_type)\n",
      "        4    0.000    0.000    0.000    0.000 {built-in method numpy.empty}\n",
      "        1    0.000    0.000    0.000    0.000 std.py:1112(__len__)\n",
      "        1    0.000    0.000    0.000    0.000 functools.py:393(__get__)\n",
      "        2    0.000    0.000    0.000    0.000 utils.py:187(disable_on_exception)\n",
      "        1    0.000    0.000    0.000    0.000 inspect.py:2426(_descriptor_get)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:469(<dictcomp>)\n",
      "        3    0.000    0.000    0.000    0.000 scenario.py:49(get)\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:125(__eq__)\n",
      "        4    0.000    0.000    0.000    0.000 utils.py:222(__eq__)\n",
      "        2    0.000    0.000    0.000    0.000 base.py:86(get_track)\n",
      "        1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:1207(_handle_fromlist)\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method fromtimestamp}\n",
      "        3    0.000    0.000    0.000    0.000 base.py:812(<listcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:252(_is_utf)\n",
      "        3    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}\n",
      "        2    0.000    0.000    0.000    0.000 _weakrefset.py:21(__enter__)\n",
      "        1    0.000    0.000    0.000    0.000 sample.py:912(get_times)\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:156(__init__)\n",
      "        3    0.000    0.000    0.000    0.000 utils.py:152(wrapper_setattr)\n",
      "        1    0.000    0.000    0.000    0.000 _monitor.py:94(report)\n",
      "        2    0.000    0.000    0.000    0.000 std.py:1153(_comparable)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:821(close_pool)\n",
      "        3    0.000    0.000    0.000    0.000 std.py:226(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 function.py:577(<listcomp>)\n",
      "        2    0.000    0.000    0.000    0.000 _weakrefset.py:17(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 std.py:1157(__hash__)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:873(std_runner)\n",
      "        1    0.000    0.000    0.000    0.000 std.py:760(get_lock)\n",
      "        1    0.000    0.000    0.000    0.000 std.py:1147(__del__)\n",
      "        1    0.000    0.000    0.000    0.000 inspect.py:505(isbuiltin)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method _weakref.proxy}\n",
      "        2    0.000    0.000    0.000    0.000 {method 'pop' of 'list' objects}\n",
      "        1    0.000    0.000    0.000    0.000 {method 'encode' of 'str' objects}\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method fromkeys}\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:139(__getattr__)\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:282(_screen_shape_wrapper)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n",
      "        1    0.000    0.000    0.000    0.000 tz.py:74(utcoffset)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'difference' of 'set' objects}\n",
      "        1    0.000    0.000    0.000    0.000 fromnumeric.py:2172(_sum_dispatcher)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:690(close_pool)\n",
      "        1    0.000    0.000    0.000    0.000 std.py:1301(<lambda>)\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method sys.audit}\n",
      "\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "prof = cProfile.run('propagate.fault_sample(mdl, fs)', sort='cumtime')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T17:13:34.834427Z",
     "iopub.status.busy": "2025-03-12T17:13:34.834427Z",
     "iopub.status.idle": "2025-03-12T17:13:34.853466Z",
     "shell.execute_reply": "2025-03-12T17:13:34.853466Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         7137 function calls (7115 primitive calls) in 0.017 seconds\n",
      "\n",
      "   Ordered by: internal time\n",
      "\n",
      "   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n",
      "       16    0.002    0.000    0.002    0.000 {built-in method builtins.dir}\n",
      "       20    0.001    0.000    0.006    0.000 base.py:358(init_roles)\n",
      "       11    0.001    0.000    0.001    0.000 base.py:457(<listcomp>)\n",
      "     2108    0.001    0.000    0.001    0.000 {method 'startswith' of 'str' objects}\n",
      "        5    0.001    0.000    0.001    0.000 base.py:65(<listcomp>)\n",
      "      611    0.000    0.000    0.001    0.000 {built-in method builtins.getattr}\n",
      "       10    0.000    0.000    0.001    0.000 inspect.py:2331(_signature_from_function)\n",
      "      808    0.000    0.000    0.000    0.000 {built-in method builtins.isinstance}\n",
      "       16    0.000    0.000    0.001    0.000 base.py:629(get_roles_as_dict)\n",
      "       16    0.000    0.000    0.000    0.000 {built-in method numpy.arange}\n",
      "    20/10    0.000    0.000    0.002    0.000 inspect.py:2435(_signature_from_callable)\n",
      "       16    0.000    0.000    0.001    0.000 base.py:339(gen_timerange)\n",
      "        8    0.000    0.000    0.003    0.000 parameter.py:62(__init__)\n",
      "       42    0.000    0.000    0.000    0.000 inspect.py:2669(__init__)\n",
      "        9    0.000    0.000    0.013    0.001 base.py:281(add_flex_role_obj)\n",
      "       16    0.000    0.000    0.000    0.000 {method 'round' of 'numpy.ndarray' objects}\n",
      "       20    0.000    0.000    0.000    0.000 inspect.py:2955(__init__)\n",
      "        8    0.000    0.000    0.000    0.000 parameter.py:136(check_immutable)\n",
      "    21/16    0.000    0.000    0.001    0.000 result.py:605(flatten)\n",
      "        8    0.000    0.000    0.000    0.000 base.py:142(set_arg_type)\n",
      "        5    0.000    0.000    0.009    0.002 base.py:825(__init__)\n",
      "       12    0.000    0.000    0.001    0.000 time.py:137(set_timestep)\n",
      "       12    0.000    0.000    0.000    0.000 {method 'copy' of 'numpy.ndarray' objects}\n",
      "        8    0.000    0.000    0.000    0.000 inspect.py:3215(__str__)\n",
      "        6    0.000    0.000    0.001    0.000 base.py:102(find_any_phase_overlap)\n",
      "       15    0.000    0.000    0.002    0.000 base.py:788(create_hist)\n",
      "      157    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}\n",
      "    11/10    0.000    0.000    0.008    0.001 base.py:213(__init__)\n",
      "       34    0.000    0.000    0.001    0.000 result.py:184(__init__)\n",
      "        8    0.000    0.000    0.000    0.000 parameter.py:157(check_type)\n",
      "       19    0.000    0.000    0.001    0.000 base.py:630(get_sims)\n",
      "      288    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}\n",
      "       60    0.000    0.000    0.000    0.000 parameter.py:108(check_lim)\n",
      "       34    0.000    0.000    0.000    0.000 __init__.py:1111(__init__)\n",
      "       32    0.000    0.000    0.000    0.000 base.py:665(<dictcomp>)\n",
      "    16/15    0.000    0.000    0.006    0.000 base.py:328(init_roletypes)\n",
      "       10    0.000    0.000    0.000    0.000 inspect.py:2037(_signature_bound_method)\n",
      "       34    0.000    0.000    0.000    0.000 <frozen _collections_abc>:941(update)\n",
      "       12    0.000    0.000    0.000    0.000 base.py:186(get_field_dict)\n",
      "        5    0.000    0.000    0.010    0.002 base.py:370(add_sim)\n",
      "       12    0.000    0.000    0.000    0.000 base.py:247(assign)\n",
      "       26    0.000    0.000    0.000    0.000 inspect.py:2756(__str__)\n",
      "       32    0.000    0.000    0.000    0.000 common.py:49(get_sub_include)\n",
      "        9    0.000    0.000    0.010    0.001 base.py:1161(init_obj)\n",
      "       42    0.000    0.000    0.000    0.000 enum.py:688(__call__)\n",
      "       22    0.000    0.000    0.000    0.000 base.py:519(get_default_roletypes)\n",
      "        6    0.000    0.000    0.003    0.001 base.py:91(__init__)\n",
      "       14    0.000    0.000    0.000    0.000 numerictypes.py:357(issubdtype)\n",
      "       16    0.000    0.000    0.000    0.000 base.py:634(<dictcomp>)\n",
      "      261    0.000    0.000    0.000    0.000 {built-in method builtins.len}\n",
      "       31    0.000    0.000    0.000    0.000 base.py:664(<dictcomp>)\n",
      "        1    0.000    0.000    0.017    0.017 base.py:101(__init__)\n",
      "       52    0.000    0.000    0.000    0.000 inspect.py:3002(<genexpr>)\n",
      "       34    0.000    0.000    0.000    0.000 result.py:372(__setattr__)\n",
      "       16    0.000    0.000    0.000    0.000 time.py:115(__getattr__)\n",
      "       12    0.000    0.000    0.000    0.000 {built-in method numpy.asanyarray}\n",
      "       12    0.000    0.000    0.000    0.000 base.py:284(set_field)\n",
      "        8    0.000    0.000    0.002    0.000 parameter.py:180(check_pickle)\n",
      "       34    0.000    0.000    0.000    0.000 inspect.py:300(ismethod)\n",
      "      141    0.000    0.000    0.000    0.000 {method 'items' of 'dict' objects}\n",
      "       10    0.000    0.000    0.000    0.000 inspect.py:167(get_annotations)\n",
      "     11/6    0.000    0.000    0.001    0.000 base.py:241(update_seed)\n",
      "       12    0.000    0.000    0.000    0.000 copy.py:128(deepcopy)\n",
      "       12    0.000    0.000    0.000    0.000 fromnumeric.py:865(sort)\n",
      "       14    0.000    0.000    0.000    0.000 base.py:216(is_numeric)\n",
      "       11    0.000    0.000    0.002    0.000 base.py:455(init_indicators)\n",
      "        6    0.000    0.000    0.000    0.000 base.py:585(<listcomp>)\n",
      "       54    0.000    0.000    0.000    0.000 inspect.py:378(isfunction)\n",
      "       11    0.000    0.000    0.000    0.000 base.py:301(init_track)\n",
      "       10    0.000    0.000    0.000    0.000 inspect.py:735(unwrap)\n",
      "       28    0.000    0.000    0.000    0.000 numerictypes.py:283(issubclass_)\n",
      "        1    0.000    0.000    0.017    0.017 {built-in method builtins.exec}\n",
      "       16    0.000    0.000    0.000    0.000 fromnumeric.py:53(_wrapfunc)\n",
      "       16    0.000    0.000    0.000    0.000 fromnumeric.py:3269(round)\n",
      "       14    0.000    0.000    0.000    0.000 {built-in method numpy.array}\n",
      "        6    0.000    0.000    0.000    0.000 time.py:95(__init__)\n",
      "       43    0.000    0.000    0.000    0.000 <frozen abc>:117(__instancecheck__)\n",
      "        1    0.000    0.000    0.002    0.002 base.py:410(build)\n",
      "        5    0.000    0.000    0.009    0.002 function.py:81(__init__)\n",
      "       68    0.000    0.000    0.000    0.000 {built-in method builtins.issubclass}\n",
      "        6    0.000    0.000    0.000    0.000 base.py:115(get_true_fields)\n",
      "        1    0.000    0.000    0.017    0.017 <string>:1(<module>)\n",
      "        6    0.000    0.000    0.000    0.000 mode.py:209(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 graph.py:975(add_edges_from)\n",
      "       16    0.000    0.000    0.001    0.000 base.py:131(get_histrange)\n",
      "       43    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}\n",
      "        6    0.000    0.000    0.008    0.001 base.py:195(__init__)\n",
      "       21    0.000    0.000    0.000    0.000 result.py:114(check_include_errors)\n",
      "       48    0.000    0.000    0.000    0.000 {built-in method builtins.setattr}\n",
      "       10    0.000    0.000    0.002    0.000 inspect.py:3007(from_callable)\n",
      "       10    0.000    0.000    0.000    0.000 {built-in method recordclass._dataobject.asdict}\n",
      "        4    0.000    0.000    0.000    0.000 history.py:132(init_att)\n",
      "       60    0.000    0.000    0.000    0.000 base.py:176(set_arg_as_type)\n",
      "        6    0.000    0.000    0.001    0.000 base.py:225(init_hist)\n",
      "       16    0.000    0.000    0.001    0.000 base.py:116(get_timerange)\n",
      "       10    0.000    0.000    0.000    0.000 inspect.py:3023(replace)\n",
      "        5    0.000    0.000    0.001    0.000 base.py:867(create_arch_kwargs)\n",
      "       99    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}\n",
      "       10    0.000    0.000    0.000    0.000 __init__.py:180(add)\n",
      "       12    0.000    0.000    0.000    0.000 {method 'sort' of 'numpy.ndarray' objects}\n",
      "        6    0.000    0.000    0.000    0.000 base.py:558(get_roles)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:216(is_dynamic)\n",
      "      104    0.000    0.000    0.000    0.000 inspect.py:2734(kind)\n",
      "       12    0.000    0.000    0.000    0.000 base.py:240(<dictcomp>)\n",
      "       12    0.000    0.000    0.000    0.000 copy.py:66(copy)\n",
      "       26    0.000    0.000    0.000    0.000 base.py:68(check_role)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:887(check_flows)\n",
      "       58    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}\n",
      "        9    0.000    0.000    0.000    0.000 base.py:254(get_flex_role_kwargs)\n",
      "       42    0.000    0.000    0.000    0.000 enum.py:1095(__new__)\n",
      "       21    0.000    0.000    0.000    0.000 result.py:341(items)\n",
      "        5    0.000    0.000    0.010    0.002 function.py:490(add_fxn)\n",
      "       74    0.000    0.000    0.000    0.000 inspect.py:2722(name)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:907(<listcomp>)\n",
      "        2    0.000    0.000    0.000    0.000 graph.py:573(add_nodes_from)\n",
      "       10    0.000    0.000    0.002    0.000 inspect.py:3261(signature)\n",
      "        3    0.000    0.000    0.000    0.000 base.py:487(init_indicator_hist)\n",
      "        6    0.000    0.000    0.000    0.000 base.py:122(<listcomp>)\n",
      "       10    0.000    0.000    0.000    0.000 base.py:163(get_sub_kwargs)\n",
      "       21    0.000    0.000    0.000    0.000 __init__.py:1118(__len__)\n",
      "       18    0.000    0.000    0.000    0.000 {method 'format' of 'str' objects}\n",
      "        1    0.000    0.000    0.000    0.000 base.py:447(construct_graph)\n",
      "       16    0.000    0.000    0.000    0.000 base.py:295(check_slots)\n",
      "        1    0.000    0.000    0.013    0.013 ex_pump.py:462(init_architecture)\n",
      "        6    0.000    0.000    0.000    0.000 base.py:107(<listcomp>)\n",
      "        6    0.000    0.000    0.000    0.000 base.py:221(set_time)\n",
      "        5    0.000    0.000    0.001    0.000 base.py:348(find_roletype_initiators)\n",
      "        4    0.000    0.000    0.002    0.001 base.py:330(add_flow)\n",
      "       42    0.000    0.000    0.000    0.000 {method '__contains__' of 'frozenset' objects}\n",
      "       19    0.000    0.000    0.000    0.000 __init__.py:1128(__setitem__)\n",
      "       42    0.000    0.000    0.000    0.000 {method 'isidentifier' of 'str' objects}\n",
      "        2    0.000    0.000    0.000    0.000 base.py:378(create_hist)\n",
      "        6    0.000    0.000    0.000    0.000 base.py:104(<dictcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 functools.py:981(__get__)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:531(get_flows)\n",
      "        5    0.000    0.000    0.000    0.000 __init__.py:201(update)\n",
      "        5    0.000    0.000    0.001    0.000 base.py:63(find_roletype_initiators)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:840(<dictcomp>)\n",
      "       10    0.000    0.000    0.000    0.000 base.py:430(asdict)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:443(<listcomp>)\n",
      "        4    0.000    0.000    0.001    0.000 base.py:85(create_hist)\n",
      "       21    0.000    0.000    0.000    0.000 result.py:123(check_include_error)\n",
      "       10    0.000    0.000    0.000    0.000 reportviews.py:531(__iter__)\n",
      "       18    0.000    0.000    0.000    0.000 {method 'values' of 'mappingproxy' objects}\n",
      "        2    0.000    0.000    0.000    0.000 base.py:365(init_hist_att)\n",
      "        6    0.000    0.000    0.000    0.000 base.py:106(<listcomp>)\n",
      "        4    0.000    0.000    0.000    0.000 base.py:444(<listcomp>)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:902(<listcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 graph.py:339(__init__)\n",
      "        9    0.000    0.000    0.000    0.000 inspect.py:292(isclass)\n",
      "        2    0.000    0.000    0.000    0.000 base.py:431(<dictcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 isolate.py:43(isolates)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:874(<dictcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:437(<listcomp>)\n",
      "       11    0.000    0.000    0.000    0.000 base.py:279(create_name)\n",
      "       16    0.000    0.000    0.000    0.000 fromnumeric.py:3265(_round_dispatcher)\n",
      "       23    0.000    0.000    0.000    0.000 {method 'values' of 'dict' objects}\n",
      "       16    0.000    0.000    0.000    0.000 {method 'remove' of 'list' objects}\n",
      "       30    0.000    0.000    0.000    0.000 {built-in method builtins.callable}\n",
      "        1    0.000    0.000    0.000    0.000 isolate.py:86(<genexpr>)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:848(<dictcomp>)\n",
      "        2    0.000    0.000    0.000    0.000 state.py:345(init_hist_att)\n",
      "       22    0.000    0.000    0.000    0.000 {built-in method builtins.id}\n",
      "        1    0.000    0.000    0.000    0.000 base.py:439(<listcomp>)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:536(<dictcomp>)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:210(is_static)\n",
      "        3    0.000    0.000    0.000    0.000 __init__.py:65(__init__)\n",
      "        9    0.000    0.000    0.000    0.000 base.py:351(get_full_name)\n",
      "        1    0.000    0.000    0.002    0.002 function.py:510(build)\n",
      "       20    0.000    0.000    0.000    0.000 inspect.py:3015(parameters)\n",
      "        4    0.000    0.000    0.000    0.000 graph.py:1333(neighbors)\n",
      "        4    0.000    0.000    0.000    0.000 {built-in method numpy.empty}\n",
      "        2    0.000    0.000    0.000    0.000 <frozen _collections_abc>:717(__ior__)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:232(init_flexible_roles)\n",
      "        1    0.000    0.000    0.000    0.000 <class 'networkx.utils.decorators.argmap'> compilation 4:1(argmap_isolates_1)\n",
      "        8    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}\n",
      "        1    0.000    0.000    0.000    0.000 base.py:235(init_time_hist)\n",
      "        1    0.000    0.000    0.000    0.000 reportviews.py:421(__init__)\n",
      "        3    0.000    0.000    0.000    0.000 base.py:812(<listcomp>)\n",
      "       12    0.000    0.000    0.000    0.000 fromnumeric.py:861(_sort_dispatcher)\n",
      "        2    0.000    0.000    0.000    0.000 base.py:86(get_track)\n",
      "        1    0.000    0.000    0.000    0.000 graph.py:1499(degree)\n",
      "        1    0.000    0.000    0.000    0.000 backends.py:525(_call_if_no_backends_installed)\n",
      "        8    0.000    0.000    0.000    0.000 base.py:57(check_role)\n",
      "        9    0.000    0.000    0.000    0.000 {built-in method builtins.any}\n",
      "        1    0.000    0.000    0.000    0.000 base.py:469(<dictcomp>)\n",
      "       12    0.000    0.000    0.000    0.000 copy.py:182(_deepcopy_atomic)\n",
      "       10    0.000    0.000    0.000    0.000 {built-in method sys.getrecursionlimit}\n",
      "        3    0.000    0.000    0.000    0.000 misc.py:593(_clear_cache)\n",
      "        1    0.000    0.000    0.000    0.000 graph.py:38(__set__)\n",
      "       10    0.000    0.000    0.000    0.000 {built-in method builtins.repr}\n",
      "        8    0.000    0.000    0.000    0.000 __init__.py:165(__contains__)\n",
      "        8    0.000    0.000    0.000    0.000 inspect.py:3019(return_annotation)\n",
      "        6    0.000    0.000    0.000    0.000 {method 'copy' of 'set' objects}\n",
      "        1    0.000    0.000    0.000    0.000 graph.py:63(__set__)\n",
      "        1    0.000    0.000    0.000    0.000 timer.py:62(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:460(get_indicators)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:863(init_block)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:455(<listcomp>)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:219(<listcomp>)\n",
      "        6    0.000    0.000    0.000    0.000 inspect.py:2726(default)\n",
      "        6    0.000    0.000    0.000    0.000 copy.py:107(_copy_immutable)\n",
      "        2    0.000    0.000    0.000    0.000 __init__.py:1121(__getitem__)\n",
      "        4    0.000    0.000    0.000    0.000 {built-in method builtins.iter}\n",
      "        1    0.000    0.000    0.000    0.000 reportviews.py:428(__call__)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:111(<dictcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n",
      "        1    0.000    0.000    0.000    0.000 {method '__exit__' of '_thread.RLock' objects}\n",
      "        1    0.000    0.000    0.000    0.000 __init__.py:1138(__contains__)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'lower' of 'str' objects}\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "prof = cProfile.run('Pump()', sort='tottime')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown, running this model is not particularly computationally expensive. As a result, the majority of the computational expense is not actually because of the simulation itself, but because of the way the model is simulated:\n",
    "- the majority is spent simulating the model\n",
    "- a certain amount is spent re-initalizing the model at first so that the model object can be re-used without worrying about it being modified by any previous executions \n",
    "- another amount is spent recording the model history, wich can increase or decrease depending on tracking options (note the low number of values tracked in the pump model by default)\n",
    "\n",
    "\n",
    "\n",
    "This is mostly because the model itself is computationally inexpensive. However, this example shows how one might easily speed up simulation for optimization or large-n simulations--avoiding unnecessary re-initialization, tracking fewer model states, or speeding up model execution. This can be done in the following ways:\n",
    "- using the options for `track` (as mentioned above) to track fewer states (reducing time spent recording the history)\n",
    "- using `protect` options, which specifies whether the model used is re-instantiated for the simulation (`True`) or used directly (`False`)\n",
    "- speeding up the model by using `dynamic_behavior()` methods instead of `static_behavior()` or `behavior()` methods (which can halve the simulation time at the expense of undirected propagation)\n",
    "- speeding up the model by using a longer global timestep (`'tstep'` in `modelparams`) or by speeding up paricularly expensive Function dynamic behaviors by setting (`dt=local_tstep`) in the `SimParam`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "fmdtools-dev",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
