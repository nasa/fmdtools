{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using Parallel Computing in fmdtools\n",
    "\n",
    "This notebook will discuss how to use parallel programming in fmdtools, including:\n",
    "- how to set up a model for parallelism\n",
    "- syntax for using parallelism in simulation functions\n",
    "- considerations for optimizing computational performance in a model\n",
    "\n",
    "```\n",
    "Copyright © 2024, United States Government, as represented by the Administrator of the National Aeronautics and Space Administration. All rights reserved.\n",
    "\n",
    "The “\"Fault Model Design tools - fmdtools version 2\"” software is licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0. \n",
    "\n",
    "Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:08:27.398760Z",
     "iopub.status.busy": "2024-08-22T16:08:27.398760Z",
     "iopub.status.idle": "2024-08-22T16:08:28.812329Z",
     "shell.execute_reply": "2024-08-22T16:08:28.812329Z"
    }
   },
   "outputs": [],
   "source": [
    "from ex_pump import * \n",
    "from fmdtools.sim.sample import FaultDomain, FaultSample\n",
    "import fmdtools.sim.propagate as propagate\n",
    "import fmdtools.analyze as an"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This notebook uses the pump example (see `ex_pump.py`) to illustrate the use of parallelism in fmdtools. This is fairly simple model, and thus it should be noted that there may be considerations with more complex models which may not be adequately covered here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:08:28.812329Z",
     "iopub.status.busy": "2024-08-22T16:08:28.812329Z",
     "iopub.status.idle": "2024-08-22T16:08:28.823012Z",
     "shell.execute_reply": "2024-08-22T16:08:28.823012Z"
    }
   },
   "outputs": [],
   "source": [
    "mdl = Pump()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:08:28.824514Z",
     "iopub.status.busy": "2024-08-22T16:08:28.824514Z",
     "iopub.status.idle": "2024-08-22T16:08:28.892112Z",
     "shell.execute_reply": "2024-08-22T16:08:28.892112Z"
    }
   },
   "outputs": [],
   "source": [
    "result, mdlhist = propagate.nominal(mdl, desired_result='graph')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:08:28.892112Z",
     "iopub.status.busy": "2024-08-22T16:08:28.892112Z",
     "iopub.status.idle": "2024-08-22T16:08:29.152519Z",
     "shell.execute_reply": "2024-08-22T16:08:29.152519Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABDoAAAMWCAYAAAAQ5OZ6AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjkuMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy80BEi2AAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzde1yO9/8H8Nfdwd0R5SxUkg5KjiGVbM6bw2ZOmxFrvsYYvsxkKIeUU6GaQ5vSZjYZQqasIqcJk2M5lnNOnaiUun5/9Ov6dq+iqK66ez0fjx677s99XZ/P+7rvtHrf78/nIxMEQQARERERERERkRJQkToAIiIiIiIiIqKKwkQHERERERERESkNJjqIiIiIiIiISGkw0UFERERERERESoOJDiIiIiIiIiJSGkx0EBEREREREZHSYKKDiIiIiIiIiJQGEx1EREREREREpDSY6CAiIiIiIiIipcFEBxEREREREREpDSY6iIiIiIiIiEhpMNFBREREREREREqDiQ4iIiIiIiIiUhpMdBARERERERGR0mCig4iIiIiIiIiUBhMdRERERERERKQ0mOggIiIiIiIiIqXBRAcRERERERERKQ0mOoiIiIiIiIhIaTDRQURERERERERKg4kOIiIiIiIiIlIaTHQQERERERERkdJgooOIiIiIiIiIlAYTHURERERERESkNJjoICIiIiIiIiKlwUQHERERERERESkNJjqIiIiIiIiISGkw0UFERERERERESoOJDiIiIiIiIiJSGkx0EBEREREREZHSYKKDiIiIiIiIiJQGEx1EREREREREpDSY6CAiIiIiIiIipcFEBxEREREREREpDSY6iIiIiIiIiEhpMNFBREREREREREqDiQ4iIiIiIiIiUhpMdBARERERERGR0mCig4iIiIiIiIiUBhMdRERERERERKQ0mOggIiIiIiIiIqXBRAcRERERERERKQ0mOoiIiIiIiIhIaTDRQURERERERERKg4kOIiIiIiIiIlIaTHQQERERERERkdJgooOIiIiIiIiIlAYTHURERERERESkNJjoICIiIiIiIiKlwUQHERERERERESkNJjqIiIiIiIiISGkw0UFERERERERESoOJDiIiIiIiIiJSGkx0EBEREREREZHSYKKDiIiIiIiIiJQGEx1EREREREREpDSY6CAiIiIiIiIipcFEBxER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/vw5zM3N0blzZ+zZs0fqcIiIiEgJcOoKERERSUZHRwfe3t4IDQ3Fvn37pA6HiIiIlAArOoiIiEhSgiCgf//+uH79Oi5dugRNTU2pQyIiIqIajBUdREREJKnChUnv3r0LLy8vqcMhIiKiGo6JDiIiIpJc27ZtMWfOHHh6euLGjRtSh0NEREQ1GKeuEBERUbWQmZkJCwsLtGvXDvv374dMJpM6JCIiIqqBWNFBRERE1YKWlhbWrl2LAwcOcAcWIiIiemus6CAiIqJqQxAEfPjhh7h48SIuX74MbW1tqUMiIiKiGoYVHURERFRtyGQyrFu3DsnJyfDw8JA6HCIiIqqBmOggIiKiasXExATfffcdVq5ciYSEBKnDISIiohqGU1eIiIio2snKyoKVlRVat26N8PBwLkxKREREZcaKDiIiIqp2NDU1sW7dOhw6dAghISFSh0NEREQ1CCs6iIiIqNoaNmwYTp8+jStXrkBXV1fqcIiIiKgGYEUHERERVVs+Pj549uwZlixZInUoREREVEMw0UFERETVlpGREebPnw9vb29cunRJ6nCIiIioBuDUFSIiIqrWXr58CWtrazRv3hxRUVFcmJSIiIheixUdREREVK3J5XL4+vri8OHD+PXXX6UOh4iIiKo5VnQQERFRjTBixAgcPXoU8fHxqFevntThEBERUTXFig4iIiKqEby9vZGRkQE3NzepQyEiIqJqjIkOIiIiqhFatGiBhQsXYv369Th//rzU4RAREVE1xakrREREVGPk5OSgQ4cO0NfXx5EjR6Ciws9siIiISBF/OyAiIqIao06dOvDz88OxY8cQHBwsdThERERUDbGig4iIiGqcTz/9FIcOHUJCQgL09PSkDoeIiIiqEVZ0EBERUY2zatUqZGdnY8GCBVKHQkRERNUMEx1ERERU4zRv3hzu7u744YcfcPbsWanDISIiomqEU1eIiIioRnr16hU6deoELS0tHD9+nAuTEhEREQBWdBAREVENpaamBj8/P/z999/46aefpA6HiIiIqglWdBAREVGNNn78eOzfvx8JCQlo0KCB1OEQERGRxFjRQURERDXaihUr8OrVK7i6ukodChEREVUDTHQQERFRjdakSRMsXboUmzdvxqlTp6QOh4iIiCTGqStERERU4+Xl5aFr165QUVHB33//DVVVValDIiIiIomwooOIiIhq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i1atWuHrr78GPxMiIiKqWZjoICKqYurq6mU+V1NTE4MHD0avXr3EtgEDBmDw4MGVOi5RbaehoYH169fjr7/+wu+//y51OERERFQOTHQQEVUxDQ0NScbV1NSUZFyimmrgwIH46KOPMGvWLHG6GBEREVV/THQQEVUxqRIOUiVYiGoyb29vpKSkwN3dXepQiIiIqIyY6CAiqmJ169atVeMS1WSGhoZYsGABfHx8cPHiRanDISIiojJgooOIqIppaGhAS0urSsfU0tJiRQfRW5o1axZMTEwwdepULkxKRERUAzDRQUQkAX19faUej0iZyOVy+Pn54ciRI/jll1+kDoeIiIjegIkOIiIJ1KtXr8qqOq5evQovLy/s27cPz549q5IxiZRNnz59MHLkSMyePRtpaWlSh0NERESvwUQHEZEEZDIZDAwMIJPJKnWczMxMfPPNN1i1ahUGDx6MBg0aoG3btvjyyy8RHByM3NzcSh2fSJmsXr0az58/x8KFC6UOhYiIiF6DiQ4iIonI5XI0b968UsdYvnw57t69i1evXolt165dw08//YRx48Zh//79lTo+kTJp0aIF3Nzc4Ovri3PnzkkdDhEREZWCiQ4iIgnp6emhadOmldL3/v37sW/fvhKfk8lk6NOnDz788MNKGZtIWX3zzTcwNzfH1KlTkZ+fL3U4REREVAImOoiIJHb58mWsW7cOWVlZFdJf4bSY7t27K1RyFFJVVYWRkRF27NgBNTW1ChmTqLZQV1eHn58fjh8/jqCgIKnDISIiohIw0UFEJJGUlBS4uLigV69e+PHHHzF8+HCcOXPmnfrU0tJCmzZtoKenB0dHR1hbW0NFRfFHfX5+PtatW4f69eu/01hEtZWTkxM+++wzfPvtt0hJSZE6HCIiIvoXJjqIiKqYIAj47bffYGpqisDAQAAFyYc7d+7AxcUFYWFh4o4s+fn5SElJQXp6unh9WlpasT+utLS00KJFCxgbG0MulwMoqOyYM2eOQnm9iooKjIyMMHr06FKntRDRm61cuRI5OTmYP3++1KEQERHRvzDRQURUhdLS0jBo0CCMHj0az549Q15ensLzMpkMT548QevWrVG3bl08fPgQjo6OcHZ2Fs8ZOHAgHB0dAfyvgqN169aoX79+sV1cRo0ahUaNGomP165di/Pnz+P999/HkCFDsHLlSgiCUHk3TKSk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wMjICG3btoVcLkfDhg3zfdHj33//hVwuR2RkJFatWoXevXt/1/1fvHiBypUro1mzZtiyZUsupSQi+j4sdBARERER/SRBEPD3338jICAACoUCt27dQvHixcWiR6NGjaCqqip1zM9KS0vD0KFDsWbNGowcORLz58//rgLNhg0b0KtXLxw9ehSNGjXKxaRERNnDQgcRERERUQ4SBAHnzp0TZ3rcvHkThoaGYtGjcePG+a7oIQgCfH19MXz4cDRt2hTbt29HsWLFsnXfjIwMODk54cWLFzh//jzU1NRyOS39X3t3Hh7j1bgP/J7JMlllX2SdIEKILaglglejRW21lFISUrXUUqqKqqUtqta+lNo1qora3lJr5Cuo11IittqykEgs2ci+nN8f+c3zZpoZsskkcX+uy5VnTs6c5zyTMZm5cxYiejEGHUREREREr4gQApcvX5ZCjzt37sDKygp9+vTBgAED0KVLlyoVDBw7dgwDBgyAo6Mj9u/fD09PzxLd7/Lly/D19cXChQsxderUV9xLIqIXY9BBRERERFQJhBCIiIiQprfcunULlpaW6N27NwYMGICAgIAqEXrcunULvXr1wqNHj7Bz50506dKlRPebOHEiNmzYgJs3b8LFxeUV95KISDsGHURERERElUwIgcjISGmkx99//w0LCwu10EOhUOisfykpKRg0aBCOHTuG77//HmPHjn3pfVJTU+Hl5QV/f3/s2LGjEnpJRKQZgw4iIiIiIh0SQuDatWtS6HHjxg3UqlULvXr1woABA9C1a1cYGRlVer/y8vIwdepULF++HGPGjMGKFSteurbI1q1b8cEHH+Dw4cPo2rVrJfWUiEgdgw4iIiIioirk2rVr0vSWa9euwdzcHL169UL//v3x9ttvV3rosX79eowdOxZ+fn7YuXMnbGxstNYVQqBTp05ISEjAlStXdDoqhYheX3Jdd4CIiIiIiP6nUaNGmD17Nq5evYrr16/j008/RUREBPr27Qs7Ozu8//772LNnDzIzM5GTk4NZs2ahbt26MDAwgEwmQ58+fSq0P8HBwTh27BgiIyPxxhtv4MaNG1rrymQyrFq1Cnfv3sWSJUsqtB9ERCXFER1ERERERNXAzZs3pZEeV65cgZmZGerUqYMrV66o1evduzf27t1b4eePiopCr169EBsbi+3bt6Nbt264du0awsLCkJ2d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EPDS86xfvx7jx4/HJ598gpycHMyePRvjx4/H4MGDcfz4cYSEhEBfXx8NGjTAjh070K9fv3JfG1FVJBMVMQyBAABCCKSmpiIpKQmffPIJzp07hx07dkBPT096gUxNTUVBQQH8/f0xaNAgzJw5EyYmJrC2toaFhQUXHiUiIiKi11ZgYCBCQ0Px119/QV9fH5aWljrry9KlS/Hs2TMYGxuje/fulX7+gwcPIjMzE+bm5pg8eXKlnz8/Px/Jyck4ffo0+vTpg507d6J///6V3g+isuCIjgokk8lgaWkJS0tL1KpVCwkJCfD394enpyd2794NAOjWrZu0uJCJiQnq1asHIyMjXXabiIiIiKjKuH//Puzs7NCoUSNcvXpV192RRmLo4ry6FBkZiebNm+u0D0RlxREdr8j169cRHx8PoHBxpDZt2kAIgZMnTyI3NxdA4WJDFbG4ERERERFRTaDpPbSurFq1Ck+ePAEA5OXlvTR4MDIygoGBQYX3w9bWFuPGjavwdl/m+fPnOHv2rHS7SZMmsLe3r/R+EJUFgw4iIiIiIqJ/uH79Ok6cOIHs7GzcuXMHq1evfmH99957D61bt67QPigUCnTu3Bne3t4V2i5RTcegg4iIiIiI6AWSk5PVtnzVpFGjRqhdu3Yl9YiIXoRBBxERERERERHVGHJdd4CIiIiIiIiIqKIw6CAiIiIiIiKiGoNBBxERERERERHVGAw6iIiIiIiIiKjGYNBBRERERERERDUGgw4iIiIiIiIiqjEYdBARERERERFRjcGgg4iIiIiIiIhqDAYdRERERERERFRjMOggIiIiIiIiohqDQQcRERERERER1RgMOoiIiIiIiIioxmDQQUREREREREQ1BoMOIiIiIiIiIqoxGHQQERERERERUY3BoIOIiIiIiIiIagwGHURERERERERUYzDoICIiIiIiIqIag0EHEREREREREdUYDDqIiIiIiIiIqMZg0EFERERERERENQaDDiIiIiIiIiKqMRh0EBEREREREVGNwaCDiIiIiIiIiGoMBh1EREREREREVGMw6CAiIiIiIiKiGoNBBxERERERERHVGAw6iIiIiIiIiKjGYNBBRERERERERDUGgw4iIiIiIiIiqjEYdBARERERERFRjcGgg4iIiIiIiIhqDAYdRERERERERFRjMOggIiIiIiIiohqDQQcRERERERER1RgMOoiIiIiIiIioxmDQQUREREREREQ1BoMOIiIiIiIiIqoxGHQQERERERERUY3BoIOIiIiIiIiIagwGHURERERERERUYzDoICIiIiIiIqIag0EHEREREREREdUYDDqIiIiIiIiIqMZg0EFERERERERENQaDDiIiIiIiIiKqMRh0EBEREREREVGNwaCDiIiIiIiIiGoMBh1EREREREREVGMw6CAiIiIiIiKiGoNBBxERERERERHVGAw6iIiIiIiIiKjGYNBBRERERERERDUGgw4iIiIiIiIiqjEYdBARERERERFRjcGgg4iIiIiIiIhqDAYdRERERERERFRj/D94hZz60GRSzgAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 1200x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = result.graph.draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:08:29.152519Z",
     "iopub.status.busy": "2024-08-22T16:08:29.152519Z",
     "iopub.status.idle": "2024-08-22T16:08:29.300891Z",
     "shell.execute_reply": "2024-08-22T16:08:29.300891Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x200 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = mdlhist.plot_line('flows.ee_1.s.current', 'flows.wat_2.s.flowrate')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Checks\n",
    "\n",
    "Before attempting to leverage parallelism in model execution, it can be helpful to check whether a model is compatible with python parallel computing libraries. In order for a model to be parallelized, it must be compatible with [pickling](https://docs.python.org/3/library/pickle.html#:~:text=%E2%80%9CPickling%E2%80%9D%20is%20the%20process%20whereby,back%20into%20an%20object%20hierarchy.)--python's method of data serialization. This is used in parallel programming methods to copy the model from the main process thread to the seperate processes of the pool.\n",
    "\n",
    "fmdtools has two methods to check whether a model can be pickled, `check_pickleability` and `check_model_pickleability`. The main difference between these is that `check_pickleability` works for all objects (e.g. functions and flows), while `check_model_pickleability` gives more information for an overall model structure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:08:29.300891Z",
     "iopub.status.busy": "2024-08-22T16:08:29.300891Z",
     "iopub.status.idle": "2024-08-22T16:08:29.307168Z",
     "shell.execute_reply": "2024-08-22T16:08:29.307168Z"
    }
   },
   "outputs": [],
   "source": [
    "from fmdtools.define.object.base import check_pickleability\n",
    "from fmdtools.define.architecture.base import check_model_pickleability"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:08:29.307168Z",
     "iopub.status.busy": "2024-08-22T16:08:29.307168Z",
     "iopub.status.idle": "2024-08-22T16:08:29.314344Z",
     "shell.execute_reply": "2024-08-22T16:08:29.314344Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The object is pickleable\n"
     ]
    }
   ],
   "source": [
    "unpickleable_attributes = check_pickleability(mdl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:08:29.314344Z",
     "iopub.status.busy": "2024-08-22T16:08:29.314344Z",
     "iopub.status.idle": "2024-08-22T16:08:31.132769Z",
     "shell.execute_reply": "2024-08-22T16:08:31.132769Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FLOWS \n",
      "ee_1\n",
      "The object is pickleable\n",
      "sig_1\n",
      "The object is pickleable\n",
      "wat_1\n",
      "The object is pickleable\n",
      "wat_2\n",
      "The object is pickleable\n",
      "FUNCTIONS \n",
      "import_ee\n",
      "ee_out\n",
      "The object is pickleable\n",
      "import_water\n",
      "wat_out\n",
      "The object is pickleable\n",
      "import_signal\n",
      "sig_out\n",
      "The object is pickleable\n",
      "move_water\n",
      "ee_in\n",
      "sig_in\n",
      "wat_in\n",
      "wat_out\n",
      "The object is pickleable\n",
      "export_water\n",
      "wat_in\n",
      "The object is pickleable\n",
      "MODEL\n",
      "The object is pickleable\n"
     ]
    }
   ],
   "source": [
    "check_model_pickleability(mdl)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you can see, this model is pickleable. However, this may not be the case for all structures if they rely on unpickleable data structures, one common one being iterators like .values()."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using Parallelism in Simulation\n",
    "\n",
    "Parallelism generally requires using some external parallel processing toolkit. The syntax used by fmdtools methods is compatible with:\n",
    "- [multiprocessing](https://docs.python.org/3/library/multiprocessing.html), python's default parallel computing library\n",
    "- [multiprocess](https://pypi.org/project/multiprocess/), a fork of multiprocessing developed by The UQ Foundation\n",
    "- [pathos](https://github.com/uqfoundation/pathos), a broader parallel computing package developed by The UQ Foundation\n",
    "\n",
    "And any other package that emulates multiprocessing.Pool"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:08:31.132769Z",
     "iopub.status.busy": "2024-08-22T16:08:31.132769Z",
     "iopub.status.idle": "2024-08-22T16:08:31.156902Z",
     "shell.execute_reply": "2024-08-22T16:08:31.156902Z"
    }
   },
   "outputs": [],
   "source": [
    "import multiprocessing as mp\n",
    "import multiprocess as ms"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Parallelism can speed up simulation time when there is a large number of independent simulations to run. The prefered methods for using parallelism are to use a `NominalApproach` or `SampleApproach` with the methods:\n",
    "- propagate.singlefaults (for all single-fault scenarios in a static model with no approach)\n",
    "- propagate.approach (for sampling a set of faults)\n",
    "- propagate.nominal_approach (for simulating the model nominally over a set of parameters)\n",
    "- propagate.nested_approach (for sampling a set of faults over a set of model parameters)\n",
    "\n",
    "These methods can be run in parallel by sending them a `pool` object from one of these modules as the optional `pool` argument. Further details on setting up and running an approach are provided in `docs/Approach Use-Cases.ipynb` "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:08:31.156902Z",
     "iopub.status.busy": "2024-08-22T16:08:31.156902Z",
     "iopub.status.idle": "2024-08-22T16:08:33.806925Z",
     "shell.execute_reply": "2024-08-22T16:08:33.806800Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "SCENARIOS COMPLETE: 100%|██████████| 24/24 [00:01<00:00, 13.67it/s]\n"
     ]
    }
   ],
   "source": [
    "pool = mp.Pool(4)\n",
    "fd = FaultDomain(mdl)\n",
    "fd.add_all()\n",
    "fs = FaultSample(fd)\n",
    "fs.add_fault_phases()\n",
    "endclasses, mdlhists = propagate.fault_sample(mdl, fs, pool=pool)\n",
    "#an.tabulate.simplefmea(endclasses)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:08:33.806925Z",
     "iopub.status.busy": "2024-08-22T16:08:33.806925Z",
     "iopub.status.idle": "2024-08-22T16:08:33.813962Z",
     "shell.execute_reply": "2024-08-22T16:08:33.813962Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<multiprocessing.pool.Pool state=TERMINATE pool_size=4>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pool"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Sometimes, it helps to \"warm up\" the pool. See, for example, how much longer per-second iterations take for the above compared to below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:08:33.815115Z",
     "iopub.status.busy": "2024-08-22T16:08:33.815115Z",
     "iopub.status.idle": "2024-08-22T16:08:36.206633Z",
     "shell.execute_reply": "2024-08-22T16:08:36.206633Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "SCENARIOS COMPLETE: 100%|██████████| 8/8 [00:01<00:00,  5.08it/s]\n"
     ]
    }
   ],
   "source": [
    "pool = mp.Pool(4)\n",
    "endclasses, mdlhists = propagate.single_faults(mdl, pool=pool)\n",
    "#an.tabulate.simplefmea(endclasses)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It can also be helpful to verify that the results of parallel simulation and normal serial execution are the same:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:08:36.206633Z",
     "iopub.status.busy": "2024-08-22T16:08:36.206633Z",
     "iopub.status.idle": "2024-08-22T16:08:39.120754Z",
     "shell.execute_reply": "2024-08-22T16:08:39.120754Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "SCENARIOS COMPLETE: 100%|██████████| 8/8 [00:01<00:00,  5.09it/s]\n",
      "SCENARIOS COMPLETE: 100%|██████████| 8/8 [00:00<00:00, 36.04it/s]\n"
     ]
    }
   ],
   "source": [
    "pool = mp.Pool(4)\n",
    "endclasses_par, mdlhists = propagate.single_faults(mdl, pool=pool, close_pool=False)\n",
    "#tab_par = an.tabulate.simplefmea(endclasses_par)\n",
    "endclasses, mdlhists = propagate.single_faults(mdl)\n",
    "#tab = an.tabulate.simplefmea(endclasses)\n",
    "#tab - tab_par"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:08:39.120754Z",
     "iopub.status.busy": "2024-08-22T16:08:39.120754Z",
     "iopub.status.idle": "2024-08-22T16:08:41.111667Z",
     "shell.execute_reply": "2024-08-22T16:08:41.111667Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "SCENARIOS COMPLETE: 100%|██████████| 24/24 [00:00<00:00, 126.32it/s]\n",
      "SCENARIOS COMPLETE: 100%|██████████| 24/24 [00:00<00:00, 34.36it/s]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<multiprocessing.pool.Pool state=TERMINATE pool_size=4>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# pool = mp.Pool(4)\n",
    "endclasses_par, mdlhists = propagate.fault_sample(mdl, fs, pool=pool)\n",
    "#tab_par = an.tabulate.simplefmea(endclasses_par)\n",
    "endclasses, mdlhists = propagate.fault_sample(mdl, fs)\n",
    "#tab = an.tabulate.simplefmea(endclasses)\n",
    "#tab - tab_par\n",
    "pool"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "While fmdtools built-in methods are the easiest way to leverage parallelism, it can also be used with custom arguments/methods to meet the needs of simulation. However, (on Windows) these methods need to be defined in an external module with an \"if __name__=='__main__':\" statement, otherwise execution will hang from spawning new processes. This has to do with how multiprocessing works in windows."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To show how parellism can be leveraged manually for a desired use-case, below the model is run over the blockage fault mode at time t=1 with a different model parameter (delayed failure behavior), as defined in the `parallelism_methods.py` module in this folder."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:08:41.111667Z",
     "iopub.status.busy": "2024-08-22T16:08:41.111667Z",
     "iopub.status.idle": "2024-08-22T16:08:41.121141Z",
     "shell.execute_reply": "2024-08-22T16:08:41.121141Z"
    }
   },
   "outputs": [],
   "source": [
    "from parallelism_methods import delay_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:08:41.121141Z",
     "iopub.status.busy": "2024-08-22T16:08:41.121141Z",
     "iopub.status.idle": "2024-08-22T16:08:43.807747Z",
     "shell.execute_reply": "2024-08-22T16:08:43.807747Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[endclass.rate:                     1e-05\n",
       " endclass.cost:        20125.000000000007\n",
       " endclass.expected_cost: 20125.000000000007,\n",
       " endclass.rate:                     1e-05\n",
       " endclass.cost:        20102.500000000007\n",
       " endclass.expected_cost: 20102.500000000007,\n",
       " endclass.rate:                     1e-05\n",
       " endclass.cost:        20080.000000000007\n",
       " endclass.expected_cost: 20080.000000000007,\n",
       " endclass.rate:                     1e-05\n",
       " endclass.cost:        20057.500000000007\n",
       " endclass.expected_cost: 20057.500000000007,\n",
       " endclass.rate:                     1e-05\n",
       " endclass.cost:        20035.000000000007\n",
       " endclass.expected_cost: 20035.000000000007,\n",
       " endclass.rate:                     1e-05\n",
       " endclass.cost:        15023.750000000005\n",
       " endclass.expected_cost: 15023.750000000005,\n",
       " endclass.rate:                     1e-05\n",
       " endclass.cost:        15023.750000000005\n",
       " endclass.expected_cost: 15023.750000000005,\n",
       " endclass.rate:                     1e-05\n",
       " endclass.cost:        15023.750000000005\n",
       " endclass.expected_cost: 15023.750000000005,\n",
       " endclass.rate:                     1e-05\n",
       " endclass.cost:        15023.750000000005\n",
       " endclass.expected_cost: 15023.750000000005,\n",
       " endclass.rate:                     1e-05\n",
       " endclass.cost:        15023.750000000005\n",
       " endclass.expected_cost: 15023.750000000005]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = delay_test()\n",
    "results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this method, the model is run many times over a given fault with different delay parameters. It should be noted that this approach is not especially efficient, since the nominal scenario is simulated at each call of `propagate.one_fault()`. It is thus preferred to use the appropriate fault/parameter sampling approaches and propagate methods, since these methods only run the nominal simulation once for fault scenarios and can also use staged execution (copying the model at fault time for fault scenarios) to reduce the cost of each simulation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Performance Comparison\n",
    "\n",
    "Parallelism is often used in computation to speed up up a set of independent simulations. Conventionally, one might say it leads to a reduced computational cost of $t/n$, where t was the original time of the set of processes, and n is the number of cores.\n",
    "\n",
    "However, this computational performance increase is dependent on the implementation. In Python, there is some overhead from \n",
    "from communicating data structures in and out of parallel threads which can become a significant consideration when the data structures are large. Additionally, different Pools can execute more or less efficiently. Below these are each compared."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:08:43.807747Z",
     "iopub.status.busy": "2024-08-22T16:08:43.807747Z",
     "iopub.status.idle": "2024-08-22T16:08:43.814220Z",
     "shell.execute_reply": "2024-08-22T16:08:43.814220Z"
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from parallelism_methods import compare_pools, instantiate_pools, terminate_pools"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:08:43.814220Z",
     "iopub.status.busy": "2024-08-22T16:08:43.814220Z",
     "iopub.status.idle": "2024-08-22T16:08:43.880296Z",
     "shell.execute_reply": "2024-08-22T16:08:43.880296Z"
    }
   },
   "outputs": [],
   "source": [
    "cores=4\n",
    "pools = instantiate_pools(cores)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below is the baseline comparison, where the the following parameters characterize the sampling approach:\n",
    " - single faults: only the single-fault scenarios are considered\n",
    " - 3 points per phase: an evenly-spaced quadrature is sampled at each phase of operation (start, on, end) for the model\n",
    " - staged: the model is copied at each point in time where faults is injected during the model time to save computation\n",
    " - track: the entire model history is returned for each simulation\n",
    " \n",
    " This is typical for a small model like this where the per-model expense is low."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:08:43.880296Z",
     "iopub.status.busy": "2024-08-22T16:08:43.880296Z",
     "iopub.status.idle": "2024-08-22T16:08:53.662332Z",
     "shell.execute_reply": "2024-08-22T16:08:53.662332Z"
    }
   },
   "outputs": [],
   "source": [
    "mdl=Pump(track='all')\n",
    "fs = FaultSample(fd)\n",
    "fs.add_fault_phases(args = (3,))\n",
    "\n",
    "pools = instantiate_pools(5)\n",
    "_ = compare_pools(mdl, fs, pools, staged=True, verbose=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:08:53.662332Z",
     "iopub.status.busy": "2024-08-22T16:08:53.662332Z",
     "iopub.status.idle": "2024-08-22T16:08:58.651716Z",
     "shell.execute_reply": "2024-08-22T16:08:58.651716Z"
    }
   },
   "outputs": [],
   "source": [
    "exectimes = compare_pools(mdl, fs, pools, staged=True, verbose=False)\n",
    "exectimes_baseline = exectimes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:08:58.651716Z",
     "iopub.status.busy": "2024-08-22T16:08:58.651716Z",
     "iopub.status.idle": "2024-08-22T16:08:58.755985Z",
     "shell.execute_reply": "2024-08-22T16:08:58.755985Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 900x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(9, 3),)\n",
    "plt.bar(range(len(exectimes)), list(exectimes.values()), align='center')\n",
    "plt.xticks(range(len(exectimes)), list(exectimes.keys()))\n",
    "plt.title(\"Baseline Performance - Some faults, Staged, Normal Simulation, Full Model History\")\n",
    "plt.ylabel(\"Computational Time (s)\")\n",
    "plt.grid(axis='y')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown, in this situation, both the multiprocessing and threadpool pools give computational performance increases."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Comparison: No Histories\n",
    "\n",
    "In the below comparison, the same simulation approach is run, except without tracking a history of model states through the simulation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:08:58.755985Z",
     "iopub.status.busy": "2024-08-22T16:08:58.755985Z",
     "iopub.status.idle": "2024-08-22T16:09:02.712672Z",
     "shell.execute_reply": "2024-08-22T16:09:02.712672Z"
    }
   },
   "outputs": [],
   "source": [
    "mdl=Pump(track='none')\n",
    "exectimes = compare_pools(mdl, fs, pools, staged=True, verbose=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:09:02.712672Z",
     "iopub.status.busy": "2024-08-22T16:09:02.712672Z",
     "iopub.status.idle": "2024-08-22T16:09:02.876952Z",
     "shell.execute_reply": "2024-08-22T16:09:02.876952Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x2beb541d3d0>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 900x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(9, 3),)\n",
    "width = 0.8\n",
    "plt.bar(range(len(exectimes)), list(exectimes.values()), align='center', color=\"blue\", label=\"comparison\")\n",
    "plt.bar(range(len(exectimes_baseline)), list(exectimes_baseline.values()), align='center', color=\"gray\", alpha=0.5, label=\"baseline\")\n",
    "plt.xticks(range(len(exectimes)), list(exectimes.keys()))\n",
    "plt.title(\"Computational Performance - Many Faults, Staged, Normal Simulation, No Model History\")\n",
    "plt.ylabel(\"Computational Time (s)\")\n",
    "plt.grid(axis='y')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown, in this situation, the overall simulation expense decreases, even in the serial execution case.\n",
    "\n",
    "Additionally, the case for using a parallel processing pool increases somewhat. This is because passing the model history back to the main process is nearly comparable in time to simulation itself.\n",
    "\n",
    "As a result, removing it saves a large amount of computational time when using parallel processing."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Comparison: Many Faults\n",
    "\n",
    "In the below comparison, many faults are injected in the system to increase the number of scenarios (ostensibly making the case better for parallelism)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:09:02.876952Z",
     "iopub.status.busy": "2024-08-22T16:09:02.876952Z",
     "iopub.status.idle": "2024-08-22T16:09:12.566430Z",
     "shell.execute_reply": "2024-08-22T16:09:12.566430Z"
    }
   },
   "outputs": [],
   "source": [
    "fs_many = FaultSample(fd)\n",
    "fs_many.add_fault_phases(args = (7,))\n",
    "mdl=Pump(track='all')\n",
    "exectimes = compare_pools(mdl, fs_many, pools, staged=True, verbose=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:09:12.566430Z",
     "iopub.status.busy": "2024-08-22T16:09:12.566430Z",
     "iopub.status.idle": "2024-08-22T16:09:12.691423Z",
     "shell.execute_reply": "2024-08-22T16:09:12.691423Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x2beb5759b50>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 900x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(9, 3),)\n",
    "width = 0.8\n",
    "plt.bar(range(len(exectimes)), list(exectimes.values()), align='center', color=\"blue\", label=\"comparison\")\n",
    "plt.bar(range(len(exectimes_baseline)), list(exectimes_baseline.values()), align='center', color=\"gray\", alpha=0.8, label=\"baseline\")\n",
    "plt.xticks(range(len(exectimes)), list(exectimes.keys()))\n",
    "plt.title(\"Computational Performance - Many Faults, Staged, Normal Simulation, Full Model History\")\n",
    "plt.ylabel(\"Computational Time (s)\")\n",
    "plt.grid(axis='y')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown, increasing the number of joint-fault scenarios increases computational costs significantly--as would be expected.\n",
    "\n",
    "In this situation, multiprocessing performs comparatively better, but only slightly--instead of taking 1/4 the time, it only takes about 1/2 the time."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Comparison: Long simulation\n",
    "\n",
    "It may be of interest to simulate how the comparative performance changes for longer simulations. In this comparison, the simulation time is extended tenfold."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:09:12.691423Z",
     "iopub.status.busy": "2024-08-22T16:09:12.691423Z",
     "iopub.status.idle": "2024-08-22T16:09:17.729803Z",
     "shell.execute_reply": "2024-08-22T16:09:17.729803Z"
    }
   },
   "outputs": [],
   "source": [
    "mdl=Pump(sp=dict(times=(0,20, 500)), track='all')\n",
    "exectimes = compare_pools(mdl, fs, pools, staged=True, verbose=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:09:17.731349Z",
     "iopub.status.busy": "2024-08-22T16:09:17.731349Z",
     "iopub.status.idle": "2024-08-22T16:09:17.855547Z",
     "shell.execute_reply": "2024-08-22T16:09:17.855547Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x2beb7e19510>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 900x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(9, 3),)\n",
    "width = 0.8\n",
    "plt.bar(range(len(exectimes)), list(exectimes.values()), align='center', color=\"blue\", label=\"comparison\")\n",
    "plt.bar(range(len(exectimes_baseline)), list(exectimes_baseline.values()), align='center', color=\"gray\", alpha=0.8, label=\"baseline\")\n",
    "plt.xticks(range(len(exectimes)), list(exectimes.keys()))\n",
    "plt.title(\"Computational Performance - Normal Faults, Staged, Long Simulation, Full Model History\")\n",
    "plt.ylabel(\"Computational Time (s)\")\n",
    "plt.grid(axis='y')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown, the simulation time does increase significantly--about tenfold. In terms of comparative performance, pools other than multiprocessing now become competitive, though multiprocessing is still the fastest overall. \n",
    "\n",
    "This shows the main case for using parallesism--speeding up long simulations. Short simulations unfortunately require a significant amount of overhead due to copying in and out of the individual thread and we thus see less of a case for them there."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Comparison: Long Simulation No Tracking\n",
    "\n",
    "Finally, it may be interesting to see how performance is affected in long simulations when there is no tracking. This is because in these simulations, there should be very little overhead from creating the respective data structures, even when there is a long simulation. This comparison is shown below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:09:17.855547Z",
     "iopub.status.busy": "2024-08-22T16:09:17.855547Z",
     "iopub.status.idle": "2024-08-22T16:09:21.859720Z",
     "shell.execute_reply": "2024-08-22T16:09:21.859720Z"
    }
   },
   "outputs": [],
   "source": [
    "mdl=Pump(sp=dict(times=(0,20, 500)), track='none')\n",
    "exectimes = compare_pools(mdl, fs, pools, staged=True, verbose=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:09:21.859720Z",
     "iopub.status.busy": "2024-08-22T16:09:21.859720Z",
     "iopub.status.idle": "2024-08-22T16:09:21.984822Z",
     "shell.execute_reply": "2024-08-22T16:09:21.984822Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x2beb7e4a890>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 900x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(9, 3),)\n",
    "width = 0.8\n",
    "plt.bar(range(len(exectimes)), list(exectimes.values()), align='center', color=\"blue\", label=\"comparison\")\n",
    "plt.bar(range(len(exectimes_baseline)), list(exectimes_baseline.values()), align='center', color=\"gray\", alpha=0.8, label=\"baseline\")\n",
    "plt.xticks(range(len(exectimes)), list(exectimes.keys()))\n",
    "plt.title(\"Computational Performance - Normal Faults, Staged, Long Simulation, No Model History\")\n",
    "plt.ylabel(\"Computational Time (s)\")\n",
    "plt.grid(axis='y')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown, removing the tracking makes the long simulations much take less time than the short simulation!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Comparison: Long Simulation Only Necessary Tracking\n",
    "\n",
    "In practice, it can be necessary to track some states over time. Here we perform the same comparison using the 'valstates' option, which only tracks states which have been defined in the model to be necessary to track (using 'valparams')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:09:21.988401Z",
     "iopub.status.busy": "2024-08-22T16:09:21.984822Z",
     "iopub.status.idle": "2024-08-22T16:09:26.136688Z",
     "shell.execute_reply": "2024-08-22T16:09:26.136688Z"
    }
   },
   "outputs": [],
   "source": [
    "mdl=Pump(sp=dict(times=(0,20, 500))) # see default track for Pump\n",
    "exectimes = compare_pools(mdl, fs, pools, staged=True, verbose=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:09:26.136688Z",
     "iopub.status.busy": "2024-08-22T16:09:26.136688Z",
     "iopub.status.idle": "2024-08-22T16:09:26.261915Z",
     "shell.execute_reply": "2024-08-22T16:09:26.261915Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x2beb7e8d1d0>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 900x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(9, 3),)\n",
    "width = 0.8\n",
    "plt.bar(range(len(exectimes)), list(exectimes.values()), align='center', color=\"blue\", label=\"comparison\")\n",
    "plt.bar(range(len(exectimes_baseline)), list(exectimes_baseline.values()), align='center', color=\"gray\", alpha=0.8, label=\"baseline\")\n",
    "plt.xticks(range(len(exectimes)), list(exectimes.keys()))\n",
    "plt.title(\"Computational Performance - Normal Faults, Staged, Long Simulation, Only Necessary History\")\n",
    "plt.ylabel(\"Computational Time (s)\")\n",
    "plt.grid(axis='y')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown, only tracking a few variables results in similar computational time no tracking.\n",
    "\n",
    "This is because a major computational performance limitation in this model is not necessarily the model simulation itself, but the generation, update, and passing of the history. So it is often best to only track necessary parameters when possible, rather than the entire model history."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Comparison: Lower Tracking Time Resolution\n",
    "\n",
    "Finally, the number of recorded timesteps can be lowered to lower computational costs while still returning all relevant variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:09:26.261915Z",
     "iopub.status.busy": "2024-08-22T16:09:26.261915Z",
     "iopub.status.idle": "2024-08-22T16:09:31.288935Z",
     "shell.execute_reply": "2024-08-22T16:09:31.288935Z"
    }
   },
   "outputs": [],
   "source": [
    "mdl=Pump(sp=dict(times=(0,20, 500), track_times=(\"interval\", 5)), track='all')\n",
    "exectimes = compare_pools(mdl, fs, pools, staged=True, verbose=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:09:31.288935Z",
     "iopub.status.busy": "2024-08-22T16:09:31.288935Z",
     "iopub.status.idle": "2024-08-22T16:09:31.412239Z",
     "shell.execute_reply": "2024-08-22T16:09:31.412239Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x2beb56809d0>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 900x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(9, 3),)\n",
    "width = 0.8\n",
    "plt.bar(range(len(exectimes)), list(exectimes.values()), align='center', color=\"blue\", label=\"comparison\")\n",
    "plt.bar(range(len(exectimes_baseline)), list(exectimes_baseline.values()), align='center', color=\"gray\", alpha=0.8, label=\"baseline\")\n",
    "plt.xticks(range(len(exectimes)), list(exectimes.keys()))\n",
    "plt.title(\"Computational Performance - Many Faults, Staged, Normal Simulation, Lower Time Resolution\")\n",
    "plt.ylabel(\"Computational Time (s)\")\n",
    "plt.grid(axis='y')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown, while lowering time resolution could theoretically lower computational time, it does not significantly change much in this example. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:09:31.412239Z",
     "iopub.status.busy": "2024-08-22T16:09:31.412239Z",
     "iopub.status.idle": "2024-08-22T16:09:31.443559Z",
     "shell.execute_reply": "2024-08-22T16:09:31.443559Z"
    }
   },
   "outputs": [],
   "source": [
    "terminate_pools(pools)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Comparison Conclusions:\n",
    "\n",
    "Parallelism can the improve computational performance of a given resilience simulation approach. However, this improvement is dependent on the parameters of the simulation. Generally, the official python `multiprocessing` module seems consistently give the best performance improvement over a single-process execution, although this can change depending on the underlying model and modelling approach. There are additionally reasons you might choose other pools-- `multiprocess` pools may enable more data structures in the model because they extend what can be communicated in and out of threads.\n",
    "\n",
    "In general, one of the major considerations for optimization compuational time is not just the *simulation of the model*, but the *size of the returned data structures*. Minimizing the size of the returned data structures can reduce computational time both by reducing the time of an individual simulation and by reducing the *parallelism overhead* from copying these data structures in and out of parallel threads. However, it is important to recognize that for resilience assessment, one often needs a history of model states (or, at least, states of interest) to properly quantify the dynamic costs (i.e., $\\int C_f(t) dt$). Indeed, in this model, only repair costs were able to be used in the comparison of non-tracked states, because the other dynamic costs required a history of their corresponding flows. Changing the number and size of tracked model states can influence the computational time, but only to a point--while one would expect lowering time-fidelity to have a significant effect, it does not because the overhead is less to do with filling the underlying data structures as it has to do with instantiating and returning them--a far more effective method is to only return the functions/flows which are needed by the model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Further Computational Cost Reduction via Profiling\n",
    "While parallelism and staged execution are helpful and relatively easy-to-implement methods of computational cost reduction, it can be helpful (especially for more complex models) to see what aspects of the model are taking the most computational time.\n",
    "\n",
    "While staged execution was not explored here, it can make a difference when faults are to be injected near the end of the simulation by making it unnecessary to simulate up to the fault time. However, it is less helpful when model instantiation/copy time is a significant fraction of simulation time.\n",
    "\n",
    "Python's builtin `cProfile` package can ge used to see the relative computational times of different functions/processes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:09:31.443559Z",
     "iopub.status.busy": "2024-08-22T16:09:31.443559Z",
     "iopub.status.idle": "2024-08-22T16:09:31.451716Z",
     "shell.execute_reply": "2024-08-22T16:09:31.451716Z"
    }
   },
   "outputs": [],
   "source": [
    "import cProfile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:09:31.451716Z",
     "iopub.status.busy": "2024-08-22T16:09:31.451716Z",
     "iopub.status.idle": "2024-08-22T16:09:31.563370Z",
     "shell.execute_reply": "2024-08-22T16:09:31.563370Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         152082 function calls (147772 primitive calls) in 0.067 seconds\n",
      "\n",
      "   Ordered by: internal time\n",
      "\n",
      "   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n",
      "     3834    0.010    0.000    0.023    0.000 base.py:485(get_roles_as_dict)\n",
      "     5338    0.004    0.000    0.010    0.000 base.py:457(get_roles)\n",
      "     3834    0.004    0.000    0.031    0.000 base.py:622(find_mutables)\n",
      "     5338    0.003    0.000    0.005    0.000 base.py:460(<listcomp>)\n",
      "3834/2032    0.003    0.000    0.021    0.000 base.py:638(<listcomp>)\n",
      "3834/2032    0.002    0.000    0.041    0.000 base.py:627(return_mutables)\n",
      "    16560    0.002    0.000    0.002    0.000 {built-in method builtins.getattr}\n",
      "       56    0.002    0.000    0.052    0.001 function.py:776(prop_static)\n",
      "     3834    0.002    0.000    0.004    0.000 base.py:624(<listcomp>)\n",
      "  910/620    0.002    0.000    0.004    0.000 base.py:408(get_faults)\n",
      "     9172    0.002    0.000    0.002    0.000 base.py:448(get_default_roletypes)\n",
      "     3834    0.002    0.000    0.002    0.000 base.py:503(<dictcomp>)\n",
      "     7212    0.002    0.000    0.002    0.000 inspect.py:300(ismethod)\n",
      "    11490    0.002    0.000    0.002    0.000 {built-in method builtins.hasattr}\n",
      "       72    0.001    0.000    0.001    0.000 {built-in method builtins.dir}\n",
      "     1124    0.001    0.000    0.002    0.000 time.py:110(return_mutables)\n",
      "    11905    0.001    0.000    0.001    0.000 {built-in method builtins.isinstance}\n",
      "      562    0.001    0.000    0.008    0.000 function.py:129(__call__)\n",
      "       50    0.001    0.000    0.002    0.000 base.py:254(<listcomp>)\n",
      "     3834    0.001    0.000    0.001    0.000 base.py:490(<listcomp>)\n",
      "     3834    0.001    0.000    0.001    0.000 base.py:496(<listcomp>)\n",
      "     4754    0.001    0.000    0.001    0.000 base.py:464(get_flex_role_objs)\n",
      "  560/224    0.001    0.000    0.001    0.000 base.py:54(get_var)\n",
      "     8922    0.001    0.000    0.001    0.000 {method 'startswith' of 'str' objects}\n",
      "       56    0.001    0.000    0.002    0.000 history.py:205(log)\n",
      "     1148    0.001    0.000    0.001    0.000 copy.py:66(copy)\n",
      "      900    0.001    0.000    0.001    0.000 mode.py:297(has_fault)\n",
      "     3162    0.001    0.000    0.001    0.000 base.py:409(return_mutables)\n",
      "     1124    0.001    0.000    0.001    0.000 mode.py:220(return_mutables)\n",
      "      618    0.000    0.000    0.004    0.000 base.py:402(set_sub_faults)\n",
      "      113    0.000    0.000    0.002    0.000 ex_pump.py:423(static_behavior)\n",
      "     4986    0.000    0.000    0.000    0.000 {method 'values' of 'dict' objects}\n",
      "       40    0.000    0.000    0.004    0.000 base.py:264(init_roles)\n",
      "     3162    0.000    0.000    0.000    0.000 {built-in method recordclass._dataobject.astuple}\n",
      "       22    0.000    0.000    0.001    0.000 base.py:384(<listcomp>)\n",
      "  259/231    0.000    0.000    0.000    0.000 copy.py:128(deepcopy)\n",
      "      562    0.000    0.000    0.001    0.000 function.py:115(prop_arch_behaviors)\n",
      "      226    0.000    0.000    0.001    0.000 base.py:267(set_field)\n",
      "      113    0.000    0.000    0.001    0.000 base.py:230(assign)\n",
      "       22    0.000    0.000    0.001    0.000 inspect.py:2331(_signature_from_function)\n",
      "     2151    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}\n",
      "      300    0.000    0.000    0.000    0.000 __init__.py:180(add)\n",
      "      113    0.000    0.000    0.000    0.000 base.py:169(get_field_dict)\n",
      "    44/22    0.000    0.000    0.001    0.000 inspect.py:2435(_signature_from_callable)\n",
      "        1    0.000    0.000    0.058    0.058 propagate.py:1051(prop_one_scen)\n",
      "     1350    0.000    0.000    0.000    0.000 time.py:111(<genexpr>)\n",
      "       18    0.000    0.000    0.002    0.000 parameter.py:62(__init__)\n",
      "      113    0.000    0.000    0.000    0.000 ex_pump.py:237(static_behavior)\n",
      "       33    0.000    0.000    0.000    0.000 {method 'round' of 'numpy.ndarray' objects}\n",
      "       56    0.000    0.000    0.054    0.001 function.py:736(propagate)\n",
      "       90    0.000    0.000    0.000    0.000 inspect.py:2669(__init__)\n",
      "       44    0.000    0.000    0.000    0.000 inspect.py:2955(__init__)\n",
      "     1249    0.000    0.000    0.000    0.000 {method 'copy' of 'set' objects}\n",
      "      900    0.000    0.000    0.000    0.000 {method 'intersection' of 'set' objects}\n",
      "     1252    0.000    0.000    0.000    0.000 {method 'items' of 'dict' objects}\n",
      "       18    0.000    0.000    0.000    0.000 parameter.py:136(check_immutable)\n",
      "1694/1684    0.000    0.000    0.000    0.000 {built-in method builtins.len}\n",
      "      919    0.000    0.000    0.000    0.000 {built-in method builtins.any}\n",
      "       18    0.000    0.000    0.007    0.000 base.py:135(add_flex_role_obj)\n",
      "       18    0.000    0.000    0.000    0.000 base.py:125(set_arg_type)\n",
      "      390    0.000    0.000    0.000    0.000 <frozen abc>:117(__instancecheck__)\n",
      "    42/32    0.000    0.000    0.000    0.000 result.py:575(flatten)\n",
      "      112    0.000    0.000    0.000    0.000 ex_pump.py:270(static_behavior)\n",
      "       18    0.000    0.000    0.000    0.000 inspect.py:3215(__str__)\n",
      "       14    0.000    0.000    0.000    0.000 base.py:90(find_any_phase_overlap)\n",
      "       33    0.000    0.000    0.000    0.000 {built-in method numpy.arange}\n",
      "       10    0.000    0.000    0.005    0.001 base.py:495(__init__)\n",
      "       60    0.000    0.000    0.000    0.000 <frozen _collections_abc>:717(__ior__)\n",
      "       56    0.000    0.000    0.003    0.000 base.py:226(log_hist)\n",
      "      112    0.000    0.000    0.000    0.000 ex_pump.py:317(static_behavior)\n",
      "      390    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}\n",
      "       30    0.000    0.000    0.001    0.000 base.py:582(create_hist)\n",
      "       12    0.000    0.000    0.000    0.000 time.py:117(set_timestep)\n",
      "       78    0.000    0.000    0.000    0.000 result.py:167(__init__)\n",
      "      468    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}\n",
      "      344    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}\n",
      "       78    0.000    0.000    0.000    0.000 __init__.py:1111(__init__)\n",
      "       22    0.000    0.000    0.000    0.000 inspect.py:2037(_signature_bound_method)\n",
      "    22/20    0.000    0.000    0.005    0.000 base.py:155(__init__)\n",
      "      280    0.000    0.000    0.000    0.000 base.py:260(is_known_mutable)\n",
      "      118    0.000    0.000    0.000    0.000 parameter.py:108(check_lim)\n",
      "      113    0.000    0.000    0.000    0.000 base.py:217(<dictcomp>)\n",
      "    32/30    0.000    0.000    0.004    0.000 base.py:233(init_roletypes)\n",
      "      113    0.000    0.000    0.000    0.000 ex_pump.py:390(set_faults)\n",
      "      293    0.000    0.000    0.000    0.000 {method 'update' of 'set' objects}\n",
      "      338    0.000    0.000    0.000    0.000 {built-in method builtins.setattr}\n",
      "       79    0.000    0.000    0.000    0.000 <frozen _collections_abc>:941(update)\n",
      "      466    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}\n",
      "      226    0.000    0.000    0.000    0.000 {built-in method builtins.min}\n",
      "       33    0.000    0.000    0.000    0.000 base.py:336(gen_timerange)\n",
      "       28    0.000    0.000    0.000    0.000 {method 'copy' of 'numpy.ndarray' objects}\n",
      "       18    0.000    0.000    0.000    0.000 parameter.py:157(check_type)\n",
      "       90    0.000    0.000    0.000    0.000 enum.py:688(__call__)\n",
      "       12    0.000    0.000    0.004    0.000 base.py:195(__init__)\n",
      "       10    0.000    0.000    0.006    0.001 base.py:226(add_sim)\n",
      "      112    0.000    0.000    0.000    0.000 ex_pump.py:296(static_behavior)\n",
      "       56    0.000    0.000    0.000    0.000 inspect.py:2756(__str__)\n",
      "      168    0.000    0.000    0.000    0.000 __init__.py:304(__iter__)\n",
      "       64    0.000    0.000    0.000    0.000 common.py:48(get_sub_include)\n",
      "       50    0.000    0.000    0.003    0.000 base.py:253(find_roletype_initiators)\n",
      "      496    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}\n",
      "       14    0.000    0.000    0.002    0.000 base.py:79(__init__)\n",
      "       56    0.000    0.000    0.000    0.000 function.py:682(set_vars)\n",
      "       18    0.000    0.000    0.001    0.000 parameter.py:180(check_pickle)\n",
      "       62    0.000    0.000    0.000    0.000 __init__.py:65(__init__)\n",
      "       56    0.000    0.000    0.000    0.000 __init__.py:130(copy)\n",
      "        1    0.000    0.000    0.067    0.067 {built-in method builtins.exec}\n",
      "      105    0.000    0.000    0.000    0.000 result.py:324(items)\n",
      "        1    0.000    0.000    0.067    0.067 propagate.py:501(nom_helper)\n",
      "      113    0.000    0.000    0.000    0.000 ex_pump.py:414(indicate_over_pressure)\n",
      "      113    0.000    0.000    0.000    0.000 ex_pump.py:220(set_faults)\n",
      "       63    0.000    0.000    0.000    0.000 __init__.py:1138(__contains__)\n",
      "       18    0.000    0.000    0.006    0.000 base.py:929(init_obj)\n",
      "       78    0.000    0.000    0.000    0.000 result.py:347(__setattr__)\n",
      "      112    0.000    0.000    0.000    0.000 inspect.py:3002(<genexpr>)\n",
      "       28    0.000    0.000    0.000    0.000 fromnumeric.py:865(sort)\n",
      "       28    0.000    0.000    0.000    0.000 {built-in method numpy.asanyarray}\n",
      "       22    0.000    0.000    0.000    0.000 inspect.py:167(get_annotations)\n",
      "        6    0.000    0.000    0.000    0.000 result.py:400(all_with)\n",
      "       12    0.000    0.000    0.000    0.000 time.py:92(__init__)\n",
      "       22    0.000    0.000    0.001    0.000 inspect.py:3007(from_callable)\n",
      "       10    0.000    0.000    0.006    0.001 function.py:543(add_fxn)\n",
      "      313    0.000    0.000    0.000    0.000 {built-in method builtins.id}\n",
      "       26    0.000    0.000    0.000    0.000 numerictypes.py:357(issubdtype)\n",
      "        4    0.000    0.000    0.001    0.000 parameter.py:176(copy_with_vals)\n",
      "       12    0.000    0.000    0.000    0.000 base.py:98(get_true_fields)\n",
      "       33    0.000    0.000    0.000    0.000 fromnumeric.py:3269(round)\n",
      "       22    0.000    0.000    0.000    0.000 inspect.py:735(unwrap)\n",
      "       12    0.000    0.000    0.000    0.000 mode.py:199(__init__)\n",
      "       10    0.000    0.000    0.005    0.001 function.py:77(__init__)\n",
      "       22    0.000    0.000    0.001    0.000 base.py:382(init_indicators)\n",
      "        1    0.000    0.000    0.000    0.000 ex_pump.py:522(find_classification)\n",
      "       33    0.000    0.000    0.000    0.000 fromnumeric.py:53(_wrapfunc)\n",
      "        2    0.000    0.000    0.009    0.004 base.py:84(__init__)\n",
      "       31    0.000    0.000    0.000    0.000 base.py:119(get_histrange)\n",
      "      112    0.000    0.000    0.000    0.000 __init__.py:74(__len__)\n",
      "       22    0.000    0.000    0.000    0.000 inspect.py:3023(replace)\n",
      "       56    0.000    0.000    0.000    0.000 ex_pump.py:518(indicate_on)\n",
      "        2    0.000    0.000    0.000    0.000 graph.py:968(add_edges_from)\n",
      "       26    0.000    0.000    0.000    0.000 {built-in method numpy.array}\n",
      "       28    0.000    0.000    0.000    0.000 {method 'sort' of 'numpy.ndarray' objects}\n",
      "       26    0.000    0.000    0.000    0.000 base.py:213(is_numeric)\n",
      "       12    0.000    0.000    0.001    0.000 base.py:212(init_hist)\n",
      "       52    0.000    0.000    0.000    0.000 numerictypes.py:283(issubclass_)\n",
      "        1    0.000    0.000    0.067    0.067 propagate.py:208(nominal)\n",
      "       22    0.000    0.000    0.000    0.000 base.py:208(init_track)\n",
      "        2    0.000    0.000    0.000    0.000 function.py:609(construct_graph)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'reduce' of 'numpy.ufunc' objects}\n",
      "       33    0.000    0.000    0.000    0.000 base.py:104(get_timerange)\n",
      "        8    0.000    0.000    0.000    0.000 history.py:132(init_att)\n",
      "        8    0.000    0.000    0.000    0.000 result.py:336(__getattr__)\n",
      "       56    0.000    0.000    0.000    0.000 ex_pump.py:499(indicate_finished)\n",
      "      245    0.000    0.000    0.000    0.000 copy.py:182(_deepcopy_atomic)\n",
      "        6    0.000    0.000    0.000    0.000 base.py:416(init_indicator_hist)\n",
      "       42    0.000    0.000    0.000    0.000 result.py:112(check_include_errors)\n",
      "        2    0.000    0.000    0.000    0.000 function.py:597(build)\n",
      "       22    0.000    0.000    0.001    0.000 inspect.py:3261(signature)\n",
      "      130    0.000    0.000    0.000    0.000 {built-in method builtins.issubclass}\n",
      "      190    0.000    0.000    0.000    0.000 {built-in method builtins.iter}\n",
      "      118    0.000    0.000    0.000    0.000 base.py:173(set_arg_as_type)\n",
      "       56    0.000    0.000    0.000    0.000 base.py:150(get_hist_ind)\n",
      "      224    0.000    0.000    0.000    0.000 inspect.py:2734(kind)\n",
      "       56    0.000    0.000    0.000    0.000 propagate.py:1023(check_end_condition)\n",
      "       10    0.000    0.000    0.000    0.000 base.py:548(check_flows)\n",
      "       52    0.000    0.000    0.000    0.000 __init__.py:1118(__len__)\n",
      "        2    0.000    0.000    0.007    0.004 ex_pump.py:471(init_architecture)\n",
      "        4    0.000    0.000    0.000    0.000 graph.py:566(add_nodes_from)\n",
      "       52    0.000    0.000    0.000    0.000 base.py:51(check_role)\n",
      "       38    0.000    0.000    0.000    0.000 {method 'format' of 'str' objects}\n",
      "       90    0.000    0.000    0.000    0.000 enum.py:1095(__new__)\n",
      "     10/4    0.000    0.000    0.000    0.000 copy.py:227(_deepcopy_dict)\n",
      "       10    0.000    0.000    0.000    0.000 function.py:98(update_seed)\n",
      "      113    0.000    0.000    0.000    0.000 {method 'clear' of 'set' objects}\n",
      "        2    0.000    0.000    0.001    0.000 base.py:264(new_params)\n",
      "       14    0.000    0.000    0.000    0.000 {built-in method recordclass._dataobject.asdict}\n",
      "       14    0.000    0.000    0.000    0.000 base.py:95(<listcomp>)\n",
      "        8    0.000    0.000    0.001    0.000 base.py:186(add_flow)\n",
      "        2    0.000    0.000    0.000    0.000 {method '__reduce_ex__' of 'object' objects}\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:1151(get_result)\n",
      "       12    0.000    0.000    0.000    0.000 base.py:105(<listcomp>)\n",
      "      113    0.000    0.000    0.000    0.000 {method 'copy' of 'list' objects}\n",
      "      158    0.000    0.000    0.000    0.000 inspect.py:2722(name)\n",
      "      112    0.000    0.000    0.000    0.000 {method 'index' of 'list' objects}\n",
      "       10    0.000    0.000    0.001    0.000 base.py:529(create_arch_kwargs)\n",
      "       10    0.000    0.000    0.000    0.000 base.py:588(is_dynamic)\n",
      "       55    0.000    0.000    0.000    0.000 __init__.py:1128(__setitem__)\n",
      "        2    0.000    0.000    0.000    0.000 <class 'networkx.utils.decorators.argmap'> compilation 4:1(argmap_isolates_1)\n",
      "       10    0.000    0.000    0.000    0.000 base.py:568(<listcomp>)\n",
      "       44    0.000    0.000    0.000    0.000 inspect.py:378(isfunction)\n",
      "        2    0.000    0.000    0.000    0.000 functools.py:981(__get__)\n",
      "        2    0.000    0.000    0.000    0.000 isolate.py:42(isolates)\n",
      "       32    0.000    0.000    0.000    0.000 base.py:202(check_slots)\n",
      "       14    0.000    0.000    0.000    0.000 base.py:92(<dictcomp>)\n",
      "        2    0.000    0.000    0.009    0.005 base.py:298(new)\n",
      "        2    0.000    0.000    0.009    0.004 function.py:510(__init__)\n",
      "       12    0.000    0.000    0.000    0.000 function.py:821(<listcomp>)\n",
      "       90    0.000    0.000    0.000    0.000 {method 'isidentifier' of 'str' objects}\n",
      "        4    0.000    0.000    0.000    0.000 base.py:361(create_hist)\n",
      "       90    0.000    0.000    0.000    0.000 {method '__contains__' of 'frozenset' objects}\n",
      "        1    0.000    0.000    0.067    0.067 <string>:1(<module>)\n",
      "        2    0.000    0.000    0.000    0.000 function.py:605(<listcomp>)\n",
      "       14    0.000    0.000    0.000    0.000 copy.py:243(_keep_alive)\n",
      "        2    0.000    0.000    0.000    0.000 base.py:257(build)\n",
      "       40    0.000    0.000    0.000    0.000 {method 'values' of 'mappingproxy' objects}\n",
      "       20    0.000    0.000    0.000    0.000 graph.py:1318(neighbors)\n",
      "       10    0.000    0.000    0.000    0.000 base.py:510(<dictcomp>)\n",
      "        2    0.000    0.000    0.000    0.000 graph.py:332(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 function.py:621(calc_repaircost)\n",
      "       10    0.000    0.000    0.000    0.000 __init__.py:201(update)\n",
      "       20    0.000    0.000    0.000    0.000 reportviews.py:529(__iter__)\n",
      "        8    0.000    0.000    0.000    0.000 base.py:92(create_hist)\n",
      "        1    0.000    0.000    0.000    0.000 history.py:271(cut)\n",
      "       18    0.000    0.000    0.000    0.000 inspect.py:292(isclass)\n",
      "       10    0.000    0.000    0.000    0.000 base.py:279(get_flows)\n",
      "        8    0.000    0.000    0.000    0.000 {built-in method numpy.empty}\n",
      "        1    0.000    0.000    0.000    0.000 fromnumeric.py:71(_wrapreduction)\n",
      "        2    0.000    0.000    0.000    0.000 copy.py:259(_reconstruct)\n",
      "        4    0.000    0.000    0.000    0.000 state.py:345(init_hist_att)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method builtins.sum}\n",
      "       42    0.000    0.000    0.000    0.000 result.py:121(check_include_error)\n",
      "       14    0.000    0.000    0.000    0.000 base.py:94(<listcomp>)\n",
      "        2    0.000    0.000    0.000    0.000 function.py:600(<listcomp>)\n",
      "        2    0.000    0.000    0.000    0.000 copyreg.py:113(_slotnames)\n",
      "       40    0.000    0.000    0.000    0.000 __init__.py:165(__contains__)\n",
      "        8    0.000    0.000    0.000    0.000 function.py:606(<listcomp>)\n",
      "       66    0.000    0.000    0.000    0.000 {built-in method builtins.callable}\n",
      "        2    0.000    0.000    0.000    0.000 isolate.py:85(<genexpr>)\n",
      "        4    0.000    0.000    0.000    0.000 base.py:348(init_hist_att)\n",
      "       10    0.000    0.000    0.000    0.000 base.py:536(<dictcomp>)\n",
      "       14    0.000    0.000    0.000    0.000 base.py:413(asdict)\n",
      "       10    0.000    0.000    0.000    0.000 base.py:563(<listcomp>)\n",
      "        2    0.000    0.000    0.000    0.000 function.py:602(<listcomp>)\n",
      "       18    0.000    0.000    0.000    0.000 base.py:257(get_full_name)\n",
      "       33    0.000    0.000    0.000    0.000 fromnumeric.py:3265(_round_dispatcher)\n",
      "        2    0.000    0.000    0.000    0.000 graph.py:1484(degree)\n",
      "        4    0.000    0.000    0.000    0.000 base.py:272(<dictcomp>)\n",
      "       10    0.000    0.000    0.000    0.000 base.py:283(<dictcomp>)\n",
      "        4    0.000    0.000    0.000    0.000 base.py:69(get_track)\n",
      "        1    0.000    0.000    0.000    0.000 fromnumeric.py:2836(min)\n",
      "       12    0.000    0.000    0.000    0.000 base.py:208(<dictcomp>)\n",
      "        8    0.000    0.000    0.000    0.000 result.py:93(get_dict_attr)\n",
      "        2    0.000    0.000    0.000    0.000 reportviews.py:419(__init__)\n",
      "       44    0.000    0.000    0.000    0.000 inspect.py:3015(parameters)\n",
      "        2    0.000    0.000    0.000    0.000 timer.py:61(__init__)\n",
      "       22    0.000    0.000    0.000    0.000 {built-in method sys.getrecursionlimit}\n",
      "       10    0.000    0.000    0.000    0.000 base.py:582(is_static)\n",
      "        2    0.000    0.000    0.000    0.000 backends.py:627(__call__)\n",
      "        2    0.000    0.000    0.000    0.000 base.py:114(init_flexible_roles)\n",
      "       28    0.000    0.000    0.000    0.000 fromnumeric.py:861(_sort_dispatcher)\n",
      "        1    0.000    0.000    0.000    0.000 scenario.py:136(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 base.py:451(return_faultmodes)\n",
      "        4    0.000    0.000    0.000    0.000 result.py:320(keys)\n",
      "        2    0.000    0.000    0.000    0.000 copy.py:201(_deepcopy_list)\n",
      "        6    0.000    0.000    0.000    0.000 misc.py:595(_clear_cache)\n",
      "        6    0.000    0.000    0.000    0.000 base.py:603(<listcomp>)\n",
      "       20    0.000    0.000    0.000    0.000 {built-in method builtins.repr}\n",
      "        1    0.000    0.000    0.000    0.000 base.py:130(get_shift)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:220(init_time_hist)\n",
      "        7    0.000    0.000    0.000    0.000 __init__.py:1121(__getitem__)\n",
      "        7    0.000    0.000    0.000    0.000 propagate.py:121(<genexpr>)\n",
      "        2    0.000    0.000    0.000    0.000 base.py:387(get_indicators)\n",
      "       16    0.000    0.000    0.000    0.000 base.py:65(check_role)\n",
      "        2    0.000    0.000    0.000    0.000 base.py:396(<dictcomp>)\n",
      "        2    0.000    0.000    0.000    0.000 graph.py:59(__set__)\n",
      "        2    0.000    0.000    0.000    0.000 function.py:617(<listcomp>)\n",
      "       18    0.000    0.000    0.000    0.000 inspect.py:3019(return_annotation)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:879(check_overwrite)\n",
      "        4    0.000    0.000    0.000    0.000 {method 'endswith' of 'str' objects}\n",
      "       10    0.000    0.000    0.000    0.000 base.py:232(update_seed)\n",
      "       10    0.000    0.000    0.000    0.000 base.py:591(<listcomp>)\n",
      "       12    0.000    0.000    0.000    0.000 copy.py:107(_copy_immutable)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:242(save_helper)\n",
      "        4    0.000    0.000    0.000    0.000 copy.py:264(<genexpr>)\n",
      "       12    0.000    0.000    0.000    0.000 inspect.py:2726(default)\n",
      "        2    0.000    0.000    0.000    0.000 graph.py:37(__set__)\n",
      "       10    0.000    0.000    0.000    0.000 base.py:525(init_block)\n",
      "        2    0.000    0.000    0.000    0.000 __init__.py:1134(__iter__)\n",
      "        2    0.000    0.000    0.000    0.000 base.py:295(update_seed)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method fromkeys}\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:119(unpack_sim_kwargs)\n",
      "        1    0.000    0.000    0.000    0.000 fromnumeric.py:72(<dictcomp>)\n",
      "        2    0.000    0.000    0.000    0.000 {method 'get' of 'mappingproxy' objects}\n",
      "        2    0.000    0.000    0.000    0.000 reportviews.py:426(__call__)\n",
      "        4    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}\n",
      "        2    0.000    0.000    0.000    0.000 parameter.py:105(keys)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'pop' of 'dict' objects}\n",
      "        2    0.000    0.000    0.000    0.000 base.py:453(<dictcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:1167(<listcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 scenario.py:138(<dictcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n",
      "        2    0.000    0.000    0.000    0.000 {method '__exit__' of '_thread.RLock' objects}\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:1191(<listcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 fromnumeric.py:2831(_min_dispatcher)\n",
      "        1    0.000    0.000    0.000    0.000 function.py:643(<listcomp>)\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "mdl=Pump(sp=dict(track='all'))\n",
    "prof = cProfile.run('propagate.nominal(mdl)', sort='tottime')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:09:31.563370Z",
     "iopub.status.busy": "2024-08-22T16:09:31.563370Z",
     "iopub.status.idle": "2024-08-22T16:09:37.577351Z",
     "shell.execute_reply": "2024-08-22T16:09:37.577351Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "SCENARIOS COMPLETE: 100%|██████████| 72/72 [00:04<00:00, 15.85it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         10836044 function calls (10523762 primitive calls) in 4.616 seconds\n",
      "\n",
      "   Ordered by: internal time\n",
      "\n",
      "   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n",
      "   280212    0.694    0.000    1.631    0.000 base.py:485(get_roles_as_dict)\n",
      "   388558    0.296    0.000    0.691    0.000 base.py:457(get_roles)\n",
      "   280140    0.259    0.000    2.218    0.000 base.py:622(find_mutables)\n",
      "   388558    0.234    0.000    0.327    0.000 base.py:460(<listcomp>)\n",
      "280140/148474    0.226    0.000    1.522    0.000 base.py:638(<listcomp>)\n",
      "280140/148474    0.175    0.000    2.951    0.000 base.py:627(return_mutables)\n",
      "  1184968    0.150    0.000    0.150    0.000 {built-in method builtins.getattr}\n",
      "     4088    0.148    0.000    3.726    0.001 function.py:776(prop_static)\n",
      "   280140    0.147    0.000    0.309    0.000 base.py:624(<listcomp>)\n",
      "66031/45221    0.137    0.000    0.438    0.000 base.py:408(get_faults)\n",
      "   668770    0.117    0.000    0.117    0.000 base.py:448(get_default_roletypes)\n",
      "   280212    0.116    0.000    0.158    0.000 base.py:503(<dictcomp>)\n",
      "   526950    0.114    0.000    0.162    0.000 inspect.py:300(ismethod)\n",
      "   831106    0.107    0.000    0.107    0.000 {built-in method builtins.hasattr}\n",
      "     5566    0.095    0.000    0.095    0.000 {built-in method builtins.dir}\n",
      "    82118    0.094    0.000    0.113    0.000 time.py:110(return_mutables)\n",
      "    41059    0.083    0.000    0.585    0.000 function.py:129(__call__)\n",
      "   280212    0.081    0.000    0.081    0.000 base.py:490(<listcomp>)\n",
      "   839544    0.081    0.000    0.093    0.000 {built-in method builtins.isinstance}\n",
      "   280212    0.079    0.000    0.079    0.000 base.py:496(<listcomp>)\n",
      "   346613    0.064    0.000    0.069    0.000 base.py:464(get_flex_role_objs)\n",
      "40880/16352    0.060    0.000    0.089    0.000 base.py:54(get_var)\n",
      "    97156    0.052    0.000    0.071    0.000 copy.py:66(copy)\n",
      "     4088    0.050    0.000    0.176    0.000 history.py:205(log)\n",
      "   574730    0.046    0.000    0.046    0.000 {method 'startswith' of 'str' objects}\n",
      "     2902    0.043    0.000    0.062    0.000 base.py:431(<dictcomp>)\n",
      "    63231    0.040    0.000    0.057    0.000 mode.py:297(has_fault)\n",
      "   231048    0.039    0.000    0.064    0.000 base.py:409(return_mutables)\n",
      "     1850    0.039    0.000    0.056    0.000 base.py:254(<listcomp>)\n",
      "    82118    0.036    0.000    0.097    0.000 mode.py:220(return_mutables)\n",
      "    45147    0.034    0.000    0.468    0.000 base.py:402(set_sub_faults)\n",
      "   363376    0.027    0.000    0.027    0.000 {method 'values' of 'dict' objects}\n",
      "     8258    0.026    0.000    0.142    0.000 ex_pump.py:423(static_behavior)\n",
      "   231048    0.024    0.000    0.024    0.000 {built-in method recordclass._dataobject.astuple}\n",
      "    41059    0.021    0.000    0.083    0.000 function.py:115(prop_arch_behaviors)\n",
      "17776/16740    0.020    0.000    0.029    0.000 copy.py:128(deepcopy)\n",
      "    16516    0.019    0.000    0.049    0.000 base.py:267(set_field)\n",
      "     8258    0.018    0.000    0.091    0.000 base.py:230(assign)\n",
      "   150840    0.014    0.000    0.014    0.000 {method 'get' of 'dict' objects}\n",
      "     2902    0.014    0.000    0.157    0.000 mode.py:223(get_fault)\n",
      "     8258    0.014    0.000    0.023    0.000 base.py:169(get_field_dict)\n",
      "       73    0.013    0.000    4.269    0.058 propagate.py:1051(prop_one_scen)\n",
      "    21180    0.013    0.000    0.016    0.000 __init__.py:180(add)\n",
      "      319    0.013    0.000    0.013    0.000 {method 'acquire' of '_thread.lock' objects}\n",
      "     1480    0.013    0.000    0.154    0.000 base.py:264(init_roles)\n",
      "    98634    0.012    0.000    0.012    0.000 time.py:111(<genexpr>)\n",
      "      814    0.011    0.000    0.018    0.000 base.py:384(<listcomp>)\n",
      "     8255    0.011    0.000    0.027    0.000 ex_pump.py:237(static_behavior)\n",
      "    90820    0.010    0.000    0.010    0.000 {method 'copy' of 'set' objects}\n",
      "     4088    0.010    0.000    4.041    0.001 function.py:736(propagate)\n",
      "     3274    0.009    0.000    0.025    0.000 base.py:98(get_true_fields)\n",
      "    63231    0.009    0.000    0.009    0.000 {method 'intersection' of 'set' objects}\n",
      "125523/124792    0.008    0.000    0.009    0.000 {built-in method builtins.len}\n",
      "    85963    0.008    0.000    0.008    0.000 {method 'items' of 'dict' objects}\n",
      "    63898    0.008    0.000    0.008    0.000 {built-in method builtins.any}\n",
      "      814    0.008    0.000    0.023    0.000 inspect.py:2331(_signature_from_function)\n",
      "     8185    0.007    0.000    0.021    0.000 ex_pump.py:270(static_behavior)\n",
      "     4236    0.006    0.000    0.023    0.000 <frozen _collections_abc>:717(__ior__)\n",
      "    25758    0.006    0.000    0.012    0.000 <frozen abc>:117(__instancecheck__)\n",
      "     8176    0.006    0.000    0.014    0.000 ex_pump.py:317(static_behavior)\n",
      "     4088    0.006    0.000    0.183    0.000 base.py:226(log_hist)\n",
      "     1329    0.006    0.000    0.006    0.000 {method 'round' of 'numpy.ndarray' objects}\n",
      " 1628/814    0.006    0.000    0.037    0.000 inspect.py:2435(_signature_from_callable)\n",
      "    25758    0.006    0.000    0.006    0.000 {built-in method _abc._abc_instancecheck}\n",
      "    31611    0.005    0.000    0.005    0.000 {method 'update' of 'dict' objects}\n",
      "     2830    0.005    0.000    0.028    0.000 mode.py:64(__init__)\n",
      "      666    0.005    0.000    0.062    0.000 parameter.py:62(__init__)\n",
      "     1628    0.005    0.000    0.007    0.000 inspect.py:2955(__init__)\n",
      "    20440    0.005    0.000    0.005    0.000 base.py:260(is_known_mutable)\n",
      "    25256    0.005    0.000    0.005    0.000 {method 'split' of 'str' objects}\n",
      "     3330    0.005    0.000    0.008    0.000 inspect.py:2669(__init__)\n",
      "     3274    0.005    0.000    0.015    0.000 base.py:105(<listcomp>)\n",
      "     8258    0.005    0.000    0.007    0.000 ex_pump.py:390(set_faults)\n",
      "     8258    0.004    0.000    0.006    0.000 base.py:217(<dictcomp>)\n",
      "    21488    0.004    0.000    0.004    0.000 {method 'update' of 'set' objects}\n",
      "1776/1187    0.004    0.000    0.017    0.000 result.py:575(flatten)\n",
      "     2902    0.004    0.000    0.113    0.000 base.py:428(get_pref_attrs)\n",
      "      666    0.004    0.000    0.006    0.000 parameter.py:136(check_immutable)\n",
      "    33370    0.004    0.000    0.004    0.000 {method 'join' of 'str' objects}\n",
      "      666    0.004    0.000    0.242    0.000 base.py:135(add_flex_role_obj)\n",
      "      666    0.004    0.000    0.005    0.000 base.py:125(set_arg_type)\n",
      "     8185    0.004    0.000    0.011    0.000 ex_pump.py:296(static_behavior)\n",
      "    15111    0.004    0.000    0.004    0.000 {built-in method builtins.min}\n",
      "      444    0.003    0.000    0.003    0.000 time.py:117(set_timestep)\n",
      "      518    0.003    0.000    0.011    0.000 base.py:90(find_any_phase_overlap)\n",
      "     4088    0.003    0.000    0.004    0.000 function.py:682(set_vars)\n",
      "    12264    0.003    0.000    0.004    0.000 __init__.py:304(__iter__)\n",
      "     1329    0.003    0.000    0.003    0.000 {built-in method numpy.arange}\n",
      "      370    0.003    0.000    0.186    0.001 base.py:495(__init__)\n",
      "      666    0.003    0.000    0.006    0.000 inspect.py:3215(__str__)\n",
      "     3251    0.003    0.000    0.013    0.000 result.py:167(__init__)\n",
      "     4088    0.003    0.000    0.029    0.000 __init__.py:130(copy)\n",
      "     4310    0.003    0.000    0.026    0.000 __init__.py:65(__init__)\n",
      "    20660    0.003    0.000    0.003    0.000 {built-in method builtins.setattr}\n",
      "     6377    0.003    0.000    0.003    0.000 result.py:324(items)\n",
      "     1110    0.003    0.000    0.029    0.000 base.py:582(create_hist)\n",
      "     8255    0.003    0.000    0.003    0.000 ex_pump.py:220(set_faults)\n",
      "     4599    0.003    0.000    0.003    0.000 __init__.py:1138(__contains__)\n",
      "     8258    0.003    0.000    0.003    0.000 ex_pump.py:414(indicate_over_pressure)\n",
      "     3251    0.003    0.000    0.009    0.000 __init__.py:1111(__init__)\n",
      "    28432    0.003    0.000    0.003    0.000 {method 'append' of 'list' objects}\n",
      "     3324    0.002    0.000    0.006    0.000 <frozen _collections_abc>:941(update)\n",
      "     1036    0.002    0.000    0.002    0.000 {method 'copy' of 'numpy.ndarray' objects}\n",
      "      438    0.002    0.000    0.006    0.000 result.py:400(all_with)\n",
      "     4366    0.002    0.000    0.004    0.000 parameter.py:108(check_lim)\n",
      "  814/740    0.002    0.000    0.172    0.000 base.py:155(__init__)\n",
      "      814    0.002    0.000    0.006    0.000 inspect.py:2037(_signature_bound_method)\n",
      "1184/1110    0.002    0.000    0.156    0.000 base.py:233(init_roletypes)\n",
      "    19782    0.002    0.000    0.002    0.000 {built-in method builtins.id}\n",
      "      119    0.002    0.000    0.002    0.000 socket.py:621(send)\n",
      "      666    0.002    0.000    0.002    0.000 parameter.py:157(check_type)\n",
      "     1329    0.002    0.000    0.013    0.000 base.py:336(gen_timerange)\n",
      "     4088    0.002    0.000    0.002    0.000 ex_pump.py:518(indicate_on)\n",
      "     8176    0.002    0.000    0.002    0.000 __init__.py:74(__len__)\n",
      "     1036    0.002    0.000    0.002    0.000 {method 'sort' of 'numpy.ndarray' objects}\n",
      "     2584    0.002    0.000    0.155    0.000 mode.py:263(<dictcomp>)\n",
      "      444    0.002    0.000    0.154    0.000 base.py:195(__init__)\n",
      "     1850    0.002    0.000    0.090    0.000 base.py:253(find_roletype_initiators)\n",
      "      518    0.002    0.000    0.058    0.000 base.py:79(__init__)\n",
      "       73    0.002    0.000    0.002    0.000 {method 'reduce' of 'numpy.ufunc' objects}\n",
      "     3330    0.002    0.000    0.002    0.000 enum.py:688(__call__)\n",
      "     2072    0.002    0.000    0.002    0.000 inspect.py:2756(__str__)\n",
      "      370    0.002    0.000    0.201    0.001 base.py:226(add_sim)\n",
      "        1    0.002    0.002    4.544    4.544 propagate.py:779(scenlist_helper)\n",
      "     2587    0.002    0.000    0.002    0.000 common.py:48(get_sub_include)\n",
      "       73    0.002    0.000    0.020    0.000 ex_pump.py:522(find_classification)\n",
      "     1779    0.002    0.000    0.003    0.000 numerictypes.py:357(issubdtype)\n",
      "     4088    0.001    0.000    0.001    0.000 ex_pump.py:499(indicate_finished)\n",
      "    17256    0.001    0.000    0.001    0.000 copy.py:182(_deepcopy_atomic)\n",
      "     3251    0.001    0.000    0.001    0.000 result.py:347(__setattr__)\n",
      "      666    0.001    0.000    0.039    0.000 parameter.py:180(check_pickle)\n",
      "     2584    0.001    0.000    0.157    0.000 mode.py:259(get_faults)\n",
      "     4088    0.001    0.000    0.001    0.000 base.py:150(get_hist_ind)\n",
      "    13570    0.001    0.000    0.001    0.000 {built-in method builtins.iter}\n",
      "      666    0.001    0.000    0.210    0.000 base.py:929(init_obj)\n",
      "      584    0.001    0.000    0.008    0.000 result.py:336(__getattr__)\n",
      "     8258    0.001    0.000    0.001    0.000 {method 'clear' of 'set' objects}\n",
      "     1770    0.001    0.000    0.005    0.000 base.py:213(is_numeric)\n",
      "     4144    0.001    0.000    0.002    0.000 inspect.py:3002(<genexpr>)\n",
      "     1036    0.001    0.000    0.001    0.000 {built-in method numpy.asanyarray}\n",
      "     1036    0.001    0.000    0.006    0.000 fromnumeric.py:865(sort)\n",
      "     3558    0.001    0.000    0.002    0.000 numerictypes.py:283(issubclass_)\n",
      "     8176    0.001    0.000    0.001    0.000 {method 'index' of 'list' objects}\n",
      "     4088    0.001    0.000    0.001    0.000 propagate.py:1023(check_end_condition)\n",
      "      814    0.001    0.000    0.002    0.000 inspect.py:167(get_annotations)\n",
      "    14594    0.001    0.000    0.001    0.000 copy.py:107(_copy_immutable)\n",
      "     8258    0.001    0.000    0.001    0.000 {method 'copy' of 'list' objects}\n",
      "       38    0.001    0.000    0.002    0.000 std.py:464(format_meter)\n",
      "     1770    0.001    0.000    0.001    0.000 {built-in method numpy.array}\n",
      "     1329    0.001    0.000    0.008    0.000 fromnumeric.py:3269(round)\n",
      "      814    0.001    0.000    0.001    0.000 inspect.py:735(unwrap)\n",
      "      370    0.001    0.000    0.203    0.001 function.py:543(add_fxn)\n",
      "      444    0.001    0.000    0.008    0.000 time.py:92(__init__)\n",
      "      148    0.001    0.000    0.021    0.000 parameter.py:176(copy_with_vals)\n",
      "       73    0.001    0.000    0.022    0.000 propagate.py:1151(get_result)\n",
      "     1329    0.001    0.000    0.007    0.000 fromnumeric.py:53(_wrapfunc)\n",
      "      370    0.001    0.000    0.187    0.001 function.py:77(__init__)\n",
      "      814    0.001    0.000    0.035    0.000 base.py:382(init_indicators)\n",
      "      444    0.001    0.000    0.003    0.000 mode.py:199(__init__)\n",
      "      814    0.001    0.000    0.038    0.000 inspect.py:3007(from_callable)\n",
      "     7261    0.001    0.000    0.001    0.000 {built-in method builtins.issubclass}\n",
      "     3531    0.001    0.000    0.001    0.000 __init__.py:1128(__setitem__)\n",
      "     1183    0.001    0.000    0.013    0.000 base.py:119(get_histrange)\n",
      "      814    0.001    0.000    0.004    0.000 inspect.py:3023(replace)\n",
      "       74    0.001    0.000    0.001    0.000 graph.py:968(add_edges_from)\n",
      "     1329    0.001    0.000    0.014    0.000 base.py:104(get_timerange)\n",
      "      864    0.001    0.000    0.001    0.000 function.py:821(<listcomp>)\n",
      "   144/72    0.001    0.000    0.006    0.000 base.py:366(inject_faults)\n",
      "      814    0.001    0.000    0.001    0.000 base.py:208(init_track)\n",
      "     1776    0.001    0.000    0.001    0.000 result.py:112(check_include_errors)\n",
      "     1482    0.001    0.000    0.001    0.000 {method 'format' of 'str' objects}\n",
      "     2357    0.001    0.000    0.001    0.000 __init__.py:1118(__len__)\n",
      "      296    0.001    0.000    0.001    0.000 history.py:132(init_att)\n",
      "     4366    0.001    0.000    0.001    0.000 base.py:173(set_arg_as_type)\n",
      "      814    0.001    0.000    0.038    0.000 inspect.py:3261(signature)\n",
      "      444    0.001    0.000    0.018    0.000 base.py:212(init_hist)\n",
      "      184    0.001    0.000    0.001    0.000 {built-in method builtins.sum}\n",
      "      370    0.001    0.000    0.001    0.000 function.py:98(update_seed)\n",
      "     8288    0.001    0.000    0.001    0.000 inspect.py:2734(kind)\n",
      "       74    0.001    0.000    0.291    0.004 base.py:84(__init__)\n",
      "      148    0.001    0.000    0.001    0.000 graph.py:566(add_nodes_from)\n",
      "     1924    0.001    0.000    0.001    0.000 base.py:51(check_role)\n",
      "      370    0.001    0.000    0.001    0.000 base.py:548(check_flows)\n",
      "       74    0.001    0.000    0.005    0.000 function.py:609(construct_graph)\n",
      "  372/150    0.001    0.000    0.003    0.000 copy.py:227(_deepcopy_dict)\n",
      "      518    0.001    0.000    0.001    0.000 base.py:95(<listcomp>)\n",
      "      518    0.001    0.000    0.001    0.000 {built-in method recordclass._dataobject.asdict}\n",
      "       74    0.001    0.000    0.012    0.000 function.py:597(build)\n",
      "       74    0.001    0.000    0.001    0.000 history.py:271(cut)\n",
      "     1160    0.001    0.000    0.001    0.000 graph.py:1318(neighbors)\n",
      "     3330    0.001    0.000    0.001    0.000 enum.py:1095(__new__)\n",
      "       74    0.001    0.000    0.248    0.003 ex_pump.py:471(init_architecture)\n",
      "      370    0.001    0.000    0.019    0.000 base.py:529(create_arch_kwargs)\n",
      "     5846    0.001    0.000    0.001    0.000 inspect.py:2722(name)\n",
      "      222    0.000    0.000    0.002    0.000 base.py:416(init_indicator_hist)\n",
      "      370    0.000    0.000    0.001    0.000 base.py:588(is_dynamic)\n",
      "     2571    0.000    0.000    0.001    0.000 utils.py:375(<genexpr>)\n",
      "     1184    0.000    0.000    0.001    0.000 base.py:202(check_slots)\n",
      "       40    0.000    0.000    0.003    0.000 iostream.py:655(write)\n",
      "     1628    0.000    0.000    0.001    0.000 inspect.py:378(isfunction)\n",
      "       73    0.000    0.000    0.010    0.000 function.py:621(calc_repaircost)\n",
      "      370    0.000    0.000    0.000    0.000 base.py:568(<listcomp>)\n",
      "       73    0.000    0.000    0.002    0.000 fromnumeric.py:71(_wrapreduction)\n",
      "       74    0.000    0.000    0.001    0.000 functools.py:981(__get__)\n",
      "      518    0.000    0.000    0.000    0.000 base.py:92(<dictcomp>)\n",
      "       74    0.000    0.000    0.025    0.000 base.py:264(new_params)\n",
      "     3330    0.000    0.000    0.000    0.000 {method '__contains__' of 'frozenset' objects}\n",
      "       36    0.000    0.000    0.022    0.001 std.py:1198(update)\n",
      "       72    0.000    0.000    4.210    0.058 propagate.py:828(exec_scen)\n",
      "      296    0.000    0.000    0.044    0.000 base.py:186(add_flow)\n",
      "     3330    0.000    0.000    0.000    0.000 {method 'isidentifier' of 'str' objects}\n",
      "      520    0.000    0.000    0.000    0.000 copy.py:243(_keep_alive)\n",
      "       72    0.000    0.000    0.001    0.000 base.py:524(get_vars)\n",
      "      584    0.000    0.000    0.000    0.000 result.py:93(get_dict_attr)\n",
      "     1480    0.000    0.000    0.000    0.000 {method 'values' of 'mappingproxy' objects}\n",
      "       74    0.000    0.000    0.317    0.004 base.py:298(new)\n",
      "     2320    0.000    0.000    0.000    0.000 __init__.py:165(__contains__)\n",
      "      119    0.000    0.000    0.003    0.000 iostream.py:259(schedule)\n",
      "       74    0.000    0.000    0.004    0.000 base.py:257(build)\n",
      "      148    0.000    0.000    0.002    0.000 base.py:361(create_hist)\n",
      "       74    0.000    0.000    0.001    0.000 {method '__reduce_ex__' of 'object' objects}\n",
      "       74    0.000    0.000    0.001    0.000 isolate.py:42(isolates)\n",
      "      370    0.000    0.000    0.000    0.000 base.py:510(<dictcomp>)\n",
      "       74    0.000    0.000    0.291    0.004 function.py:510(__init__)\n",
      "      217    0.000    0.000    0.000    0.000 std.py:231(__call__)\n",
      "       40    0.000    0.000    0.013    0.000 threading.py:611(wait)\n",
      "       40    0.000    0.000    0.015    0.000 iostream.py:592(flush)\n",
      "       74    0.000    0.000    0.000    0.000 graph.py:332(__init__)\n",
      "       74    0.000    0.000    0.001    0.000 function.py:605(<listcomp>)\n",
      "      740    0.000    0.000    0.000    0.000 reportviews.py:529(__iter__)\n",
      "      296    0.000    0.000    0.015    0.000 base.py:92(create_hist)\n",
      "      810    0.000    0.000    0.000    0.000 base.py:257(get_full_name)\n",
      "      370    0.000    0.000    0.001    0.000 __init__.py:201(update)\n",
      "      666    0.000    0.000    0.000    0.000 inspect.py:292(isclass)\n",
      "       75    0.000    0.000    0.000    0.000 std.py:400(format_interval)\n",
      "       74    0.000    0.000    0.001    0.000 graph.py:1484(degree)\n",
      "      518    0.000    0.000    0.000    0.000 base.py:94(<listcomp>)\n",
      "      370    0.000    0.000    0.000    0.000 base.py:279(get_flows)\n",
      "      296    0.000    0.000    0.000    0.000 {built-in method numpy.empty}\n",
      "       73    0.000    0.000    0.023    0.000 std.py:1160(__iter__)\n",
      "     1776    0.000    0.000    0.000    0.000 result.py:121(check_include_error)\n",
      "       73    0.000    0.000    0.002    0.000 fromnumeric.py:2836(min)\n",
      "      656    0.000    0.000    0.000    0.000 __init__.py:1121(__getitem__)\n",
      "       76    0.000    0.000    0.000    0.000 utils.py:273(_is_ascii)\n",
      "       80    0.000    0.000    0.000    0.000 {built-in method _thread.allocate_lock}\n",
      "       38    0.000    0.000    0.000    0.000 std.py:1446(format_dict)\n",
      "     2442    0.000    0.000    0.000    0.000 {built-in method builtins.callable}\n",
      "      370    0.000    0.000    0.000    0.000 base.py:536(<dictcomp>)\n",
      "     2533    0.000    0.000    0.000    0.000 {built-in method unicodedata.east_asian_width}\n",
      "       40    0.000    0.000    0.000    0.000 threading.py:243(__init__)\n",
      "      296    0.000    0.000    0.000    0.000 function.py:606(<listcomp>)\n",
      "      148    0.000    0.000    0.001    0.000 state.py:345(init_hist_att)\n",
      "       40    0.000    0.000    0.013    0.000 threading.py:295(wait)\n",
      "      148    0.000    0.000    0.001    0.000 base.py:348(init_hist_att)\n",
      "       74    0.000    0.000    0.000    0.000 reportviews.py:419(__init__)\n",
      "       38    0.000    0.000    0.003    0.000 std.py:1150(__str__)\n",
      "       78    0.000    0.000    0.018    0.000 utils.py:194(inner)\n",
      "       74    0.000    0.000    0.000    0.000 copyreg.py:113(_slotnames)\n",
      "       41    0.000    0.000    0.000    0.000 {method 'acquire' of '_multiprocessing.SemLock' objects}\n",
      "      159    0.000    0.000    0.000    0.000 threading.py:1192(is_alive)\n",
      "       74    0.000    0.000    0.001    0.000 copy.py:259(_reconstruct)\n",
      "      370    0.000    0.000    0.000    0.000 base.py:563(<listcomp>)\n",
      "      518    0.000    0.000    0.001    0.000 base.py:413(asdict)\n",
      "      370    0.000    0.000    0.000    0.000 base.py:283(<dictcomp>)\n",
      "     1329    0.000    0.000    0.000    0.000 fromnumeric.py:3265(_round_dispatcher)\n",
      "      148    0.000    0.000    0.000    0.000 base.py:272(<dictcomp>)\n",
      "       74    0.000    0.000    0.000    0.000 function.py:600(<listcomp>)\n",
      "       74    0.000    0.000    0.001    0.000 function.py:602(<listcomp>)\n",
      "      293    0.000    0.000    0.000    0.000 result.py:320(keys)\n",
      "      444    0.000    0.000    0.000    0.000 base.py:208(<dictcomp>)\n",
      "      511    0.000    0.000    0.000    0.000 propagate.py:121(<genexpr>)\n",
      "       37    0.000    0.000    0.022    0.001 std.py:1325(refresh)\n",
      "       74    0.000    0.000    0.002    0.000 <class 'networkx.utils.decorators.argmap'> compilation 4:1(argmap_isolates_1)\n",
      "     1628    0.000    0.000    0.000    0.000 inspect.py:3015(parameters)\n",
      "       74    0.000    0.000    0.000    0.000 isolate.py:85(<genexpr>)\n",
      "       38    0.000    0.000    0.022    0.001 std.py:1464(display)\n",
      "       41    0.000    0.000    0.000    0.000 std.py:102(acquire)\n",
      "       73    0.000    0.000    0.001    0.000 base.py:130(get_shift)\n",
      "      370    0.000    0.000    0.000    0.000 base.py:582(is_static)\n",
      "       74    0.000    0.000    0.001    0.000 backends.py:627(__call__)\n",
      "      119    0.000    0.000    0.000    0.000 iostream.py:138(_event_pipe)\n",
      "       41    0.000    0.000    0.000    0.000 std.py:106(release)\n",
      "       74    0.000    0.000    0.007    0.000 base.py:451(return_faultmodes)\n",
      "       38    0.000    0.000    0.000    0.000 std.py:186(__format__)\n",
      "      146    0.000    0.000    0.000    0.000 __init__.py:1134(__iter__)\n",
      "       90    0.000    0.000    0.000    0.000 mode.py:337(add_fault)\n",
      "      814    0.000    0.000    0.000    0.000 {built-in method sys.getrecursionlimit}\n",
      "     1036    0.000    0.000    0.000    0.000 fromnumeric.py:861(_sort_dispatcher)\n",
      "       74    0.000    0.000    0.003    0.000 timer.py:61(__init__)\n",
      "       38    0.000    0.000    0.019    0.000 std.py:457(print_status)\n",
      "       74    0.000    0.000    0.000    0.000 propagate.py:242(save_helper)\n",
      "        1    0.000    0.000    4.616    4.616 <string>:1(<module>)\n",
      "       73    0.000    0.000    0.001    0.000 base.py:220(init_time_hist)\n",
      "       74    0.000    0.000    0.000    0.000 copy.py:201(_deepcopy_list)\n",
      "       38    0.000    0.000    0.018    0.000 std.py:451(fp_write)\n",
      "       74    0.000    0.000    0.000    0.000 base.py:114(init_flexible_roles)\n",
      "      159    0.000    0.000    0.000    0.000 threading.py:1125(_wait_for_tstate_lock)\n",
      "      148    0.000    0.000    0.000    0.000 base.py:69(get_track)\n",
      "      222    0.000    0.000    0.000    0.000 misc.py:595(_clear_cache)\n",
      "       72    0.000    0.000    0.004    0.000 base.py:395(set_fault_disturbances)\n",
      "      740    0.000    0.000    0.000    0.000 {built-in method builtins.repr}\n",
      "      592    0.000    0.000    0.000    0.000 base.py:65(check_role)\n",
      "       40    0.000    0.000    0.000    0.000 threading.py:283(_acquire_restore)\n",
      "      222    0.000    0.000    0.000    0.000 base.py:603(<listcomp>)\n",
      "       74    0.000    0.000    0.000    0.000 base.py:453(<dictcomp>)\n",
      "       38    0.000    0.000    0.000    0.000 std.py:153(__init__)\n",
      "       73    0.000    0.000    0.000    0.000 propagate.py:119(unpack_sim_kwargs)\n",
      "      292    0.000    0.000    0.000    0.000 {method 'endswith' of 'str' objects}\n",
      "       40    0.000    0.000    0.000    0.000 threading.py:562(__init__)\n",
      "       38    0.000    0.000    0.001    0.000 utils.py:378(disp_len)\n",
      "       40    0.000    0.000    0.002    0.000 iostream.py:577(_schedule_flush)\n",
      "       72    0.000    0.000    0.004    0.000 mode.py:419(get_fault_disturbances)\n",
      "       37    0.000    0.000    0.000    0.000 {built-in method now}\n",
      "       74    0.000    0.000    0.000    0.000 base.py:396(<dictcomp>)\n",
      "      144    0.000    0.000    0.000    0.000 scenario.py:49(get)\n",
      "       38    0.000    0.000    0.000    0.000 {method 'sub' of 're.Pattern' objects}\n",
      "       74    0.000    0.000    0.000    0.000 graph.py:59(__set__)\n",
      "       41    0.000    0.000    0.000    0.000 {method 'release' of '_multiprocessing.SemLock' objects}\n",
      "       40    0.000    0.000    0.000    0.000 iostream.py:550(_is_master_process)\n",
      "      666    0.000    0.000    0.000    0.000 inspect.py:3019(return_annotation)\n",
      "       73    0.000    0.000    0.000    0.000 fromnumeric.py:72(<dictcomp>)\n",
      "       74    0.000    0.000    0.000    0.000 base.py:387(get_indicators)\n",
      "      147    0.000    0.000    0.000    0.000 {built-in method fromkeys}\n",
      "       60    0.000    0.000    0.000    0.000 timer.py:83(inc)\n",
      "      798    0.000    0.000    0.000    0.000 {built-in method builtins.ord}\n",
      "       73    0.000    0.000    0.000    0.000 function.py:643(<listcomp>)\n",
      "       40    0.000    0.000    0.000    0.000 iostream.py:505(parent_header)\n",
      "      195    0.000    0.000    0.000    0.000 time.py:104(__getattr__)\n",
      "       40    0.000    0.000    0.000    0.000 threading.py:1453(current_thread)\n",
      "      120    0.000    0.000    0.000    0.000 threading.py:1168(ident)\n",
      "      370    0.000    0.000    0.000    0.000 base.py:232(update_seed)\n",
      "      148    0.000    0.000    0.000    0.000 copy.py:264(<genexpr>)\n",
      "       38    0.000    0.000    0.001    0.000 utils.py:374(_text_width)\n",
      "       74    0.000    0.000    0.000    0.000 base.py:295(update_seed)\n",
      "        1    0.000    0.000    4.616    4.616 propagate.py:590(fault_sample)\n",
      "      370    0.000    0.000    0.000    0.000 base.py:591(<listcomp>)\n",
      "       10    0.000    0.000    0.000    0.000 ipkernel.py:775(_clean_thread_parent_frames)\n",
      "      313    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}\n",
      "      444    0.000    0.000    0.000    0.000 inspect.py:2726(default)\n",
      "       74    0.000    0.000    0.000    0.000 graph.py:37(__set__)\n",
      "       74    0.000    0.000    0.001    0.000 function.py:617(<listcomp>)\n",
      "      188    0.000    0.000    0.000    0.000 {built-in method builtins.divmod}\n",
      "       72    0.000    0.000    0.000    0.000 base.py:548(<listcomp>)\n",
      "      370    0.000    0.000    0.000    0.000 base.py:525(init_block)\n",
      "        1    0.000    0.000    0.001    0.001 std.py:952(__init__)\n",
      "       77    0.000    0.000    0.000    0.000 {method 'pop' of 'dict' objects}\n",
      "       41    0.000    0.000    0.000    0.000 {method 'acquire' of '_thread.RLock' objects}\n",
      "      147    0.000    0.000    0.000    0.000 {built-in method time.time}\n",
      "        5    0.000    0.000    0.000    0.000 ipkernel.py:790(<setcomp>)\n",
      "       73    0.000    0.000    0.000    0.000 propagate.py:1167(<listcomp>)\n",
      "      160    0.000    0.000    0.000    0.000 threading.py:575(is_set)\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:297(_screen_shape_windows)\n",
      "       40    0.000    0.000    0.000    0.000 threading.py:274(__exit__)\n",
      "       74    0.000    0.000    0.000    0.000 {method 'get' of 'mappingproxy' objects}\n",
      "      119    0.000    0.000    0.000    0.000 {method '__exit__' of '_thread.RLock' objects}\n",
      "        1    0.000    0.000    0.000    0.000 __init__.py:48(create_string_buffer)\n",
      "       38    0.000    0.000    0.000    0.000 utils.py:108(__init__)\n",
      "       40    0.000    0.000    0.000    0.000 threading.py:271(__enter__)\n",
      "       40    0.000    0.000    0.000    0.000 {built-in method nt.getpid}\n",
      "       74    0.000    0.000    0.000    0.000 reportviews.py:426(__call__)\n",
      "        1    0.000    0.000    4.616    4.616 {built-in method builtins.exec}\n",
      "      159    0.000    0.000    0.000    0.000 {method 'append' of 'collections.deque' objects}\n",
      "       40    0.000    0.000    0.000    0.000 threading.py:286(_is_owned)\n",
      "       73    0.000    0.000    0.000    0.000 propagate.py:1191(<listcomp>)\n",
      "       38    0.000    0.000    0.000    0.000 {built-in method builtins.max}\n",
      "        5    0.000    0.000    0.000    0.000 threading.py:1501(enumerate)\n",
      "       40    0.000    0.000    0.000    0.000 threading.py:280(_release_save)\n",
      "       38    0.000    0.000    0.000    0.000 std.py:167(colour)\n",
      "       38    0.000    0.000    0.000    0.000 utils.py:112(__format__)\n",
      "        1    0.000    0.000    0.068    0.068 propagate.py:501(nom_helper)\n",
      "       41    0.000    0.000    0.000    0.000 {method 'release' of '_thread.RLock' objects}\n",
      "       40    0.000    0.000    0.000    0.000 {method 'write' of '_io.StringIO' objects}\n",
      "       74    0.000    0.000    0.000    0.000 parameter.py:105(keys)\n",
      "       40    0.000    0.000    0.000    0.000 {built-in method builtins.abs}\n",
      "       40    0.000    0.000    0.000    0.000 {built-in method _thread.get_ident}\n",
      "       40    0.000    0.000    0.000    0.000 {method 'get' of '_contextvars.ContextVar' objects}\n",
      "       73    0.000    0.000    0.000    0.000 fromnumeric.py:2831(_min_dispatcher)\n",
      "        1    0.000    0.000    0.000    0.000 std.py:663(__new__)\n",
      "        1    0.000    0.000    0.000    0.000 std.py:438(status_printer)\n",
      "        2    0.000    0.000    0.001    0.000 std.py:1265(close)\n",
      "       38    0.000    0.000    0.000    0.000 std.py:163(colour)\n",
      "        1    0.000    0.000    0.000    0.000 result.py:639(get_memory)\n",
      "        3    0.000    0.000    0.000    0.000 _weakrefset.py:63(__iter__)\n",
      "       40    0.000    0.000    0.000    0.000 {method '__enter__' of '_thread.lock' objects}\n",
      "        1    0.000    0.000    0.000    0.000 std.py:686(_decr_instances)\n",
      "       40    0.000    0.000    0.000    0.000 {method '__exit__' of '_thread.lock' objects}\n",
      "        1    0.000    0.000    0.000    0.000 std.py:679(_get_free_pos)\n",
      "       40    0.000    0.000    0.000    0.000 {method 'release' of '_thread.lock' objects}\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:170(<dictcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:213(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 _weakrefset.py:27(__exit__)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:708(process_nominal)\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:266(_supports_unicode)\n",
      "        2    0.000    0.000    0.000    0.000 _weakrefset.py:53(_commit_removals)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:168(pack_run_kwargs)\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method fromtimestamp}\n",
      "        4    0.000    0.000    0.000    0.000 std.py:110(__enter__)\n",
      "        1    0.000    0.000    0.000    0.000 _weakrefset.py:85(add)\n",
      "        1    0.000    0.000    0.000    0.000 functools.py:393(__get__)\n",
      "        2    0.000    0.000    0.000    0.000 utils.py:187(disable_on_exception)\n",
      "        2    0.000    0.000    0.000    0.000 std.py:1286(fp_write)\n",
      "        1    0.000    0.000    0.000    0.000 _weakrefset.py:110(remove)\n",
      "        4    0.000    0.000    0.000    0.000 std.py:113(__exit__)\n",
      "        2    0.000    0.000    0.000    0.000 _weakrefset.py:21(__enter__)\n",
      "        1    0.000    0.000    0.000    0.000 scenario.py:136(__init__)\n",
      "        5    0.000    0.000    0.000    0.000 propagate.py:203(<genexpr>)\n",
      "        1    0.000    0.000    0.000    0.000 sample.py:812(scenarios)\n",
      "        3    0.000    0.000    0.000    0.000 {method 'remove' of 'set' objects}\n",
      "        1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:1207(_handle_fromlist)\n",
      "        1    0.000    0.000    0.000    0.000 std.py:682(<setcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 sample.py:808(times)\n",
      "        4    0.000    0.000    0.000    0.000 utils.py:222(__eq__)\n",
      "        3    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}\n",
      "        3    0.000    0.000    0.000    0.000 utils.py:152(wrapper_setattr)\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:252(_is_utf)\n",
      "        1    0.000    0.000    0.000    0.000 _monitor.py:94(report)\n",
      "        3    0.000    0.000    0.000    0.000 std.py:226(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:156(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'encode' of 'str' objects}\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:125(__eq__)\n",
      "        2    0.000    0.000    0.000    0.000 _weakrefset.py:17(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:201(unpack_mult_kwargs)\n",
      "        2    0.000    0.000    0.000    0.000 std.py:1153(_comparable)\n",
      "        2    0.000    0.000    0.000    0.000 std.py:1157(__hash__)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:879(check_overwrite)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n",
      "        1    0.000    0.000    0.000    0.000 std.py:1147(__del__)\n",
      "        1    0.000    0.000    0.000    0.000 std.py:760(get_lock)\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:282(_screen_shape_wrapper)\n",
      "        2    0.000    0.000    0.000    0.000 {method 'pop' of 'list' objects}\n",
      "        1    0.000    0.000    0.000    0.000 {method 'difference' of 'set' objects}\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:815(close_pool)\n",
      "        1    0.000    0.000    0.000    0.000 tz.py:74(utcoffset)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method _weakref.proxy}\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:139(__getattr__)\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x00007FF8D603C4C0}\n",
      "        1    0.000    0.000    0.000    0.000 scenario.py:138(<dictcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method sys.audit}\n",
      "        1    0.000    0.000    0.000    0.000 std.py:1301(<lambda>)\n",
      "\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "prof = cProfile.run('propagate.fault_sample(mdl, fs)', sort='tottime')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:09:37.577351Z",
     "iopub.status.busy": "2024-08-22T16:09:37.577351Z",
     "iopub.status.idle": "2024-08-22T16:09:43.558978Z",
     "shell.execute_reply": "2024-08-22T16:09:43.558978Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "SCENARIOS COMPLETE: 100%|██████████| 72/72 [00:04<00:00, 15.91it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         10836044 function calls (10523762 primitive calls) in 4.597 seconds\n",
      "\n",
      "   Ordered by: cumulative time\n",
      "\n",
      "   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n",
      "        1    0.000    0.000    4.597    4.597 {built-in method builtins.exec}\n",
      "        1    0.000    0.000    4.597    4.597 <string>:1(<module>)\n",
      "        1    0.000    0.000    4.597    4.597 propagate.py:590(fault_sample)\n",
      "        1    0.002    0.002    4.526    4.526 propagate.py:779(scenlist_helper)\n",
      "       73    0.013    0.000    4.251    0.058 propagate.py:1051(prop_one_scen)\n",
      "       72    0.000    0.000    4.193    0.058 propagate.py:828(exec_scen)\n",
      "     4088    0.010    0.000    4.028    0.001 function.py:736(propagate)\n",
      "     4088    0.149    0.000    3.715    0.001 function.py:776(prop_static)\n",
      "280140/148474    0.173    0.000    2.941    0.000 base.py:627(return_mutables)\n",
      "   280140    0.258    0.000    2.214    0.000 base.py:622(find_mutables)\n",
      "   280212    0.698    0.000    1.630    0.000 base.py:485(get_roles_as_dict)\n",
      "280140/148474    0.223    0.000    1.517    0.000 base.py:638(<listcomp>)\n",
      "   388558    0.291    0.000    0.683    0.000 base.py:457(get_roles)\n",
      "    41059    0.083    0.000    0.583    0.000 function.py:129(__call__)\n",
      "    45147    0.034    0.000    0.466    0.000 base.py:402(set_sub_faults)\n",
      "66031/45221    0.136    0.000    0.435    0.000 base.py:408(get_faults)\n",
      "   388558    0.233    0.000    0.324    0.000 base.py:460(<listcomp>)\n",
      "       74    0.000    0.000    0.315    0.004 base.py:298(new)\n",
      "   280140    0.144    0.000    0.306    0.000 base.py:624(<listcomp>)\n",
      "       74    0.000    0.000    0.289    0.004 function.py:510(__init__)\n",
      "       74    0.001    0.000    0.289    0.004 base.py:84(__init__)\n",
      "       74    0.001    0.000    0.246    0.003 ex_pump.py:471(init_architecture)\n",
      "      666    0.004    0.000    0.240    0.000 base.py:135(add_flex_role_obj)\n",
      "      666    0.001    0.000    0.208    0.000 base.py:929(init_obj)\n",
      "      370    0.001    0.000    0.201    0.001 function.py:543(add_fxn)\n",
      "      370    0.002    0.000    0.200    0.001 base.py:226(add_sim)\n",
      "      370    0.001    0.000    0.185    0.000 function.py:77(__init__)\n",
      "      370    0.003    0.000    0.184    0.000 base.py:495(__init__)\n",
      "     4088    0.006    0.000    0.180    0.000 base.py:226(log_hist)\n",
      "     4088    0.050    0.000    0.173    0.000 history.py:205(log)\n",
      "  814/740    0.002    0.000    0.171    0.000 base.py:155(__init__)\n",
      "   526950    0.113    0.000    0.162    0.000 inspect.py:300(ismethod)\n",
      "   280212    0.115    0.000    0.158    0.000 base.py:503(<dictcomp>)\n",
      "     2902    0.014    0.000    0.157    0.000 mode.py:223(get_fault)\n",
      "     2584    0.001    0.000    0.156    0.000 mode.py:259(get_faults)\n",
      "     2584    0.002    0.000    0.155    0.000 mode.py:263(<dictcomp>)\n",
      "1184/1110    0.002    0.000    0.154    0.000 base.py:233(init_roletypes)\n",
      "     1480    0.012    0.000    0.152    0.000 base.py:264(init_roles)\n",
      "      444    0.002    0.000    0.152    0.000 base.py:195(__init__)\n",
      "  1184968    0.149    0.000    0.149    0.000 {built-in method builtins.getattr}\n",
      "     8258    0.026    0.000    0.142    0.000 ex_pump.py:423(static_behavior)\n",
      "   668770    0.118    0.000    0.118    0.000 base.py:448(get_default_roletypes)\n",
      "     2902    0.004    0.000    0.113    0.000 base.py:428(get_pref_attrs)\n",
      "    82118    0.093    0.000    0.112    0.000 time.py:110(return_mutables)\n",
      "   831106    0.107    0.000    0.107    0.000 {built-in method builtins.hasattr}\n",
      "    82118    0.036    0.000    0.097    0.000 mode.py:220(return_mutables)\n",
      "     5566    0.095    0.000    0.095    0.000 {built-in method builtins.dir}\n",
      "   839544    0.081    0.000    0.093    0.000 {built-in method builtins.isinstance}\n",
      "     8258    0.018    0.000    0.091    0.000 base.py:230(assign)\n",
      "     1850    0.002    0.000    0.089    0.000 base.py:253(find_roletype_initiators)\n",
      "40880/16352    0.059    0.000    0.087    0.000 base.py:54(get_var)\n",
      "    41059    0.021    0.000    0.082    0.000 function.py:115(prop_arch_behaviors)\n",
      "   280212    0.081    0.000    0.081    0.000 base.py:490(<listcomp>)\n",
      "   280212    0.078    0.000    0.078    0.000 base.py:496(<listcomp>)\n",
      "    97156    0.051    0.000    0.071    0.000 copy.py:66(copy)\n",
      "   346613    0.065    0.000    0.070    0.000 base.py:464(get_flex_role_objs)\n",
      "        1    0.000    0.000    0.067    0.067 propagate.py:501(nom_helper)\n",
      "   231048    0.038    0.000    0.063    0.000 base.py:409(return_mutables)\n",
      "     2902    0.043    0.000    0.062    0.000 base.py:431(<dictcomp>)\n",
      "      666    0.005    0.000    0.061    0.000 parameter.py:62(__init__)\n",
      "      518    0.002    0.000    0.057    0.000 base.py:79(__init__)\n",
      "    63231    0.039    0.000    0.057    0.000 mode.py:297(has_fault)\n",
      "     1850    0.038    0.000    0.056    0.000 base.py:254(<listcomp>)\n",
      "    16516    0.018    0.000    0.048    0.000 base.py:267(set_field)\n",
      "   574730    0.046    0.000    0.046    0.000 {method 'startswith' of 'str' objects}\n",
      "      296    0.000    0.000    0.044    0.000 base.py:186(add_flow)\n",
      "      666    0.001    0.000    0.039    0.000 parameter.py:180(check_pickle)\n",
      "      814    0.001    0.000    0.038    0.000 inspect.py:3261(signature)\n",
      "      814    0.001    0.000    0.037    0.000 inspect.py:3007(from_callable)\n",
      " 1628/814    0.006    0.000    0.036    0.000 inspect.py:2435(_signature_from_callable)\n",
      "      814    0.001    0.000    0.034    0.000 base.py:382(init_indicators)\n",
      "     1110    0.003    0.000    0.029    0.000 base.py:582(create_hist)\n",
      "     4088    0.003    0.000    0.029    0.000 __init__.py:130(copy)\n",
      "17776/16740    0.020    0.000    0.028    0.000 copy.py:128(deepcopy)\n",
      "     2830    0.005    0.000    0.028    0.000 mode.py:64(__init__)\n",
      "   363376    0.028    0.000    0.028    0.000 {method 'values' of 'dict' objects}\n",
      "     8255    0.010    0.000    0.027    0.000 ex_pump.py:237(static_behavior)\n",
      "     4310    0.003    0.000    0.026    0.000 __init__.py:65(__init__)\n",
      "       74    0.000    0.000    0.025    0.000 base.py:264(new_params)\n",
      "     3274    0.009    0.000    0.025    0.000 base.py:98(get_true_fields)\n",
      "       73    0.000    0.000    0.025    0.000 std.py:1160(__iter__)\n",
      "   231048    0.024    0.000    0.024    0.000 {built-in method recordclass._dataobject.astuple}\n",
      "       36    0.000    0.000    0.024    0.001 std.py:1198(update)\n",
      "     4236    0.007    0.000    0.024    0.000 <frozen _collections_abc>:717(__ior__)\n",
      "       37    0.000    0.000    0.023    0.001 std.py:1325(refresh)\n",
      "       38    0.000    0.000    0.023    0.001 std.py:1464(display)\n",
      "     8258    0.014    0.000    0.023    0.000 base.py:169(get_field_dict)\n",
      "      814    0.008    0.000    0.022    0.000 inspect.py:2331(_signature_from_function)\n",
      "       73    0.001    0.000    0.022    0.000 propagate.py:1151(get_result)\n",
      "     8185    0.007    0.000    0.021    0.000 ex_pump.py:270(static_behavior)\n",
      "      148    0.001    0.000    0.021    0.000 parameter.py:176(copy_with_vals)\n",
      "       38    0.000    0.000    0.020    0.001 std.py:457(print_status)\n",
      "       78    0.000    0.000    0.019    0.000 utils.py:194(inner)\n",
      "       73    0.002    0.000    0.019    0.000 ex_pump.py:522(find_classification)\n",
      "      370    0.001    0.000    0.019    0.000 base.py:529(create_arch_kwargs)\n",
      "       38    0.000    0.000    0.019    0.001 std.py:451(fp_write)\n",
      "      814    0.011    0.000    0.018    0.000 base.py:384(<listcomp>)\n",
      "      444    0.001    0.000    0.017    0.000 base.py:212(init_hist)\n",
      "1776/1187    0.004    0.000    0.017    0.000 result.py:575(flatten)\n",
      "       40    0.000    0.000    0.016    0.000 iostream.py:592(flush)\n",
      "    21180    0.013    0.000    0.016    0.000 __init__.py:180(add)\n",
      "      296    0.000    0.000    0.015    0.000 base.py:92(create_hist)\n",
      "       40    0.000    0.000    0.015    0.000 threading.py:611(wait)\n",
      "     3274    0.005    0.000    0.015    0.000 base.py:105(<listcomp>)\n",
      "       40    0.000    0.000    0.015    0.000 threading.py:295(wait)\n",
      "   150840    0.014    0.000    0.014    0.000 {method 'get' of 'dict' objects}\n",
      "      319    0.014    0.000    0.014    0.000 {method 'acquire' of '_thread.lock' objects}\n",
      "     1329    0.001    0.000    0.014    0.000 base.py:104(get_timerange)\n",
      "     8176    0.006    0.000    0.014    0.000 ex_pump.py:317(static_behavior)\n",
      "     1329    0.002    0.000    0.013    0.000 base.py:336(gen_timerange)\n",
      "     1183    0.001    0.000    0.013    0.000 base.py:119(get_histrange)\n",
      "     3251    0.003    0.000    0.013    0.000 result.py:167(__init__)\n",
      "    98634    0.013    0.000    0.013    0.000 time.py:111(<genexpr>)\n",
      "       74    0.001    0.000    0.012    0.000 function.py:597(build)\n",
      "    25758    0.006    0.000    0.012    0.000 <frozen abc>:117(__instancecheck__)\n",
      "     8185    0.004    0.000    0.011    0.000 ex_pump.py:296(static_behavior)\n",
      "      518    0.003    0.000    0.011    0.000 base.py:90(find_any_phase_overlap)\n",
      "    90820    0.011    0.000    0.011    0.000 {method 'copy' of 'set' objects}\n",
      "       73    0.000    0.000    0.010    0.000 function.py:621(calc_repaircost)\n",
      "     3251    0.003    0.000    0.010    0.000 __init__.py:1111(__init__)\n",
      "    63231    0.009    0.000    0.009    0.000 {method 'intersection' of 'set' objects}\n",
      "125523/124792    0.008    0.000    0.009    0.000 {built-in method builtins.len}\n",
      "    85963    0.008    0.000    0.008    0.000 {method 'items' of 'dict' objects}\n",
      "    63898    0.008    0.000    0.008    0.000 {built-in method builtins.any}\n",
      "     3330    0.005    0.000    0.008    0.000 inspect.py:2669(__init__)\n",
      "     1329    0.001    0.000    0.008    0.000 fromnumeric.py:3269(round)\n",
      "      444    0.001    0.000    0.008    0.000 time.py:92(__init__)\n",
      "     8258    0.005    0.000    0.008    0.000 ex_pump.py:390(set_faults)\n",
      "      584    0.001    0.000    0.007    0.000 result.py:336(__getattr__)\n",
      "       74    0.000    0.000    0.007    0.000 base.py:451(return_faultmodes)\n",
      "     1628    0.005    0.000    0.007    0.000 inspect.py:2955(__init__)\n",
      "     1329    0.001    0.000    0.007    0.000 fromnumeric.py:53(_wrapfunc)\n",
      "      814    0.002    0.000    0.006    0.000 inspect.py:2037(_signature_bound_method)\n",
      "   144/72    0.001    0.000    0.006    0.000 base.py:366(inject_faults)\n",
      "      666    0.003    0.000    0.006    0.000 inspect.py:3215(__str__)\n",
      "     1036    0.001    0.000    0.006    0.000 fromnumeric.py:865(sort)\n",
      "     8258    0.005    0.000    0.006    0.000 base.py:217(<dictcomp>)\n",
      "     1329    0.006    0.000    0.006    0.000 {method 'round' of 'numpy.ndarray' objects}\n",
      "     3324    0.002    0.000    0.006    0.000 <frozen _collections_abc>:941(update)\n",
      "      666    0.004    0.000    0.006    0.000 parameter.py:136(check_immutable)\n",
      "    25758    0.006    0.000    0.006    0.000 {built-in method _abc._abc_instancecheck}\n",
      "      438    0.002    0.000    0.006    0.000 result.py:400(all_with)\n",
      "     1770    0.001    0.000    0.005    0.000 base.py:213(is_numeric)\n",
      "    31611    0.005    0.000    0.005    0.000 {method 'update' of 'dict' objects}\n",
      "      666    0.004    0.000    0.005    0.000 base.py:125(set_arg_type)\n",
      "    20440    0.005    0.000    0.005    0.000 base.py:260(is_known_mutable)\n",
      "    25256    0.005    0.000    0.005    0.000 {method 'split' of 'str' objects}\n",
      "    12264    0.003    0.000    0.005    0.000 __init__.py:304(__iter__)\n",
      "       74    0.001    0.000    0.005    0.000 function.py:609(construct_graph)\n",
      "    21488    0.004    0.000    0.004    0.000 {method 'update' of 'set' objects}\n",
      "       74    0.000    0.000    0.004    0.000 base.py:257(build)\n",
      "     4366    0.002    0.000    0.004    0.000 parameter.py:108(check_lim)\n",
      "    33370    0.004    0.000    0.004    0.000 {method 'join' of 'str' objects}\n",
      "      814    0.001    0.000    0.004    0.000 inspect.py:3023(replace)\n",
      "       72    0.000    0.000    0.004    0.000 base.py:395(set_fault_disturbances)\n",
      "    15111    0.004    0.000    0.004    0.000 {built-in method builtins.min}\n",
      "       72    0.000    0.000    0.004    0.000 mode.py:419(get_fault_disturbances)\n",
      "      444    0.004    0.000    0.004    0.000 time.py:117(set_timestep)\n",
      "  372/150    0.001    0.000    0.003    0.000 copy.py:227(_deepcopy_dict)\n",
      "     4088    0.003    0.000    0.003    0.000 function.py:682(set_vars)\n",
      "       40    0.000    0.000    0.003    0.000 iostream.py:655(write)\n",
      "     1779    0.002    0.000    0.003    0.000 numerictypes.py:357(issubdtype)\n",
      "     1329    0.003    0.000    0.003    0.000 {built-in method numpy.arange}\n",
      "       74    0.000    0.000    0.003    0.000 timer.py:61(__init__)\n",
      "      444    0.001    0.000    0.003    0.000 mode.py:199(__init__)\n",
      "      119    0.000    0.000    0.003    0.000 iostream.py:259(schedule)\n",
      "    20660    0.003    0.000    0.003    0.000 {built-in method builtins.setattr}\n",
      "     6377    0.002    0.000    0.003    0.000 result.py:324(items)\n",
      "     4599    0.003    0.000    0.003    0.000 __init__.py:1138(__contains__)\n",
      "     8258    0.003    0.000    0.003    0.000 ex_pump.py:414(indicate_over_pressure)\n",
      "     8255    0.003    0.000    0.003    0.000 ex_pump.py:220(set_faults)\n",
      "       40    0.000    0.000    0.003    0.000 iostream.py:577(_schedule_flush)\n",
      "       38    0.000    0.000    0.003    0.000 std.py:1150(__str__)\n",
      "    28432    0.003    0.000    0.003    0.000 {method 'append' of 'list' objects}\n",
      "      666    0.002    0.000    0.002    0.000 parameter.py:157(check_type)\n",
      "      119    0.002    0.000    0.002    0.000 socket.py:621(send)\n",
      "       73    0.000    0.000    0.002    0.000 fromnumeric.py:2836(min)\n",
      "     3330    0.002    0.000    0.002    0.000 enum.py:688(__call__)\n",
      "       38    0.001    0.000    0.002    0.000 std.py:464(format_meter)\n",
      "     8176    0.002    0.000    0.002    0.000 __init__.py:74(__len__)\n",
      "     1036    0.002    0.000    0.002    0.000 {method 'copy' of 'numpy.ndarray' objects}\n",
      "      222    0.001    0.000    0.002    0.000 base.py:416(init_indicator_hist)\n",
      "     2072    0.002    0.000    0.002    0.000 inspect.py:2756(__str__)\n",
      "       73    0.000    0.000    0.002    0.000 fromnumeric.py:71(_wrapreduction)\n",
      "      148    0.000    0.000    0.002    0.000 base.py:361(create_hist)\n",
      "    19782    0.002    0.000    0.002    0.000 {built-in method builtins.id}\n",
      "     4088    0.002    0.000    0.002    0.000 ex_pump.py:518(indicate_on)\n",
      "     2587    0.002    0.000    0.002    0.000 common.py:48(get_sub_include)\n",
      "     4144    0.001    0.000    0.002    0.000 inspect.py:3002(<genexpr>)\n",
      "     1036    0.002    0.000    0.002    0.000 {method 'sort' of 'numpy.ndarray' objects}\n",
      "       73    0.002    0.000    0.002    0.000 {method 'reduce' of 'numpy.ufunc' objects}\n",
      "     3558    0.001    0.000    0.002    0.000 numerictypes.py:283(issubclass_)\n",
      "     3251    0.002    0.000    0.002    0.000 result.py:347(__setattr__)\n",
      "      814    0.001    0.000    0.002    0.000 inspect.py:167(get_annotations)\n",
      "     4088    0.002    0.000    0.002    0.000 ex_pump.py:499(indicate_finished)\n",
      "      296    0.001    0.000    0.001    0.000 history.py:132(init_att)\n",
      "       74    0.000    0.000    0.001    0.000 function.py:602(<listcomp>)\n",
      "    17256    0.001    0.000    0.001    0.000 copy.py:182(_deepcopy_atomic)\n",
      "      814    0.001    0.000    0.001    0.000 inspect.py:735(unwrap)\n",
      "     4088    0.001    0.000    0.001    0.000 base.py:150(get_hist_ind)\n",
      "      184    0.001    0.000    0.001    0.000 {built-in method builtins.sum}\n",
      "    13570    0.001    0.000    0.001    0.000 {built-in method builtins.iter}\n",
      "      370    0.001    0.000    0.001    0.000 base.py:548(check_flows)\n",
      "       74    0.000    0.000    0.001    0.000 <class 'networkx.utils.decorators.argmap'> compilation 4:1(argmap_isolates_1)\n",
      "      370    0.001    0.000    0.001    0.000 function.py:98(update_seed)\n",
      "       72    0.000    0.000    0.001    0.000 base.py:524(get_vars)\n",
      "      370    0.000    0.000    0.001    0.000 base.py:588(is_dynamic)\n",
      "        1    0.000    0.000    0.001    0.001 std.py:952(__init__)\n",
      "     1036    0.001    0.000    0.001    0.000 {built-in method numpy.asanyarray}\n",
      "       74    0.000    0.000    0.001    0.000 backends.py:627(__call__)\n",
      "     8258    0.001    0.000    0.001    0.000 {method 'clear' of 'set' objects}\n",
      "     4088    0.001    0.000    0.001    0.000 propagate.py:1023(check_end_condition)\n",
      "     8176    0.001    0.000    0.001    0.000 {method 'index' of 'list' objects}\n",
      "       38    0.000    0.000    0.001    0.000 utils.py:378(disp_len)\n",
      "    14594    0.001    0.000    0.001    0.000 copy.py:107(_copy_immutable)\n",
      "       74    0.000    0.000    0.001    0.000 isolate.py:42(isolates)\n",
      "      864    0.001    0.000    0.001    0.000 function.py:821(<listcomp>)\n",
      "     1770    0.001    0.000    0.001    0.000 {built-in method numpy.array}\n",
      "     8258    0.001    0.000    0.001    0.000 {method 'copy' of 'list' objects}\n",
      "       74    0.001    0.000    0.001    0.000 graph.py:968(add_edges_from)\n",
      "      148    0.000    0.000    0.001    0.000 state.py:345(init_hist_att)\n",
      "     1776    0.001    0.000    0.001    0.000 result.py:112(check_include_errors)\n",
      "     2357    0.001    0.000    0.001    0.000 __init__.py:1118(__len__)\n",
      "      814    0.001    0.000    0.001    0.000 base.py:208(init_track)\n",
      "       38    0.000    0.000    0.001    0.000 utils.py:374(_text_width)\n",
      "       73    0.000    0.000    0.001    0.000 base.py:130(get_shift)\n",
      "     1482    0.001    0.000    0.001    0.000 {method 'format' of 'str' objects}\n",
      "       74    0.001    0.000    0.001    0.000 history.py:271(cut)\n",
      "        2    0.000    0.000    0.001    0.000 std.py:1265(close)\n",
      "      148    0.000    0.000    0.001    0.000 base.py:348(init_hist_att)\n",
      "     3531    0.001    0.000    0.001    0.000 __init__.py:1128(__setitem__)\n",
      "     7261    0.001    0.000    0.001    0.000 {built-in method builtins.issubclass}\n",
      "      518    0.000    0.000    0.001    0.000 base.py:413(asdict)\n",
      "      370    0.000    0.000    0.001    0.000 __init__.py:201(update)\n",
      "      148    0.001    0.000    0.001    0.000 graph.py:566(add_nodes_from)\n",
      "       73    0.000    0.000    0.001    0.000 base.py:220(init_time_hist)\n",
      "       74    0.000    0.000    0.001    0.000 function.py:605(<listcomp>)\n",
      "     4366    0.001    0.000    0.001    0.000 base.py:173(set_arg_as_type)\n",
      "     2571    0.000    0.000    0.001    0.000 utils.py:375(<genexpr>)\n",
      "       74    0.000    0.000    0.001    0.000 functools.py:981(__get__)\n",
      "       74    0.000    0.000    0.001    0.000 copy.py:259(_reconstruct)\n",
      "      518    0.001    0.000    0.001    0.000 base.py:95(<listcomp>)\n",
      "     8288    0.001    0.000    0.001    0.000 inspect.py:2734(kind)\n",
      "      518    0.001    0.000    0.001    0.000 {built-in method recordclass._dataobject.asdict}\n",
      "     1160    0.000    0.000    0.001    0.000 graph.py:1318(neighbors)\n",
      "     1924    0.001    0.000    0.001    0.000 base.py:51(check_role)\n",
      "       74    0.000    0.000    0.001    0.000 {method '__reduce_ex__' of 'object' objects}\n",
      "     3330    0.001    0.000    0.001    0.000 enum.py:1095(__new__)\n",
      "     1184    0.000    0.000    0.001    0.000 base.py:202(check_slots)\n",
      "     5846    0.001    0.000    0.001    0.000 inspect.py:2722(name)\n",
      "     1628    0.000    0.000    0.001    0.000 inspect.py:378(isfunction)\n",
      "        1    0.000    0.000    0.000    0.000 std.py:438(status_printer)\n",
      "       74    0.000    0.000    0.000    0.000 function.py:617(<listcomp>)\n",
      "      370    0.000    0.000    0.000    0.000 base.py:568(<listcomp>)\n",
      "       40    0.000    0.000    0.000    0.000 threading.py:562(__init__)\n",
      "       74    0.000    0.000    0.000    0.000 isolate.py:85(<genexpr>)\n",
      "      520    0.000    0.000    0.000    0.000 copy.py:243(_keep_alive)\n",
      "     3330    0.000    0.000    0.000    0.000 {method '__contains__' of 'frozenset' objects}\n",
      "      148    0.000    0.000    0.000    0.000 copy.py:264(<genexpr>)\n",
      "      518    0.000    0.000    0.000    0.000 base.py:92(<dictcomp>)\n",
      "      370    0.000    0.000    0.000    0.000 base.py:279(get_flows)\n",
      "       74    0.000    0.000    0.000    0.000 graph.py:332(__init__)\n",
      "      370    0.000    0.000    0.000    0.000 base.py:510(<dictcomp>)\n",
      "      159    0.000    0.000    0.000    0.000 threading.py:1192(is_alive)\n",
      "       74    0.000    0.000    0.000    0.000 function.py:600(<listcomp>)\n",
      "     3330    0.000    0.000    0.000    0.000 {method 'isidentifier' of 'str' objects}\n",
      "       41    0.000    0.000    0.000    0.000 std.py:102(acquire)\n",
      "      584    0.000    0.000    0.000    0.000 result.py:93(get_dict_attr)\n",
      "     2320    0.000    0.000    0.000    0.000 __init__.py:165(__contains__)\n",
      "     1480    0.000    0.000    0.000    0.000 {method 'values' of 'mappingproxy' objects}\n",
      "      217    0.000    0.000    0.000    0.000 std.py:231(__call__)\n",
      "      370    0.000    0.000    0.000    0.000 base.py:536(<dictcomp>)\n",
      "      740    0.000    0.000    0.000    0.000 reportviews.py:529(__iter__)\n",
      "       74    0.000    0.000    0.000    0.000 graph.py:1484(degree)\n",
      "        2    0.000    0.000    0.000    0.000 std.py:1286(fp_write)\n",
      "       75    0.000    0.000    0.000    0.000 std.py:400(format_interval)\n",
      "      666    0.000    0.000    0.000    0.000 inspect.py:292(isclass)\n",
      "       74    0.000    0.000    0.000    0.000 copyreg.py:113(_slotnames)\n",
      "      296    0.000    0.000    0.000    0.000 function.py:606(<listcomp>)\n",
      "       76    0.000    0.000    0.000    0.000 utils.py:273(_is_ascii)\n",
      "       38    0.000    0.000    0.000    0.000 std.py:1446(format_dict)\n",
      "      810    0.000    0.000    0.000    0.000 base.py:257(get_full_name)\n",
      "      370    0.000    0.000    0.000    0.000 base.py:563(<listcomp>)\n",
      "       80    0.000    0.000    0.000    0.000 {built-in method _thread.allocate_lock}\n",
      "     1776    0.000    0.000    0.000    0.000 result.py:121(check_include_error)\n",
      "      296    0.000    0.000    0.000    0.000 {built-in method numpy.empty}\n",
      "      518    0.000    0.000    0.000    0.000 base.py:94(<listcomp>)\n",
      "      656    0.000    0.000    0.000    0.000 __init__.py:1121(__getitem__)\n",
      "       40    0.000    0.000    0.000    0.000 threading.py:243(__init__)\n",
      "     2442    0.000    0.000    0.000    0.000 {built-in method builtins.callable}\n",
      "     2533    0.000    0.000    0.000    0.000 {built-in method unicodedata.east_asian_width}\n",
      "       74    0.000    0.000    0.000    0.000 reportviews.py:419(__init__)\n",
      "      370    0.000    0.000    0.000    0.000 base.py:582(is_static)\n",
      "       41    0.000    0.000    0.000    0.000 std.py:106(release)\n",
      "       74    0.000    0.000    0.000    0.000 base.py:114(init_flexible_roles)\n",
      "      511    0.000    0.000    0.000    0.000 propagate.py:121(<genexpr>)\n",
      "       74    0.000    0.000    0.000    0.000 copy.py:201(_deepcopy_list)\n",
      "       41    0.000    0.000    0.000    0.000 {method 'acquire' of '_multiprocessing.SemLock' objects}\n",
      "     1329    0.000    0.000    0.000    0.000 fromnumeric.py:3265(_round_dispatcher)\n",
      "      148    0.000    0.000    0.000    0.000 base.py:272(<dictcomp>)\n",
      "      293    0.000    0.000    0.000    0.000 result.py:320(keys)\n",
      "      370    0.000    0.000    0.000    0.000 base.py:283(<dictcomp>)\n",
      "      444    0.000    0.000    0.000    0.000 base.py:208(<dictcomp>)\n",
      "       90    0.000    0.000    0.000    0.000 mode.py:337(add_fault)\n",
      "       74    0.000    0.000    0.000    0.000 base.py:387(get_indicators)\n",
      "      159    0.000    0.000    0.000    0.000 threading.py:1125(_wait_for_tstate_lock)\n",
      "     1628    0.000    0.000    0.000    0.000 inspect.py:3015(parameters)\n",
      "       38    0.000    0.000    0.000    0.000 std.py:186(__format__)\n",
      "      146    0.000    0.000    0.000    0.000 __init__.py:1134(__iter__)\n",
      "       74    0.000    0.000    0.000    0.000 propagate.py:242(save_helper)\n",
      "     1036    0.000    0.000    0.000    0.000 fromnumeric.py:861(_sort_dispatcher)\n",
      "      814    0.000    0.000    0.000    0.000 {built-in method sys.getrecursionlimit}\n",
      "      144    0.000    0.000    0.000    0.000 scenario.py:49(get)\n",
      "      148    0.000    0.000    0.000    0.000 base.py:69(get_track)\n",
      "      592    0.000    0.000    0.000    0.000 base.py:65(check_role)\n",
      "      222    0.000    0.000    0.000    0.000 misc.py:595(_clear_cache)\n",
      "       74    0.000    0.000    0.000    0.000 base.py:396(<dictcomp>)\n",
      "       10    0.000    0.000    0.000    0.000 ipkernel.py:775(_clean_thread_parent_frames)\n",
      "      119    0.000    0.000    0.000    0.000 iostream.py:138(_event_pipe)\n",
      "       73    0.000    0.000    0.000    0.000 propagate.py:119(unpack_sim_kwargs)\n",
      "       40    0.000    0.000    0.000    0.000 iostream.py:550(_is_master_process)\n",
      "       38    0.000    0.000    0.000    0.000 std.py:153(__init__)\n",
      "       40    0.000    0.000    0.000    0.000 threading.py:283(_acquire_restore)\n",
      "      740    0.000    0.000    0.000    0.000 {built-in method builtins.repr}\n",
      "      222    0.000    0.000    0.000    0.000 base.py:603(<listcomp>)\n",
      "       74    0.000    0.000    0.000    0.000 base.py:453(<dictcomp>)\n",
      "       74    0.000    0.000    0.000    0.000 base.py:295(update_seed)\n",
      "      292    0.000    0.000    0.000    0.000 {method 'endswith' of 'str' objects}\n",
      "       40    0.000    0.000    0.000    0.000 iostream.py:505(parent_header)\n",
      "      798    0.000    0.000    0.000    0.000 {built-in method builtins.ord}\n",
      "       37    0.000    0.000    0.000    0.000 {built-in method now}\n",
      "       41    0.000    0.000    0.000    0.000 {method 'release' of '_multiprocessing.SemLock' objects}\n",
      "       38    0.000    0.000    0.000    0.000 {method 'sub' of 're.Pattern' objects}\n",
      "       40    0.000    0.000    0.000    0.000 threading.py:1453(current_thread)\n",
      "       74    0.000    0.000    0.000    0.000 graph.py:59(__set__)\n",
      "      666    0.000    0.000    0.000    0.000 inspect.py:3019(return_annotation)\n",
      "       73    0.000    0.000    0.000    0.000 fromnumeric.py:72(<dictcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:297(_screen_shape_windows)\n",
      "      147    0.000    0.000    0.000    0.000 {built-in method fromkeys}\n",
      "       60    0.000    0.000    0.000    0.000 timer.py:83(inc)\n",
      "       73    0.000    0.000    0.000    0.000 function.py:643(<listcomp>)\n",
      "      195    0.000    0.000    0.000    0.000 time.py:104(__getattr__)\n",
      "        1    0.000    0.000    0.000    0.000 result.py:639(get_memory)\n",
      "      370    0.000    0.000    0.000    0.000 base.py:232(update_seed)\n",
      "        5    0.000    0.000    0.000    0.000 ipkernel.py:790(<setcomp>)\n",
      "      120    0.000    0.000    0.000    0.000 threading.py:1168(ident)\n",
      "        1    0.000    0.000    0.000    0.000 std.py:686(_decr_instances)\n",
      "      313    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}\n",
      "      370    0.000    0.000    0.000    0.000 base.py:591(<listcomp>)\n",
      "      444    0.000    0.000    0.000    0.000 inspect.py:2726(default)\n",
      "       40    0.000    0.000    0.000    0.000 threading.py:274(__exit__)\n",
      "      188    0.000    0.000    0.000    0.000 {built-in method builtins.divmod}\n",
      "       74    0.000    0.000    0.000    0.000 graph.py:37(__set__)\n",
      "        1    0.000    0.000    0.000    0.000 std.py:663(__new__)\n",
      "      370    0.000    0.000    0.000    0.000 base.py:525(init_block)\n",
      "       72    0.000    0.000    0.000    0.000 base.py:548(<listcomp>)\n",
      "      160    0.000    0.000    0.000    0.000 threading.py:575(is_set)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:708(process_nominal)\n",
      "      147    0.000    0.000    0.000    0.000 {built-in method time.time}\n",
      "       77    0.000    0.000    0.000    0.000 {method 'pop' of 'dict' objects}\n",
      "       41    0.000    0.000    0.000    0.000 {method 'acquire' of '_thread.RLock' objects}\n",
      "       73    0.000    0.000    0.000    0.000 propagate.py:1167(<listcomp>)\n",
      "       40    0.000    0.000    0.000    0.000 threading.py:286(_is_owned)\n",
      "       40    0.000    0.000    0.000    0.000 threading.py:271(__enter__)\n",
      "        1    0.000    0.000    0.000    0.000 __init__.py:48(create_string_buffer)\n",
      "       74    0.000    0.000    0.000    0.000 {method 'get' of 'mappingproxy' objects}\n",
      "       38    0.000    0.000    0.000    0.000 utils.py:108(__init__)\n",
      "      119    0.000    0.000    0.000    0.000 {method '__exit__' of '_thread.RLock' objects}\n",
      "       40    0.000    0.000    0.000    0.000 {built-in method nt.getpid}\n",
      "        4    0.000    0.000    0.000    0.000 std.py:110(__enter__)\n",
      "       74    0.000    0.000    0.000    0.000 reportviews.py:426(__call__)\n",
      "        3    0.000    0.000    0.000    0.000 _weakrefset.py:63(__iter__)\n",
      "       40    0.000    0.000    0.000    0.000 threading.py:280(_release_save)\n",
      "      159    0.000    0.000    0.000    0.000 {method 'append' of 'collections.deque' objects}\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:168(pack_run_kwargs)\n",
      "       38    0.000    0.000    0.000    0.000 {built-in method builtins.max}\n",
      "       73    0.000    0.000    0.000    0.000 propagate.py:1191(<listcomp>)\n",
      "        4    0.000    0.000    0.000    0.000 std.py:113(__exit__)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:170(<dictcomp>)\n",
      "        5    0.000    0.000    0.000    0.000 threading.py:1501(enumerate)\n",
      "       40    0.000    0.000    0.000    0.000 {method 'write' of '_io.StringIO' objects}\n",
      "        1    0.000    0.000    0.000    0.000 std.py:679(_get_free_pos)\n",
      "       38    0.000    0.000    0.000    0.000 std.py:167(colour)\n",
      "       38    0.000    0.000    0.000    0.000 utils.py:112(__format__)\n",
      "       74    0.000    0.000    0.000    0.000 parameter.py:105(keys)\n",
      "       40    0.000    0.000    0.000    0.000 {built-in method builtins.abs}\n",
      "       40    0.000    0.000    0.000    0.000 {built-in method _thread.get_ident}\n",
      "       40    0.000    0.000    0.000    0.000 {method 'get' of '_contextvars.ContextVar' objects}\n",
      "        2    0.000    0.000    0.000    0.000 _weakrefset.py:27(__exit__)\n",
      "       41    0.000    0.000    0.000    0.000 {method 'release' of '_thread.RLock' objects}\n",
      "        1    0.000    0.000    0.000    0.000 _weakrefset.py:110(remove)\n",
      "        1    0.000    0.000    0.000    0.000 std.py:682(<setcomp>)\n",
      "       73    0.000    0.000    0.000    0.000 fromnumeric.py:2831(_min_dispatcher)\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:213(__init__)\n",
      "       38    0.000    0.000    0.000    0.000 std.py:163(colour)\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:266(_supports_unicode)\n",
      "        3    0.000    0.000    0.000    0.000 {method 'remove' of 'set' objects}\n",
      "       40    0.000    0.000    0.000    0.000 {method '__enter__' of '_thread.lock' objects}\n",
      "        2    0.000    0.000    0.000    0.000 _weakrefset.py:53(_commit_removals)\n",
      "       40    0.000    0.000    0.000    0.000 {method '__exit__' of '_thread.lock' objects}\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:252(_is_utf)\n",
      "       40    0.000    0.000    0.000    0.000 {method 'release' of '_thread.lock' objects}\n",
      "        1    0.000    0.000    0.000    0.000 _weakrefset.py:85(add)\n",
      "        1    0.000    0.000    0.000    0.000 functools.py:393(__get__)\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:125(__eq__)\n",
      "        4    0.000    0.000    0.000    0.000 utils.py:222(__eq__)\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method fromtimestamp}\n",
      "        2    0.000    0.000    0.000    0.000 _weakrefset.py:21(__enter__)\n",
      "        1    0.000    0.000    0.000    0.000 scenario.py:136(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 utils.py:187(disable_on_exception)\n",
      "        3    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}\n",
      "        1    0.000    0.000    0.000    0.000 sample.py:812(scenarios)\n",
      "        1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:1207(_handle_fromlist)\n",
      "        5    0.000    0.000    0.000    0.000 propagate.py:203(<genexpr>)\n",
      "        2    0.000    0.000    0.000    0.000 std.py:1153(_comparable)\n",
      "        2    0.000    0.000    0.000    0.000 {method 'pop' of 'list' objects}\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:156(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 std.py:1157(__hash__)\n",
      "        1    0.000    0.000    0.000    0.000 _monitor.py:94(report)\n",
      "        3    0.000    0.000    0.000    0.000 utils.py:152(wrapper_setattr)\n",
      "        2    0.000    0.000    0.000    0.000 _weakrefset.py:17(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'encode' of 'str' objects}\n",
      "        1    0.000    0.000    0.000    0.000 sample.py:808(times)\n",
      "        1    0.000    0.000    0.000    0.000 std.py:1147(__del__)\n",
      "        3    0.000    0.000    0.000    0.000 std.py:226(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:201(unpack_mult_kwargs)\n",
      "        1    0.000    0.000    0.000    0.000 std.py:760(get_lock)\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:282(_screen_shape_wrapper)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'difference' of 'set' objects}\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:879(check_overwrite)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:815(close_pool)\n",
      "        1    0.000    0.000    0.000    0.000 utils.py:139(__getattr__)\n",
      "        1    0.000    0.000    0.000    0.000 tz.py:74(utcoffset)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method _weakref.proxy}\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x00007FF8D603C4C0}\n",
      "        1    0.000    0.000    0.000    0.000 std.py:1301(<lambda>)\n",
      "        1    0.000    0.000    0.000    0.000 scenario.py:138(<dictcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method sys.audit}\n",
      "\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "prof = cProfile.run('propagate.fault_sample(mdl, fs)', sort='cumtime')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T16:09:43.558978Z",
     "iopub.status.busy": "2024-08-22T16:09:43.558978Z",
     "iopub.status.idle": "2024-08-22T16:09:43.580095Z",
     "shell.execute_reply": "2024-08-22T16:09:43.580095Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         8256 function calls (8239 primitive calls) in 0.005 seconds\n",
      "\n",
      "   Ordered by: internal time\n",
      "\n",
      "   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n",
      "       36    0.001    0.000    0.001    0.000 {built-in method builtins.dir}\n",
      "       25    0.001    0.000    0.001    0.000 base.py:254(<listcomp>)\n",
      "     4341    0.000    0.000    0.000    0.000 {method 'startswith' of 'str' objects}\n",
      "       20    0.000    0.000    0.003    0.000 base.py:264(init_roles)\n",
      "       11    0.000    0.000    0.000    0.000 base.py:384(<listcomp>)\n",
      "       12    0.000    0.000    0.000    0.000 {method 'sort' of 'numpy.ndarray' objects}\n",
      "       10    0.000    0.000    0.000    0.000 inspect.py:2331(_signature_from_function)\n",
      "       15    0.000    0.000    0.000    0.000 {method 'round' of 'numpy.ndarray' objects}\n",
      "       12    0.000    0.000    0.000    0.000 {method 'copy' of 'numpy.ndarray' objects}\n",
      "        6    0.000    0.000    0.000    0.000 base.py:90(find_any_phase_overlap)\n",
      "    20/10    0.000    0.000    0.000    0.000 inspect.py:2435(_signature_from_callable)\n",
      "       15    0.000    0.000    0.000    0.000 {built-in method numpy.arange}\n",
      "        6    0.000    0.000    0.000    0.000 time.py:117(set_timestep)\n",
      "      338    0.000    0.000    0.000    0.000 {built-in method builtins.getattr}\n",
      "       10    0.000    0.000    0.001    0.000 inspect.py:3007(from_callable)\n",
      "        8    0.000    0.000    0.001    0.000 parameter.py:62(__init__)\n",
      "       42    0.000    0.000    0.000    0.000 inspect.py:2669(__init__)\n",
      "       20    0.000    0.000    0.000    0.000 inspect.py:2955(__init__)\n",
      "      520    0.000    0.000    0.000    0.000 {built-in method builtins.isinstance}\n",
      "        9    0.000    0.000    0.004    0.000 base.py:135(add_flex_role_obj)\n",
      "        5    0.000    0.000    0.003    0.001 base.py:495(__init__)\n",
      "       45    0.000    0.000    0.000    0.000 parameter.py:108(check_lim)\n",
      "        8    0.000    0.000    0.000    0.000 parameter.py:136(check_immutable)\n",
      "    21/16    0.000    0.000    0.000    0.000 result.py:575(flatten)\n",
      "        6    0.000    0.000    0.003    0.000 base.py:195(__init__)\n",
      "        1    0.000    0.000    0.005    0.005 {built-in method builtins.exec}\n",
      "       15    0.000    0.000    0.000    0.000 base.py:582(create_hist)\n",
      "        8    0.000    0.000    0.000    0.000 base.py:125(set_arg_type)\n",
      "    11/10    0.000    0.000    0.003    0.000 base.py:155(__init__)\n",
      "        8    0.000    0.000    0.000    0.000 inspect.py:3215(__str__)\n",
      "    16/15    0.000    0.000    0.003    0.000 base.py:233(init_roletypes)\n",
      "       34    0.000    0.000    0.000    0.000 result.py:167(__init__)\n",
      "       99    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}\n",
      "       15    0.000    0.000    0.000    0.000 base.py:336(gen_timerange)\n",
      "       56    0.000    0.000    0.000    0.000 {built-in method builtins.setattr}\n",
      "       34    0.000    0.000    0.000    0.000 __init__.py:1111(__init__)\n",
      "       25    0.000    0.000    0.001    0.000 base.py:253(find_roletype_initiators)\n",
      "        5    0.000    0.000    0.004    0.001 base.py:226(add_sim)\n",
      "       10    0.000    0.000    0.000    0.000 inspect.py:2037(_signature_bound_method)\n",
      "       12    0.000    0.000    0.000    0.000 {built-in method numpy.asanyarray}\n",
      "       34    0.000    0.000    0.000    0.000 <frozen _collections_abc>:941(update)\n",
      "       18    0.000    0.000    0.000    0.000 {method 'format' of 'str' objects}\n",
      "        9    0.000    0.000    0.004    0.000 base.py:929(init_obj)\n",
      "       12    0.000    0.000    0.000    0.000 fromnumeric.py:865(sort)\n",
      "       16    0.000    0.000    0.000    0.000 base.py:457(get_roles)\n",
      "        8    0.000    0.000    0.000    0.000 parameter.py:157(check_type)\n",
      "        6    0.000    0.000    0.001    0.000 base.py:79(__init__)\n",
      "       26    0.000    0.000    0.000    0.000 inspect.py:2756(__str__)\n",
      "        6    0.000    0.000    0.000    0.000 base.py:105(<listcomp>)\n",
      "      228    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}\n",
      "       32    0.000    0.000    0.000    0.000 common.py:48(get_sub_include)\n",
      "        6    0.000    0.000    0.000    0.000 time.py:92(__init__)\n",
      "       42    0.000    0.000    0.000    0.000 enum.py:688(__call__)\n",
      "        6    0.000    0.000    0.000    0.000 mode.py:199(__init__)\n",
      "       34    0.000    0.000    0.000    0.000 result.py:347(__setattr__)\n",
      "       11    0.000    0.000    0.001    0.000 base.py:382(init_indicators)\n",
      "      246    0.000    0.000    0.000    0.000 {built-in method builtins.len}\n",
      "        8    0.000    0.000    0.001    0.000 parameter.py:180(check_pickle)\n",
      "        5    0.000    0.000    0.004    0.001 function.py:543(add_fxn)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:529(create_arch_kwargs)\n",
      "        6    0.000    0.000    0.000    0.000 base.py:98(get_true_fields)\n",
      "       16    0.000    0.000    0.000    0.000 base.py:460(<listcomp>)\n",
      "       52    0.000    0.000    0.000    0.000 inspect.py:3002(<genexpr>)\n",
      "       13    0.000    0.000    0.000    0.000 numerictypes.py:357(issubdtype)\n",
      "        5    0.000    0.000    0.003    0.001 function.py:77(__init__)\n",
      "       15    0.000    0.000    0.000    0.000 fromnumeric.py:3269(round)\n",
      "       11    0.000    0.000    0.000    0.000 base.py:208(init_track)\n",
      "       15    0.000    0.000    0.000    0.000 fromnumeric.py:53(_wrapfunc)\n",
      "       10    0.000    0.000    0.000    0.000 inspect.py:735(unwrap)\n",
      "       10    0.000    0.000    0.000    0.000 inspect.py:167(get_annotations)\n",
      "       47    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}\n",
      "        1    0.000    0.000    0.005    0.005 <string>:1(<module>)\n",
      "       47    0.000    0.000    0.000    0.000 <frozen abc>:117(__instancecheck__)\n",
      "       15    0.000    0.000    0.000    0.000 base.py:119(get_histrange)\n",
      "       13    0.000    0.000    0.000    0.000 base.py:213(is_numeric)\n",
      "       13    0.000    0.000    0.000    0.000 {built-in method numpy.array}\n",
      "        4    0.000    0.000    0.000    0.000 history.py:132(init_att)\n",
      "       15    0.000    0.000    0.000    0.000 base.py:104(get_timerange)\n",
      "        6    0.000    0.000    0.000    0.000 base.py:212(init_hist)\n",
      "       26    0.000    0.000    0.000    0.000 numerictypes.py:283(issubclass_)\n",
      "       12    0.000    0.000    0.000    0.000 copy.py:66(copy)\n",
      "       10    0.000    0.000    0.000    0.000 inspect.py:3023(replace)\n",
      "        1    0.000    0.000    0.000    0.000 graph.py:968(add_edges_from)\n",
      "       65    0.000    0.000    0.000    0.000 {built-in method builtins.issubclass}\n",
      "        5    0.000    0.000    0.000    0.000 base.py:548(check_flows)\n",
      "       10    0.000    0.000    0.000    0.000 __init__.py:180(add)\n",
      "       26    0.000    0.000    0.000    0.000 base.py:51(check_role)\n",
      "        5    0.000    0.000    0.000    0.000 function.py:98(update_seed)\n",
      "       21    0.000    0.000    0.000    0.000 result.py:112(check_include_errors)\n",
      "       97    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}\n",
      "        2    0.000    0.000    0.000    0.000 graph.py:566(add_nodes_from)\n",
      "        1    0.000    0.000    0.004    0.004 ex_pump.py:471(init_architecture)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:464(get_flex_role_objs)\n",
      "        1    0.000    0.000    0.005    0.005 base.py:84(__init__)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:568(<listcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 function.py:609(construct_graph)\n",
      "       10    0.000    0.000    0.001    0.000 inspect.py:3261(signature)\n",
      "       70    0.000    0.000    0.000    0.000 {method 'items' of 'dict' objects}\n",
      "        6    0.000    0.000    0.000    0.000 base.py:95(<listcomp>)\n",
      "      104    0.000    0.000    0.000    0.000 inspect.py:2734(kind)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:588(is_dynamic)\n",
      "       21    0.000    0.000    0.000    0.000 result.py:324(items)\n",
      "        1    0.000    0.000    0.000    0.000 function.py:597(build)\n",
      "       16    0.000    0.000    0.000    0.000 base.py:202(check_slots)\n",
      "       21    0.000    0.000    0.000    0.000 __init__.py:1118(__len__)\n",
      "       45    0.000    0.000    0.000    0.000 base.py:173(set_arg_as_type)\n",
      "        3    0.000    0.000    0.000    0.000 base.py:416(init_indicator_hist)\n",
      "       74    0.000    0.000    0.000    0.000 inspect.py:2722(name)\n",
      "        1    0.000    0.000    0.000    0.000 functools.py:981(__get__)\n",
      "        1    0.000    0.000    0.005    0.005 function.py:510(__init__)\n",
      "       42    0.000    0.000    0.000    0.000 enum.py:1095(__new__)\n",
      "        5    0.000    0.000    0.000    0.000 {built-in method recordclass._dataobject.asdict}\n",
      "        9    0.000    0.000    0.000    0.000 base.py:257(get_full_name)\n",
      "       16    0.000    0.000    0.000    0.000 base.py:448(get_default_roletypes)\n",
      "        4    0.000    0.000    0.001    0.000 base.py:186(add_flow)\n",
      "        5    0.000    0.000    0.000    0.000 __init__.py:201(update)\n",
      "       20    0.000    0.000    0.000    0.000 inspect.py:378(isfunction)\n",
      "       42    0.000    0.000    0.000    0.000 {method '__contains__' of 'frozenset' objects}\n",
      "       42    0.000    0.000    0.000    0.000 {method 'isidentifier' of 'str' objects}\n",
      "        1    0.000    0.000    0.000    0.000 base.py:257(build)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:510(<dictcomp>)\n",
      "        6    0.000    0.000    0.000    0.000 base.py:92(<dictcomp>)\n",
      "       10    0.000    0.000    0.000    0.000 reportviews.py:529(__iter__)\n",
      "        1    0.000    0.000    0.000    0.000 graph.py:332(__init__)\n",
      "       17    0.000    0.000    0.000    0.000 __init__.py:1128(__setitem__)\n",
      "       18    0.000    0.000    0.000    0.000 {method 'values' of 'mappingproxy' objects}\n",
      "        2    0.000    0.000    0.000    0.000 base.py:361(create_hist)\n",
      "        6    0.000    0.000    0.000    0.000 base.py:208(<dictcomp>)\n",
      "        9    0.000    0.000    0.000    0.000 inspect.py:292(isclass)\n",
      "       31    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}\n",
      "        5    0.000    0.000    0.000    0.000 base.py:279(get_flows)\n",
      "        4    0.000    0.000    0.000    0.000 base.py:92(create_hist)\n",
      "        1    0.000    0.000    0.000    0.000 function.py:605(<listcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 isolate.py:42(isolates)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:563(<listcomp>)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:536(<dictcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 function.py:600(<listcomp>)\n",
      "       21    0.000    0.000    0.000    0.000 result.py:121(check_include_error)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:413(asdict)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:283(<dictcomp>)\n",
      "        4    0.000    0.000    0.000    0.000 function.py:606(<listcomp>)\n",
      "        2    0.000    0.000    0.000    0.000 base.py:348(init_hist_att)\n",
      "        1    0.000    0.000    0.000    0.000 reportviews.py:419(__init__)\n",
      "       30    0.000    0.000    0.000    0.000 {built-in method builtins.callable}\n",
      "        1    0.000    0.000    0.000    0.000 function.py:602(<listcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 <class 'networkx.utils.decorators.argmap'> compilation 4:1(argmap_isolates_1)\n",
      "        4    0.000    0.000    0.000    0.000 {built-in method numpy.empty}\n",
      "        2    0.000    0.000    0.000    0.000 state.py:345(init_hist_att)\n",
      "        1    0.000    0.000    0.000    0.000 timer.py:61(__init__)\n",
      "        6    0.000    0.000    0.000    0.000 base.py:94(<listcomp>)\n",
      "        2    0.000    0.000    0.000    0.000 base.py:272(<dictcomp>)\n",
      "        3    0.000    0.000    0.000    0.000 __init__.py:65(__init__)\n",
      "        8    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}\n",
      "        4    0.000    0.000    0.000    0.000 graph.py:1318(neighbors)\n",
      "        1    0.000    0.000    0.000    0.000 isolate.py:85(<genexpr>)\n",
      "       15    0.000    0.000    0.000    0.000 fromnumeric.py:3265(_round_dispatcher)\n",
      "        8    0.000    0.000    0.000    0.000 base.py:65(check_role)\n",
      "       12    0.000    0.000    0.000    0.000 {method 'values' of 'dict' objects}\n",
      "        5    0.000    0.000    0.000    0.000 base.py:582(is_static)\n",
      "       20    0.000    0.000    0.000    0.000 inspect.py:3015(parameters)\n",
      "       10    0.000    0.000    0.000    0.000 {built-in method sys.getrecursionlimit}\n",
      "        1    0.000    0.000    0.000    0.000 base.py:114(init_flexible_roles)\n",
      "       12    0.000    0.000    0.000    0.000 fromnumeric.py:861(_sort_dispatcher)\n",
      "       10    0.000    0.000    0.000    0.000 {built-in method builtins.id}\n",
      "        2    0.000    0.000    0.000    0.000 <frozen _collections_abc>:717(__ior__)\n",
      "        1    0.000    0.000    0.000    0.000 backends.py:627(__call__)\n",
      "        3    0.000    0.000    0.000    0.000 misc.py:595(_clear_cache)\n",
      "        1    0.000    0.000    0.000    0.000 graph.py:1484(degree)\n",
      "        2    0.000    0.000    0.000    0.000 base.py:69(get_track)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:396(<dictcomp>)\n",
      "        9    0.000    0.000    0.000    0.000 {built-in method builtins.any}\n",
      "        3    0.000    0.000    0.000    0.000 base.py:603(<listcomp>)\n",
      "       10    0.000    0.000    0.000    0.000 {built-in method builtins.repr}\n",
      "        1    0.000    0.000    0.000    0.000 base.py:387(get_indicators)\n",
      "        8    0.000    0.000    0.000    0.000 inspect.py:3019(return_annotation)\n",
      "        8    0.000    0.000    0.000    0.000 __init__.py:165(__contains__)\n",
      "        6    0.000    0.000    0.000    0.000 {method 'copy' of 'set' objects}\n",
      "        1    0.000    0.000    0.000    0.000 graph.py:59(__set__)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:232(update_seed)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:591(<listcomp>)\n",
      "        5    0.000    0.000    0.000    0.000 base.py:525(init_block)\n",
      "        1    0.000    0.000    0.000    0.000 function.py:617(<listcomp>)\n",
      "        6    0.000    0.000    0.000    0.000 copy.py:107(_copy_immutable)\n",
      "        4    0.000    0.000    0.000    0.000 {built-in method builtins.iter}\n",
      "        1    0.000    0.000    0.000    0.000 graph.py:37(__set__)\n",
      "        1    0.000    0.000    0.000    0.000 base.py:295(update_seed)\n",
      "        2    0.000    0.000    0.000    0.000 __init__.py:1121(__getitem__)\n",
      "        6    0.000    0.000    0.000    0.000 inspect.py:2726(default)\n",
      "        1    0.000    0.000    0.000    0.000 reportviews.py:426(__call__)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n",
      "        1    0.000    0.000    0.000    0.000 {method 'lower' of 'str' objects}\n",
      "        1    0.000    0.000    0.000    0.000 {method '__exit__' of '_thread.RLock' objects}\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "prof = cProfile.run('Pump()', sort='tottime')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown, running this model is not particularly computationally expensive. As a result, the majority of the computational expense is not actually because of the simulation itself, but because of the way the model is simulated:\n",
    "- the majority is spent simulating the model\n",
    "- a certain amount is spent re-initalizing the model at first so that the model object can be re-used without worrying about it being modified by any previous executions \n",
    "- another amount is spent recording the model history, wich can increase or decrease depending on tracking options (note the low number of values tracked in the pump model by default)\n",
    "\n",
    "\n",
    "\n",
    "This is mostly because the model itself is computationally inexpensive. However, this example shows how one might easily speed up simulation for optimization or large-n simulations--avoiding unnecessary re-initialization, tracking fewer model states, or speeding up model execution. This can be done in the following ways:\n",
    "- using the options for `track` (as mentioned above) to track fewer states (reducing time spent recording the history)\n",
    "- using `protect` options, which specifies whether the model used is re-instantiated for the simulation (`True`) or used directly (`False`)\n",
    "- speeding up the model by using `dynamic_behavior()` methods instead of `static_behavior()` or `behavior()` methods (which can halve the simulation time at the expense of undirected propagation)\n",
    "- speeding up the model by using a longer global timestep (`'tstep'` in `modelparams`) or by speeding up paricularly expensive Function dynamic behaviors by setting (`dt=local_tstep`) in the `SimParam`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "fmdtools",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
