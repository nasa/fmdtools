{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using Parallel Computing in fmdtools\n",
    "\n",
    "This notebook will discuss how to use parallel programming in fmdtools, including:\n",
    "- how to set up a model for parallelism\n",
    "- syntax for using parallelism in simulation functions\n",
    "- considerations for optimizing computational performance in a model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:09:54.367608Z",
     "iopub.status.busy": "2023-11-02T19:09:54.367608Z",
     "iopub.status.idle": "2023-11-02T19:09:55.389421Z",
     "shell.execute_reply": "2023-11-02T19:09:55.389421Z"
    }
   },
   "outputs": [],
   "source": [
    "from ex_pump import * \n",
    "from fmdtools.sim.sample import FaultDomain, FaultSample\n",
    "import fmdtools.sim.propagate as propagate\n",
    "import fmdtools.analyze as an"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This notebook uses the pump example (see `ex_pump.py`) to illustrate the use of parallelism in fmdtools. This is fairly simple model, and thus it should be noted that there may be considerations with more complex models which may not be adequately covered here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:09:55.391560Z",
     "iopub.status.busy": "2023-11-02T19:09:55.391560Z",
     "iopub.status.idle": "2023-11-02T19:09:55.409999Z",
     "shell.execute_reply": "2023-11-02T19:09:55.409861Z"
    }
   },
   "outputs": [],
   "source": [
    "mdl = Pump()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:09:55.412010Z",
     "iopub.status.busy": "2023-11-02T19:09:55.412010Z",
     "iopub.status.idle": "2023-11-02T19:09:55.430163Z",
     "shell.execute_reply": "2023-11-02T19:09:55.430042Z"
    }
   },
   "outputs": [],
   "source": [
    "result, mdlhist = propagate.nominal(mdl, desired_result='graph')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:09:55.432269Z",
     "iopub.status.busy": "2023-11-02T19:09:55.432269Z",
     "iopub.status.idle": "2023-11-02T19:09:55.657676Z",
     "shell.execute_reply": "2023-11-02T19:09:55.657676Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = result.graph.draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:09:55.659777Z",
     "iopub.status.busy": "2023-11-02T19:09:55.659777Z",
     "iopub.status.idle": "2023-11-02T19:09:55.824403Z",
     "shell.execute_reply": "2023-11-02T19:09:55.824403Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x200 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = mdlhist.plot_line('flows.ee_1.s.current', 'flows.wat_2.s.flowrate')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Checks\n",
    "\n",
    "Before attempting to leverage parallelism in model execution, it can be helpful to check whether a model is compatible with python parallel computing libraries. In order for a model to be parallelized, it must be compatible with [pickling](https://docs.python.org/3/library/pickle.html#:~:text=%E2%80%9CPickling%E2%80%9D%20is%20the%20process%20whereby,back%20into%20an%20object%20hierarchy.)--python's method of data serialization. This is used in parallel programming methods to copy the model from the main process thread to the seperate processes of the pool.\n",
    "\n",
    "fmdtools has two methods to check whether a model can be pickled, `check_pickleability` and `check_model_pickleability`. The main difference between these is that `check_pickleability` works for all objects (e.g. functions and flows), while `check_model_pickleability` gives more information for an overall model structure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:09:55.826412Z",
     "iopub.status.busy": "2023-11-02T19:09:55.826412Z",
     "iopub.status.idle": "2023-11-02T19:09:55.844591Z",
     "shell.execute_reply": "2023-11-02T19:09:55.844591Z"
    }
   },
   "outputs": [],
   "source": [
    "from fmdtools.define.common import check_pickleability\n",
    "from fmdtools.define.model import check_model_pickleability"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:09:55.846600Z",
     "iopub.status.busy": "2023-11-02T19:09:55.846600Z",
     "iopub.status.idle": "2023-11-02T19:09:55.864675Z",
     "shell.execute_reply": "2023-11-02T19:09:55.864675Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The object is pickleable\n"
     ]
    }
   ],
   "source": [
    "unpickleable_attributes = check_pickleability(mdl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:09:55.866729Z",
     "iopub.status.busy": "2023-11-02T19:09:55.866729Z",
     "iopub.status.idle": "2023-11-02T19:09:57.712040Z",
     "shell.execute_reply": "2023-11-02T19:09:57.712040Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FLOWS \n",
      "ee_1\n",
      "The object is pickleable\n",
      "sig_1\n",
      "The object is pickleable\n",
      "wat_1\n",
      "The object is pickleable\n",
      "wat_2\n",
      "The object is pickleable\n",
      "FUNCTIONS \n",
      "import_ee\n",
      "ee_out\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The object is pickleable\n",
      "import_water\n",
      "wat_out\n",
      "The object is pickleable\n",
      "import_signal\n",
      "sig_out\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The object is pickleable\n",
      "move_water\n",
      "ee_in\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sig_in\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wat_in\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wat_out\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The object is pickleable\n",
      "export_water\n",
      "wat_in\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The object is pickleable\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MODEL\n",
      "The object is pickleable\n"
     ]
    }
   ],
   "source": [
    "check_model_pickleability(mdl)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you can see, this model is pickleable. However, this may not be the case for all structures if they rely on unpickleable data structures, one common one being iterators like .values()."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using Parallelism in Simulation\n",
    "\n",
    "Parallelism generally requires using some external parallel processing toolkit. The syntax used by fmdtools methods is compatible with:\n",
    "- [multiprocessing](https://docs.python.org/3/library/multiprocessing.html), python's default parallel computing library\n",
    "- [multiprocess](https://pypi.org/project/multiprocess/), a fork of multiprocessing developed by The UQ Foundation\n",
    "- [pathos](https://github.com/uqfoundation/pathos), a broader parallel computing package developed by The UQ Foundation\n",
    "\n",
    "And any other package that emulates multiprocessing.Pool"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:09:57.718160Z",
     "iopub.status.busy": "2023-11-02T19:09:57.718160Z",
     "iopub.status.idle": "2023-11-02T19:09:57.765156Z",
     "shell.execute_reply": "2023-11-02T19:09:57.765156Z"
    }
   },
   "outputs": [],
   "source": [
    "import multiprocessing as mp\n",
    "import multiprocess as ms\n",
    "from pathos.pools import ParallelPool, ProcessPool, SerialPool, ThreadPool"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Parallelism can speed up simulation time when there is a large number of independent simulations to run. The prefered methods for using parallelism are to use a `NominalApproach` or `SampleApproach` with the methods:\n",
    "- propagate.singlefaults (for all single-fault scenarios in a static model with no approach)\n",
    "- propagate.approach (for sampling a set of faults)\n",
    "- propagate.nominal_approach (for simulating the model nominally over a set of parameters)\n",
    "- propagate.nested_approach (for sampling a set of faults over a set of model parameters)\n",
    "\n",
    "These methods can be run in parallel by sending them a `pool` object from one of these modules as the optional `pool` argument. Further details on setting up and running an approach are provided in `docs/Approach Use-Cases.ipynb` "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:09:57.765156Z",
     "iopub.status.busy": "2023-11-02T19:09:57.765156Z",
     "iopub.status.idle": "2023-11-02T19:09:59.161698Z",
     "shell.execute_reply": "2023-11-02T19:09:59.161698Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      "SCENARIOS COMPLETE:   0%|          | 0/21 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      "SCENARIOS COMPLETE: 100%|██████████| 21/21 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "pool = mp.Pool(4)\n",
    "fd = FaultDomain(mdl)\n",
    "fd.add_all()\n",
    "fs = FaultSample(fd)\n",
    "fs.add_fault_phases()\n",
    "endclasses, mdlhists = propagate.fault_sample(mdl, fs, pool=pool)\n",
    "#an.tabulate.simplefmea(endclasses)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:09:59.161698Z",
     "iopub.status.busy": "2023-11-02T19:09:59.161698Z",
     "iopub.status.idle": "2023-11-02T19:10:00.537506Z",
     "shell.execute_reply": "2023-11-02T19:10:00.537506Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      "SCENARIOS COMPLETE:   0%|          | 0/21 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      "SCENARIOS COMPLETE: 100%|██████████| 21/21 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "pool = mp.Pool(4)\n",
    "endclasses, mdlhists = propagate.single_faults(mdl, pool=pool)\n",
    "#an.tabulate.simplefmea(endclasses)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It can also be helpful to verify that the results of parallel simulation and normal serial execution are the same:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:10:00.537506Z",
     "iopub.status.busy": "2023-11-02T19:10:00.537506Z",
     "iopub.status.idle": "2023-11-02T19:10:02.117216Z",
     "shell.execute_reply": "2023-11-02T19:10:02.117216Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      "SCENARIOS COMPLETE:   0%|          | 0/21 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      "SCENARIOS COMPLETE: 100%|██████████| 21/21 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      "SCENARIOS COMPLETE:   0%|          | 0/21 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      "SCENARIOS COMPLETE:  62%|██████▏   | 13/21 [00:00<00:00, 112.44it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      "SCENARIOS COMPLETE: 100%|██████████| 21/21 [00:00<00:00, 113.93it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "pool = mp.Pool(4)\n",
    "endclasses_par, mdlhists = propagate.single_faults(mdl, pool=pool)\n",
    "#tab_par = an.tabulate.simplefmea(endclasses_par)\n",
    "endclasses, mdlhists = propagate.single_faults(mdl)\n",
    "#tab = an.tabulate.simplefmea(endclasses)\n",
    "#tab - tab_par"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:10:02.117216Z",
     "iopub.status.busy": "2023-11-02T19:10:02.117216Z",
     "iopub.status.idle": "2023-11-02T19:10:03.765694Z",
     "shell.execute_reply": "2023-11-02T19:10:03.765694Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      "SCENARIOS COMPLETE:   0%|          | 0/21 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      "SCENARIOS COMPLETE: 100%|██████████| 21/21 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      "SCENARIOS COMPLETE:   0%|          | 0/21 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      "SCENARIOS COMPLETE:  62%|██████▏   | 13/21 [00:00<00:00, 123.69it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      "SCENARIOS COMPLETE: 100%|██████████| 21/21 [00:00<00:00, 125.21it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "pool = mp.Pool(4)\n",
    "endclasses_par, mdlhists = propagate.fault_sample(mdl, fs, pool=pool)\n",
    "#tab_par = an.tabulate.simplefmea(endclasses_par)\n",
    "endclasses, mdlhists = propagate.fault_sample(mdl, fs)\n",
    "#tab = an.tabulate.simplefmea(endclasses)\n",
    "#tab - tab_par"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "While fmdtools built-in methods are the easiest way to leverage parallelism, it can also be used with custom arguments/methods to meet the needs of simulation. However, (on Windows) these methods need to be defined in an external module with an \"if __name__=='__main__':\" statement, otherwise execution will hang from spawning new processes. This has to do with how multiprocessing works in windows."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To show how parellism can be leveraged manually for a desired use-case, below the model is run over the blockage fault mode at time t=1 with a different model parameter (delayed failure behavior), as defined in the `parallelism_methods.py` module in this folder."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:10:03.765694Z",
     "iopub.status.busy": "2023-11-02T19:10:03.765694Z",
     "iopub.status.idle": "2023-11-02T19:10:03.781217Z",
     "shell.execute_reply": "2023-11-02T19:10:03.781217Z"
    }
   },
   "outputs": [],
   "source": [
    "from parallelism_methods import delay_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:10:03.781217Z",
     "iopub.status.busy": "2023-11-02T19:10:03.781217Z",
     "iopub.status.idle": "2023-11-02T19:10:05.137047Z",
     "shell.execute_reply": "2023-11-02T19:10:05.137047Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\multiprocessing\\pool.py:268: ResourceWarning: unclosed running multiprocessing pool <multiprocessing.pool.Pool state=RUN pool_size=4>\n",
      "  _warn(f\"unclosed running multiprocessing pool {self!r}\",\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[endclass.rate:                     1e-05\n",
       " endclass.cost:        20125.000000000007\n",
       " endclass.expected cost: 20125.000000000007,\n",
       " endclass.rate:                     1e-05\n",
       " endclass.cost:        20102.500000000007\n",
       " endclass.expected cost: 20102.500000000007,\n",
       " endclass.rate:                     1e-05\n",
       " endclass.cost:        20080.000000000007\n",
       " endclass.expected cost: 20080.000000000007,\n",
       " endclass.rate:                     1e-05\n",
       " endclass.cost:        20057.500000000007\n",
       " endclass.expected cost: 20057.500000000007,\n",
       " endclass.rate:                     1e-05\n",
       " endclass.cost:        20035.000000000007\n",
       " endclass.expected cost: 20035.000000000007,\n",
       " endclass.rate:                     1e-05\n",
       " endclass.cost:        15023.750000000005\n",
       " endclass.expected cost: 15023.750000000005,\n",
       " endclass.rate:                     1e-05\n",
       " endclass.cost:        15023.750000000005\n",
       " endclass.expected cost: 15023.750000000005,\n",
       " endclass.rate:                     1e-05\n",
       " endclass.cost:        15023.750000000005\n",
       " endclass.expected cost: 15023.750000000005,\n",
       " endclass.rate:                     1e-05\n",
       " endclass.cost:        15023.750000000005\n",
       " endclass.expected cost: 15023.750000000005,\n",
       " endclass.rate:                     1e-05\n",
       " endclass.cost:        15023.750000000005\n",
       " endclass.expected cost: 15023.750000000005]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = delay_test()\n",
    "results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this method, the model is run many times over a given fault with different delay parameters. It should be noted that this approach is not especially efficient, since the nominal scenario is simulated at each call of `propagate.one_fault()`. It is thus preferred to use the appropriate fault/parameter sampling approaches and propagate methods, since these methods only run the nominal simulation once for fault scenarios and can also use staged execution (copying the model at fault time for fault scenarios) to reduce ~1/2 of the cost of each fault simulation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Performance Comparison\n",
    "\n",
    "Parallelism is often used in computation to speed up up a set of independent simulations. Conventionally, one might say it leads to a reduced computational cost of $t/n$, where t was the original time of the set of processes, and n is the number of cores.\n",
    "\n",
    "However, this computational performance increase is dependent on the implementation. In Python, there is some overhead from \n",
    "from communicating data structures in and out of parallel threads which can become a significant consideration when the data structures are large. Additionally, different Pools can execute more or less efficiently. Below these are each compared."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:10:05.137047Z",
     "iopub.status.busy": "2023-11-02T19:10:05.137047Z",
     "iopub.status.idle": "2023-11-02T19:10:05.152732Z",
     "shell.execute_reply": "2023-11-02T19:10:05.152732Z"
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from parallelism_methods import compare_pools, instantiate_pools"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:10:05.152732Z",
     "iopub.status.busy": "2023-11-02T19:10:05.152732Z",
     "iopub.status.idle": "2023-11-02T19:10:07.387444Z",
     "shell.execute_reply": "2023-11-02T19:10:07.387444Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\subprocess.py:1072: ResourceWarning: subprocess 760 is still running\n",
      "  _warn(\"subprocess %s is still running\" % self.pid,\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n",
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\site-packages\\ppft\\_pp.py:142: ResourceWarning: unclosed file <_io.BufferedReader name=7>\n",
      "  self.start()\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n",
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\subprocess.py:1072: ResourceWarning: subprocess 26880 is still running\n",
      "  _warn(\"subprocess %s is still running\" % self.pid,\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n",
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\site-packages\\ppft\\_pp.py:142: ResourceWarning: unclosed file <_io.BufferedReader name=9>\n",
      "  self.start()\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\subprocess.py:1072: ResourceWarning: subprocess 22668 is still running\n",
      "  _warn(\"subprocess %s is still running\" % self.pid,\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n",
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\site-packages\\ppft\\_pp.py:142: ResourceWarning: unclosed file <_io.BufferedReader name=11>\n",
      "  self.start()\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n",
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\subprocess.py:1072: ResourceWarning: subprocess 23496 is still running\n",
      "  _warn(\"subprocess %s is still running\" % self.pid,\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n",
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\site-packages\\ppft\\_pp.py:142: ResourceWarning: unclosed file <_io.BufferedReader name=13>\n",
      "  self.start()\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\subprocess.py:1072: ResourceWarning: subprocess 26340 is still running\n",
      "  _warn(\"subprocess %s is still running\" % self.pid,\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n",
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\site-packages\\ppft\\_pp.py:142: ResourceWarning: unclosed file <_io.BufferedReader name=15>\n",
      "  self.start()\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n",
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\subprocess.py:1072: ResourceWarning: subprocess 26504 is still running\n",
      "  _warn(\"subprocess %s is still running\" % self.pid,\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n",
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\site-packages\\ppft\\_pp.py:142: ResourceWarning: unclosed file <_io.BufferedReader name=17>\n",
      "  self.start()\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\subprocess.py:1072: ResourceWarning: subprocess 27452 is still running\n",
      "  _warn(\"subprocess %s is still running\" % self.pid,\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n",
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\site-packages\\ppft\\_pp.py:142: ResourceWarning: unclosed file <_io.BufferedReader name=19>\n",
      "  self.start()\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n",
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\subprocess.py:1072: ResourceWarning: subprocess 22996 is still running\n",
      "  _warn(\"subprocess %s is still running\" % self.pid,\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n",
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\site-packages\\ppft\\_pp.py:142: ResourceWarning: unclosed file <_io.BufferedReader name=21>\n",
      "  self.start()\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\subprocess.py:1072: ResourceWarning: subprocess 2120 is still running\n",
      "  _warn(\"subprocess %s is still running\" % self.pid,\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n",
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\site-packages\\ppft\\_pp.py:142: ResourceWarning: unclosed file <_io.BufferedReader name=23>\n",
      "  self.start()\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n",
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\subprocess.py:1072: ResourceWarning: subprocess 776 is still running\n",
      "  _warn(\"subprocess %s is still running\" % self.pid,\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n",
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\site-packages\\ppft\\_pp.py:142: ResourceWarning: unclosed file <_io.BufferedReader name=25>\n",
      "  self.start()\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\subprocess.py:1072: ResourceWarning: subprocess 22696 is still running\n",
      "  _warn(\"subprocess %s is still running\" % self.pid,\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n",
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\site-packages\\ppft\\_pp.py:142: ResourceWarning: unclosed file <_io.BufferedReader name=27>\n",
      "  self.start()\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n",
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\subprocess.py:1072: ResourceWarning: subprocess 25852 is still running\n",
      "  _warn(\"subprocess %s is still running\" % self.pid,\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n",
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\site-packages\\ppft\\_pp.py:142: ResourceWarning: unclosed file <_io.BufferedReader name=29>\n",
      "  self.start()\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\subprocess.py:1072: ResourceWarning: subprocess 23280 is still running\n",
      "  _warn(\"subprocess %s is still running\" % self.pid,\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n",
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\site-packages\\ppft\\_pp.py:142: ResourceWarning: unclosed file <_io.BufferedReader name=31>\n",
      "  self.start()\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n",
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\subprocess.py:1072: ResourceWarning: subprocess 27544 is still running\n",
      "  _warn(\"subprocess %s is still running\" % self.pid,\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n",
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\site-packages\\ppft\\_pp.py:142: ResourceWarning: unclosed file <_io.BufferedReader name=33>\n",
      "  self.start()\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n",
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\subprocess.py:1072: ResourceWarning: subprocess 25528 is still running\n",
      "  _warn(\"subprocess %s is still running\" % self.pid,\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n",
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\site-packages\\ppft\\_pp.py:142: ResourceWarning: unclosed file <_io.BufferedReader name=35>\n",
      "  self.start()\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\subprocess.py:1072: ResourceWarning: subprocess 23508 is still running\n",
      "  _warn(\"subprocess %s is still running\" % self.pid,\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n",
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\site-packages\\ppft\\_pp.py:142: ResourceWarning: unclosed file <_io.BufferedReader name=37>\n",
      "  self.start()\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n",
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\subprocess.py:1072: ResourceWarning: subprocess 25884 is still running\n",
      "  _warn(\"subprocess %s is still running\" % self.pid,\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n",
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\site-packages\\ppft\\_pp.py:142: ResourceWarning: unclosed file <_io.BufferedReader name=39>\n",
      "  self.start()\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\subprocess.py:1072: ResourceWarning: subprocess 28080 is still running\n",
      "  _warn(\"subprocess %s is still running\" % self.pid,\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n",
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\site-packages\\ppft\\_pp.py:142: ResourceWarning: unclosed file <_io.BufferedReader name=41>\n",
      "  self.start()\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n",
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\subprocess.py:1072: ResourceWarning: subprocess 24024 is still running\n",
      "  _warn(\"subprocess %s is still running\" % self.pid,\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n",
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\site-packages\\ppft\\_pp.py:142: ResourceWarning: unclosed file <_io.BufferedReader name=43>\n",
      "  self.start()\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\subprocess.py:1072: ResourceWarning: subprocess 13028 is still running\n",
      "  _warn(\"subprocess %s is still running\" % self.pid,\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n",
      "C:\\Users\\dhulse\\AppData\\Local\\anaconda3\\lib\\site-packages\\ppft\\_pp.py:142: ResourceWarning: unclosed file <_io.BufferedReader name=45>\n",
      "  self.start()\n",
      "ResourceWarning: Enable tracemalloc to get the object allocation traceback\n"
     ]
    }
   ],
   "source": [
    "cores=4\n",
    "pools = instantiate_pools(cores)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below is the baseline comparison, where the the following parameters characterize the sampling approach:\n",
    " - single faults: only the single-fault scenarios are considered\n",
    " - 3 points per phase: an evenly-spaced quadrature is sampled at each phase of operation (start, on, end) for the model\n",
    " - staged: the model is copied at each point in time where faults is injected during the model time to save computation\n",
    " - track: the entire model history is returned for each simulation\n",
    " \n",
    " This is typical for a small model like this where the per-model expense is low."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:10:07.387444Z",
     "iopub.status.busy": "2023-11-02T19:10:07.387444Z",
     "iopub.status.idle": "2023-11-02T19:10:14.203817Z",
     "shell.execute_reply": "2023-11-02T19:10:14.203817Z"
    }
   },
   "outputs": [],
   "source": [
    "mdl=Pump()\n",
    "fs = FaultSample(fd)\n",
    "fs.add_fault_phases(args = (3,))\n",
    "\n",
    "# _ = compare_pools(mdl, fs, pools, staged=True, track='all', verbose=False)\n",
    "\n",
    "exectimes = compare_pools(mdl, fs, pools, staged=True, track='all', verbose=False)\n",
    "exectimes_baseline = exectimes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:10:14.203817Z",
     "iopub.status.busy": "2023-11-02T19:10:14.203817Z",
     "iopub.status.idle": "2023-11-02T19:10:14.335135Z",
     "shell.execute_reply": "2023-11-02T19:10:14.335135Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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EREREX1y9JoANGnSBPm9grBixYp8pw8LC0NYWJh2gyIiIr1h1626w65biSiXXn8JmIiIiIiIPiwmAERERERExQgTACIiIiKiYoQJABERERFRMcIEgIiIiIioGGECQERERERUjBSZXwIm0id2Tahb7J6QiIjow+ETACIiIiKiYoQJABERERFRMcIEgIiIiIioGCnUOwBZWVl49OgR0tPTYWtrC2tra23HRUREREREOqD2E4CXL19i0aJF8PPzg4WFBZydneHh4QFbW1s4OTlh0KBBOHPmjC5jJSIiIiKi96RWAhAZGQlnZ2dERUXB398f27dvR2xsLP755x/ExMQgNDQUr1+/RsuWLdGqVStcv35d13ETEREREVEhqNUE6MyZMzhy5AiqV6+ucni9evUwYMAALF68GFFRUTh69CiqVKmi1UCJiIiIiOj9qZUArFu3Tq2ZyeVyfPPNN+8VEBERERER6c579wKUkpKC7du3Iy4uThvxEBERERGRDmmcAHTr1g3z588HALx69Qp16tRBt27dULNmTWzZskXrARIRERERkfZonAAcOXIEjRo1AgBs27YNQgg8f/4cc+fOxU8//aT1AImIiIiISHs0TgBevHgh9fu/Z88efPHFFzAzM0Pbtm3Z+w8RERER0UdO4wTA0dERMTExSEtLw549e9CyZUsAwLNnz2BiYqL1AImIiIiISHs0TgBGjx6N3r17o0KFCihXrhyaNGkC4E3TIE9PT43mdeTIEbRv3x7lypWDTCbD9u3b8x1/69ataNGiBWxtbWFhYQFfX1/s3btX01UgIiIiIiq2NE4Ahg4dipMnT2L58uU4duwYDAzezKJSpUoavwOQlpYGLy8vLFiwQK3xjxw5ghYtWiA6Ohrnzp1D06ZN0b59e1y4cEHT1SAiIiIiKpbU+h2Ad/n4+MDHx0ehrG3bthrPp3Xr1mjdurXa48+ePVvh89SpU/H777/jjz/+QK1atTRePhERERFRcaNWAjBt2jSMGjUKpqamBY576tQpPHnypFAJgaZycnLw8uVL6aVkVTIyMpCRkSF9TklJAQBkZWUhKytL5zHSp0FuKPQdwidNV8ci6013WGdFD6959DYea7qjz2NN3WWrlQD8/fffqFixIrp27Yr27dujTp06sLW1BQC8fv0af//9N44dO4bVq1fj4cOH+O233wofuQZmzpyJ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iYiIiIjUpFEvQJr281+QJk2a5JtYqPqV3yZNmuDChQtajYOIiIiIqLjQKAFwc3MrMAlITk5+r4CIiIiIiEh3NEoAwsPD9doLEBERERERvR+NEoAePXqgbNmyuoqFiIiIiIh0TO2XgLXd/p+IiIiIiD48vfYCREREREREH5baTYBycnJ0GQcREREREX0Aaj8BICIiIiKioo8JABERERFRMcIEgIiIiIioGGECQERERERUjKj1EvCOHTvUnmGHDh0KHQwREREREemWWglAp06d1JqZTCZDdnb2+8RDREREREQ6pFYCwC5AiYiIiIg+DXwHgIiIiIioGFH7h8DelpaWhr/++gv37t1DZmamwrCRI0dqJTAiIiIiItI+jROACxcuoE2bNkhPT0daWhqsra3x5MkTmJmZoWzZskwAiIiIiIg+Yho3Afr222/Rvn17PHv2DKampjh58iTu3r0LHx8fzJw5UxcxEhERERGRlmicAMTGxuK7776DgYEBDA0NkZGRAUdHR8yYMQPjx4/XRYxERERERKQlGicARkZGMDB4M1nZsmVx7949AIClpSXu37+v3eiIiIiIiEirNE4AatWqhTNnzgAA/Pz8MGnSJKxZswajR49GjRo1NA5gwYIFcHZ2homJCerXr4/Tp0/nO/7s2bPh7u4OU1NTODo64ttvv8W///6r8XKJiIiIiIojjROAqVOnwsHBAQAwZcoUWFlZYciQIXj8+DGWLl2q0bw2bNiA4OBghIaG4vz58/Dy8kJAQACSkpJUjr927VqMGzcOoaGhiIuLw6+//ooNGzaw6RERERERkZo07gWoTp060v9ly5bFnj17Cr3wyMhIDBo0CP379wcALF68GLt27cLy5csxbtw4pfFPnDiBhg0bolevXgAAZ2dn9OzZE6dOnSp0DERERERExUmhfgdAGzIzM3Hu3DmEhIRIZQYGBvD390dMTIzKaRo0aIDVq1fj9OnTqFevHm7duoXo6Gj07ds3z+VkZGQgIyND+pySkgIAyMrKQlZWlpbWhj51ckOh7xA+abo6FllvusM6K3p4zaO38VjTHX0ea+ouWyaE0GgPSExMxJgxY3Dw4EEkJSXh3cmzs7PVms/Dhw9Rvnx5nDhxAr6+vlL52LFj8ddff+V5V3/u3LkYM2YMhBB4/fo1vvnmGyxatCjP5YSFhSE8PFypfO3atTAz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",
      "text/plain": [
       "<Figure size 900x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(9, 3),)\n",
    "plt.bar(range(len(exectimes)), list(exectimes.values()), align='center')\n",
    "plt.xticks(range(len(exectimes)), list(exectimes.keys()))\n",
    "plt.title(\"Baseline Performance - Some faults, Staged, Normal Simulation, Full Model History\")\n",
    "plt.ylabel(\"Computational Time (s)\")\n",
    "plt.grid(axis='y')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown, in this situation, both the multiprocessing and threadpool pools give computational performance increases."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Comparison: No Histories\n",
    "\n",
    "In the below comparison, the same simulation approach is run, except without tracking a history of model states through the simulation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:10:14.335135Z",
     "iopub.status.busy": "2023-11-02T19:10:14.335135Z",
     "iopub.status.idle": "2023-11-02T19:10:16.125180Z",
     "shell.execute_reply": "2023-11-02T19:10:16.125180Z"
    }
   },
   "outputs": [],
   "source": [
    "mdl=Pump()\n",
    "exectimes = compare_pools(mdl, fs, pools, staged=True, track='none', verbose=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:10:16.125180Z",
     "iopub.status.busy": "2023-11-02T19:10:16.125180Z",
     "iopub.status.idle": "2023-11-02T19:10:16.262988Z",
     "shell.execute_reply": "2023-11-02T19:10:16.262652Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x2713ab98220>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 900x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(9, 3),)\n",
    "width = 0.8\n",
    "plt.bar(range(len(exectimes)), list(exectimes.values()), align='center', color=\"blue\", label=\"comparison\")\n",
    "plt.bar(range(len(exectimes_baseline)), list(exectimes_baseline.values()), align='center', color=\"gray\", alpha=0.5, label=\"baseline\")\n",
    "plt.xticks(range(len(exectimes)), list(exectimes.keys()))\n",
    "plt.title(\"Computational Performance - Many Faults, Staged, Normal Simulation, No Model History\")\n",
    "plt.ylabel(\"Computational Time (s)\")\n",
    "plt.grid(axis='y')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown, in this situation, the overall simulation expense decreases, even in the serial execution case.\n",
    "\n",
    "Additionally, the case for using a parallel processing pool increases somewhat. This is because passing the model history back to the main process is nearly comparable in time to simulation itself.\n",
    "\n",
    "As a result, removing it saves a large amount of computational time when using parallel processing."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Comparison: Many Faults\n",
    "\n",
    "In the below comparison, many faults are injected in the system to increase the number of scenarios (ostensibly making the case better for parallelism)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:10:16.265039Z",
     "iopub.status.busy": "2023-11-02T19:10:16.265039Z",
     "iopub.status.idle": "2023-11-02T19:10:19.684385Z",
     "shell.execute_reply": "2023-11-02T19:10:19.684385Z"
    }
   },
   "outputs": [],
   "source": [
    "fs_many = FaultSample(fd)\n",
    "fs_many.add_fault_phases(args = (7,))\n",
    "mdl=Pump()\n",
    "exectimes = compare_pools(mdl, fs_many, pools, staged=True, track='None', verbose=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:10:19.684385Z",
     "iopub.status.busy": "2023-11-02T19:10:19.684385Z",
     "iopub.status.idle": "2023-11-02T19:10:19.816120Z",
     "shell.execute_reply": "2023-11-02T19:10:19.816120Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x2713c5a9b10>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 900x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(9, 3),)\n",
    "width = 0.8\n",
    "plt.bar(range(len(exectimes)), list(exectimes.values()), align='center', color=\"blue\", label=\"comparison\")\n",
    "plt.bar(range(len(exectimes_baseline)), list(exectimes_baseline.values()), align='center', color=\"gray\", alpha=0.8, label=\"baseline\")\n",
    "plt.xticks(range(len(exectimes)), list(exectimes.keys()))\n",
    "plt.title(\"Computational Performance - Many Faults, Staged, Normal Simulation, Full Model History\")\n",
    "plt.ylabel(\"Computational Time (s)\")\n",
    "plt.grid(axis='y')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown, increasing the number of joint-fault scenarios increases computational costs significantly--as would be expected.\n",
    "\n",
    "In this situation, multiprocessing performs comparatively better, but only slightly--instead of taking 1/4 the time, it only takes about 1/2 the time."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Comparison: Long simulation\n",
    "\n",
    "It may be of interest to simulate how the comparative performance changes for longer simulations. In this comparison, the simulation time is extended tenfold."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:10:19.816120Z",
     "iopub.status.busy": "2023-11-02T19:10:19.816120Z",
     "iopub.status.idle": "2023-11-02T19:10:38.106289Z",
     "shell.execute_reply": "2023-11-02T19:10:38.106289Z"
    }
   },
   "outputs": [],
   "source": [
    "mdl=Pump(sp=dict(times=(0,20, 500)))\n",
    "exectimes = compare_pools(mdl, fs, pools, staged=True, track=\"all\", verbose=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:10:38.106289Z",
     "iopub.status.busy": "2023-11-02T19:10:38.106289Z",
     "iopub.status.idle": "2023-11-02T19:10:38.237647Z",
     "shell.execute_reply": "2023-11-02T19:10:38.237647Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x2713a993d90>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 900x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(9, 3),)\n",
    "width = 0.8\n",
    "plt.bar(range(len(exectimes)), list(exectimes.values()), align='center', color=\"blue\", label=\"comparison\")\n",
    "plt.bar(range(len(exectimes_baseline)), list(exectimes_baseline.values()), align='center', color=\"gray\", alpha=0.8, label=\"baseline\")\n",
    "plt.xticks(range(len(exectimes)), list(exectimes.keys()))\n",
    "plt.title(\"Computational Performance - Normal Faults, Staged, Long Simulation, Full Model History\")\n",
    "plt.ylabel(\"Computational Time (s)\")\n",
    "plt.grid(axis='y')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown, the simulation time does increase significantly--about tenfold. In terms of comparative performance, pools other than multiprocessing now become competitive, though multiprocessing is still the fastest overall. \n",
    "\n",
    "This shows the main case for using parallesism--speeding up long simulations. Short simulations unfortunately require a significant amount of overhead due to copying in and out of the individual thread and we thus see less of a case for them there."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Comparison: Long Simulation No Tracking\n",
    "\n",
    "Finally, it may be interesting to see how performance is affected in long simulations when there is no tracking. This is because in these simulations, there should be very little overhead from creating the respective data structures, even when there is a long simulation. This comparison is shown below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:10:38.237647Z",
     "iopub.status.busy": "2023-11-02T19:10:38.237647Z",
     "iopub.status.idle": "2023-11-02T19:10:48.689146Z",
     "shell.execute_reply": "2023-11-02T19:10:48.689146Z"
    }
   },
   "outputs": [],
   "source": [
    "mdl=Pump(sp=dict(times=(0,20, 500)))\n",
    "exectimes = compare_pools(mdl, fs, pools, staged=True, track='none', verbose=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:10:48.691296Z",
     "iopub.status.busy": "2023-11-02T19:10:48.691296Z",
     "iopub.status.idle": "2023-11-02T19:10:48.833610Z",
     "shell.execute_reply": "2023-11-02T19:10:48.833468Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x2713abab970>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 900x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(9, 3),)\n",
    "width = 0.8\n",
    "plt.bar(range(len(exectimes)), list(exectimes.values()), align='center', color=\"blue\", label=\"comparison\")\n",
    "plt.bar(range(len(exectimes_baseline)), list(exectimes_baseline.values()), align='center', color=\"gray\", alpha=0.8, label=\"baseline\")\n",
    "plt.xticks(range(len(exectimes)), list(exectimes.keys()))\n",
    "plt.title(\"Computational Performance - Normal Faults, Staged, Long Simulation, No Model History\")\n",
    "plt.ylabel(\"Computational Time (s)\")\n",
    "plt.grid(axis='y')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown, removing the tracking makes the long simulations much take less time than the short simulation!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Comparison: Long Simulation Only Necessary Tracking\n",
    "\n",
    "In practice, it can be necessary to track some states over time. Here we perform the same comparison using the 'valstates' option, which only tracks states which have been defined in the model to be necessary to track (using 'valparams')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:10:48.835733Z",
     "iopub.status.busy": "2023-11-02T19:10:48.835733Z",
     "iopub.status.idle": "2023-11-02T19:10:59.341001Z",
     "shell.execute_reply": "2023-11-02T19:10:59.341001Z"
    }
   },
   "outputs": [],
   "source": [
    "mdl=Pump(sp=dict(times=(0,20, 500)))\n",
    "exectimes = compare_pools(mdl, fs, pools, staged=True, track='valparams', verbose=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:10:59.343108Z",
     "iopub.status.busy": "2023-11-02T19:10:59.343108Z",
     "iopub.status.idle": "2023-11-02T19:10:59.486067Z",
     "shell.execute_reply": "2023-11-02T19:10:59.485778Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x27138736b00>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 900x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(9, 3),)\n",
    "width = 0.8\n",
    "plt.bar(range(len(exectimes)), list(exectimes.values()), align='center', color=\"blue\", label=\"comparison\")\n",
    "plt.bar(range(len(exectimes_baseline)), list(exectimes_baseline.values()), align='center', color=\"gray\", alpha=0.8, label=\"baseline\")\n",
    "plt.xticks(range(len(exectimes)), list(exectimes.keys()))\n",
    "plt.title(\"Computational Performance - Normal Faults, Staged, Long Simulation, Only Necessary History\")\n",
    "plt.ylabel(\"Computational Time (s)\")\n",
    "plt.grid(axis='y')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown, only tracking a few variables results in similar computational time no tracking.\n",
    "\n",
    "This is because a major computational performance limitation in this model is not necessarily the model simulation itself, but the generation, update, and passing of the history. So it is often best to only track necessary parameters when possible, rather than the entire model history."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Comparison: Lower Tracking Time Resolution\n",
    "\n",
    "Finally, the number of recorded timesteps can be lowered to lower computational costs while still returning all relevant variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:10:59.488162Z",
     "iopub.status.busy": "2023-11-02T19:10:59.488162Z",
     "iopub.status.idle": "2023-11-02T19:11:17.926094Z",
     "shell.execute_reply": "2023-11-02T19:11:17.926094Z"
    }
   },
   "outputs": [],
   "source": [
    "mdl=Pump(sp=dict(times=(0,20, 500)))\n",
    "exectimes = compare_pools(mdl, fs, pools, staged=True, track='all', verbose=False, track_times=(\"interval\", 5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:11:17.928322Z",
     "iopub.status.busy": "2023-11-02T19:11:17.928322Z",
     "iopub.status.idle": "2023-11-02T19:11:18.069874Z",
     "shell.execute_reply": "2023-11-02T19:11:18.069874Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x2713c7434c0>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 900x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(9, 3),)\n",
    "width = 0.8\n",
    "plt.bar(range(len(exectimes)), list(exectimes.values()), align='center', color=\"blue\", label=\"comparison\")\n",
    "plt.bar(range(len(exectimes_baseline)), list(exectimes_baseline.values()), align='center', color=\"gray\", alpha=0.5, label=\"baseline\")\n",
    "plt.xticks(range(len(exectimes)), list(exectimes.keys()))\n",
    "plt.title(\"Computational Performance - Many Faults, Staged, Normal Simulation, No Model History\")\n",
    "plt.ylabel(\"Computational Time (s)\")\n",
    "plt.grid(axis='y')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown, while lowering time resolution could theoretically lower computational time, it does not significantly change much in this example. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Comparison Conclusions:\n",
    "\n",
    "Parallelism can the improve computational performance of a given resilience simulation approach. However, this improvement is dependent on the parameters of the simulation. Generally, the official python `multiprocessing` module seems to be the only package that consistently gives a performance improvement over a single-process execution, although this can change depending on the underlying model and modelling approach. There are additionally reasons you might choose other pools--`Pathos` and `multiprocess` pools may enable more data structures in the model because they extend what can be communicated in and out of threads.\n",
    "\n",
    "In general, one of the major considerations for optimization compuational time is not just the *simulation of the model*, but the *size of the returned data structures*. Minimizing the size of the returned data structures can reduce computational time both by reducing the time of an individual simulation and by reducing the *parallelism overhead* from copying these data structures in and out of parallel threads. However, it is important to recognize that for resilience assessment, one often needs a history of model states (or, at least, states of interest) to properly quantify the dynamic costs (i.e., $\\int C_f(t) dt$). Indeed, in this model, only repair costs were able to be used in the comparison of non-tracked states, because the other dynamic costs required a history of their corresponding flows. Changing the number and size of tracked model states can influence the computational time, but only to a point--while one would expect lowering time-fidelity to have a significant effect, it does not because the overhead is less to do with filling the underlying data structures as it has to do with instantiating and returning them--a far more effective method is to only return the functions/flows which are needed by the model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Further Computational Cost Reduction via Profiling\n",
    "While parallelism and staged execution are helpful and relatively easy-to-implement methods of computational cost reduction, it can be helpful (especially for more complex models) to see what aspects of the model are taking the most computational time. \n",
    "\n",
    "Python's builtin `cProfile` package can ge used to see the relative computational times of different functions/processes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:11:18.071981Z",
     "iopub.status.busy": "2023-11-02T19:11:18.071981Z",
     "iopub.status.idle": "2023-11-02T19:11:18.090168Z",
     "shell.execute_reply": "2023-11-02T19:11:18.090168Z"
    }
   },
   "outputs": [],
   "source": [
    "import cProfile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T19:11:18.090168Z",
     "iopub.status.busy": "2023-11-02T19:11:18.090168Z",
     "iopub.status.idle": "2023-11-02T19:11:18.222010Z",
     "shell.execute_reply": "2023-11-02T19:11:18.222010Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         310933 function calls (307841 primitive calls) in 0.116 seconds\n",
      "\n",
      "   Ordered by: internal time\n",
      "\n",
      "   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n",
      "      501    0.012    0.000    0.095    0.000 model.py:477(prop_static)\n",
      "    10024    0.010    0.000    0.033    0.000 block.py:553(return_mutables)\n",
      "     5012    0.010    0.000    0.032    0.000 block.py:1294(__call__)\n",
      "    57759    0.010    0.000    0.010    0.000 {built-in method builtins.hasattr}\n",
      "    10024    0.010    0.000    0.012    0.000 time.py:178(return_mutables)\n",
      "    10024    0.008    0.000    0.046    0.000 block.py:1285(return_mutables)\n",
      "    12030    0.005    0.000    0.007    0.000 copy.py:66(copy)\n",
      "      501    0.004    0.000    0.011    0.000 history.py:279(log)\n",
      "5010/2004    0.004    0.000    0.005    0.000 common.py:33(get_var)\n",
      "     7018    0.003    0.000    0.005    0.000 mode.py:447(has_fault)\n",
      "    10024    0.003    0.000    0.009    0.000 mode.py:273(return_mutables)\n",
      "     1003    0.003    0.000    0.005    0.000 state.py:82(assign)\n",
      "     1003    0.002    0.000    0.009    0.000 ex_pump.py:366(behavior)\n",
      "    11617    0.002    0.000    0.002    0.000 {built-in method builtins.getattr}\n",
      "    18052    0.002    0.000    0.002    0.000 {built-in method recordclass._dataobject.astuple}\n",
      "    10024    0.001    0.000    0.001    0.000 rand.py:77(return_mutables)\n",
      "     8028    0.001    0.000    0.002    0.000 flow.py:57(return_mutables)\n",
      "     2525    0.001    0.000    0.002    0.000 __init__.py:180(add)\n",
      "    12030    0.001    0.000    0.001    0.000 time.py:179(<genexpr>)\n",
      "        1    0.001    0.001    0.111    0.111 propagate.py:1053(prop_one_scen)\n",
      "     1006    0.001    0.000    0.003    0.000 _collections_abc.py:767(__ior__)\n",
      "    12694    0.001    0.000    0.001    0.000 {method 'get' of 'dict' objects}\n",
      "    11037    0.001    0.000    0.001    0.000 {method 'copy' of 'set' objects}\n",
      "      501    0.001    0.000    0.099    0.000 model.py:445(propagate)\n",
      "    10050    0.001    0.000    0.001    0.000 {method 'values' of 'dict' objects}\n",
      "     7018    0.001    0.000    0.001    0.000 {method 'intersection' of 'set' objects}\n",
      "     1003    0.001    0.000    0.002    0.000 ex_pump.py:188(behavior)\n",
      "     7027    0.001    0.000    0.001    0.000 {built-in method builtins.any}\n",
      "10999/10989    0.001    0.000    0.001    0.000 {built-in method builtins.len}\n",
      "      501    0.001    0.000    0.002    0.000 __init__.py:353(union)\n",
      "     1002    0.001    0.000    0.001    0.000 ex_pump.py:268(behavior)\n",
      "     2500    0.000    0.000    0.001    0.000 rand.py:117(update_stochastic_states)\n",
      "     1003    0.000    0.000    0.001    0.000 ex_pump.py:334(condfaults)\n",
      "     1008    0.000    0.000    0.003    0.000 __init__.py:65(__init__)\n",
      "     3016    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}\n",
      "     1002    0.000    0.000    0.001    0.000 ex_pump.py:218(behavior)\n",
      "     2505    0.000    0.000    0.000    0.000 history.py:36(is_known_mutable)\n",
      "     2512    0.000    0.000    0.000    0.000 {method 'update' of 'set' objects}\n",
      "     2966    0.000    0.000    0.000    0.000 {method 'startswith' of 'str' objects}\n",
      "     2004    0.000    0.000    0.001    0.000 __init__.py:304(__iter__)\n",
      "     4909    0.000    0.000    0.000    0.000 {built-in method builtins.isinstance}\n",
      "      501    0.000    0.000    0.000    0.000 model.py:336(set_vars)\n",
      "       36    0.000    0.000    0.001    0.000 inspect.py:2279(_signature_from_function)\n",
      "     1002    0.000    0.000    0.001    0.000 ex_pump.py:245(behavior)\n",
      "     2006    0.000    0.000    0.000    0.000 {built-in method builtins.min}\n",
      "     1503    0.000    0.000    0.000    0.000 __init__.py:74(__len__)\n",
      "     1003    0.000    0.000    0.000    0.000 state.py:127(<dictcomp>)\n",
      "     1003    0.000    0.000    0.000    0.000 ex_pump.py:172(condfaults)\n",
      "     2953    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}\n",
      "     1003    0.000    0.000    0.000    0.000 ex_pump.py:358(indicate_over_pressure)\n",
      "    72/36    0.000    0.000    0.001    0.000 inspect.py:2374(_signature_from_callable)\n",
      "      218    0.000    0.000    0.000    0.000 inspect.py:2636(__init__)\n",
      "       72    0.000    0.000    0.000    0.000 inspect.py:2919(__init__)\n",
      "       11    0.000    0.000    0.000    0.000 {built-in method builtins.dir}\n",
      "     2186    0.000    0.000    0.000    0.000 {built-in method builtins.setattr}\n",
      "      501    0.000    0.000    0.003    0.000 __init__.py:130(copy)\n",
      "       10    0.000    0.000    0.000    0.000 block.py:41(assoc_flows)\n",
      "       12    0.000    0.000    0.000    0.000 {numpy.random._generator.default_rng}\n",
      "       22    0.000    0.000    0.000    0.000 {function SeedSequence.generate_state at 0x000002717ECD81F0}\n",
      "       36    0.000    0.000    0.000    0.000 inspect.py:3205(__str__)\n",
      "     2006    0.000    0.000    0.000    0.000 copy.py:107(_copy_immutable)\n",
      "      515    0.000    0.000    0.000    0.000 result.py:293(items)\n",
      "     1549    0.000    0.000    0.000    0.000 {method 'items' of 'dict' objects}\n",
      "       20    0.000    0.000    0.000    0.000 {built-in method builtins.eval}\n",
      "     2025    0.000    0.000    0.000    0.000 {built-in method builtins.iter}\n",
      "      501    0.000    0.000    0.000    0.000 ex_pump.py:442(indicate_finished)\n",
      "      501    0.000    0.000    0.000    0.000 ex_pump.py:459(indicate_on)\n",
      "       36    0.000    0.000    0.002    0.000 parameter.py:44(__init__)\n",
      "       30    0.000    0.000    0.003    0.000 common.py:275(init_obj_attr)\n",
      "      501    0.000    0.000    0.000    0.000 propagate.py:1025(check_end_condition)\n",
      "      508    0.000    0.000    0.000    0.000 __init__.py:1118(__contains__)\n",
      "     1003    0.000    0.000    0.000    0.000 {method 'copy' of 'list' objects}\n",
      "     1003    0.000    0.000    0.000    0.000 {method 'clear' of 'set' objects}\n",
      "       10    0.000    0.000    0.000    0.000 rand.py:134(update_seed)\n",
      "      182    0.000    0.000    0.000    0.000 inspect.py:2720(__str__)\n",
      "     1038    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}\n",
      "     1002    0.000    0.000    0.000    0.000 {method 'index' of 'list' objects}\n",
      "       36    0.000    0.000    0.000    0.000 inspect.py:1967(_signature_bound_method)\n",
      "       36    0.000    0.000    0.000    0.000 parameter.py:112(check_immutable)\n",
      "      218    0.000    0.000    0.000    0.000 enum.py:359(__call__)\n",
      "       36    0.000    0.000    0.000    0.000 common.py:131(set_obj_arg_type)\n",
      "       10    0.000    0.000    0.000    0.000 time.py:185(set_timestep)\n",
      "       14    0.000    0.000    0.000    0.000 parameter.py:219(find_any_phase_overlap)\n",
      "      505    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}\n",
      "      254    0.000    0.000    0.000    0.000 inspect.py:2968(<genexpr>)\n",
      "       44    0.000    0.000    0.000    0.000 _ufunc_config.py:33(seterr)\n",
      "       36    0.000    0.000    0.002    0.000 parameter.py:156(check_pickle)\n",
      "       36    0.000    0.000    0.000    0.000 common.py:198(get_true_fields)\n",
      "      501    0.000    0.000    0.000    0.000 {built-in method from_iterable}\n",
      "       10    0.000    0.000    0.003    0.000 model.py:124(add_fxn)\n",
      "     31/3    0.000    0.000    0.000    0.000 copy.py:128(deepcopy)\n",
      "       10    0.000    0.000    0.000    0.000 mode.py:276(init_faultmodes)\n",
      "       28    0.000    0.000    0.000    0.000 {method 'copy' of 'numpy.ndarray' objects}\n",
      "       44    0.000    0.000    0.000    0.000 _ufunc_config.py:132(geterr)\n",
      "       36    0.000    0.000    0.000    0.000 parameter.py:133(check_type)\n",
      "      146    0.000    0.000    0.000    0.000 {method 'format' of 'str' objects}\n",
      "       36    0.000    0.000    0.000    0.000 inspect.py:66(get_annotations)\n",
      "       36    0.000    0.000    0.000    0.000 inspect.py:612(unwrap)\n",
      "       10    0.000    0.000    0.003    0.000 block.py:1140(__init__)\n",
      "      618    0.000    0.000    0.000    0.000 inspect.py:2698(kind)\n",
      "       22    0.000    0.000    0.000    0.000 contextlib.py:76(inner)\n",
      "       12    0.000    0.000    0.001    0.000 rand.py:60(__init__)\n",
      "       10    0.000    0.000    0.000    0.000 mode.py:211(__init__)\n",
      "       28    0.000    0.000    0.000    0.000 fromnumeric.py:865(sort)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method builtins.sum}\n",
      "       28    0.000    0.000    0.000    0.000 {built-in method numpy.asanyarray}\n",
      "       36    0.000    0.000    0.002    0.000 inspect.py:2997(from_callable)\n",
      "      400    0.000    0.000    0.000    0.000 inspect.py:2686(name)\n",
      "        1    0.000    0.000    0.116    0.116 propagate.py:211(nominal)\n",
      "       12    0.000    0.000    0.002    0.000 block.py:109(__init__)\n",
      "       36    0.000    0.000    0.000    0.000 inspect.py:3013(replace)\n",
      "        1    0.000    0.000    0.116    0.116 {built-in method builtins.exec}\n",
      "       14    0.000    0.000    0.001    0.000 parameter.py:213(__init__)\n",
      "       30    0.000    0.000    0.000    0.000 block.py:1224(update_seed)\n",
      "        6    0.000    0.000    0.000    0.000 result.py:343(all_with)\n",
      "      218    0.000    0.000    0.000    0.000 enum.py:678(__new__)\n",
      "       10    0.000    0.000    0.002    0.000 block.py:327(__init__)\n",
      "       34    0.000    0.000    0.000    0.000 parameter.py:84(check_lim)\n",
      "       36    0.000    0.000    0.002    0.000 inspect.py:3251(signature)\n",
      "        2    0.000    0.000    0.004    0.002 ex_pump.py:411(__init__)\n",
      "      218    0.000    0.000    0.000    0.000 {method 'isidentifier' of 'str' objects}\n",
      "       10    0.000    0.000    0.000    0.000 time.py:164(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 ex_pump.py:462(find_classification)\n",
      "       22    0.000    0.000    0.000    0.000 _ufunc_config.py:430(__enter__)\n",
      "        2    0.000    0.000    0.000    0.000 graph.py:961(add_edges_from)\n",
      "       72    0.000    0.000    0.000    0.000 inspect.py:277(isfunction)\n",
      "        1    0.000    0.000    0.116    0.116 propagate.py:503(nom_helper)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'reduce' of 'numpy.ufunc' objects}\n",
      "       10    0.000    0.000    0.000    0.000 result.py:302(__getattr__)\n",
      "      7/1    0.000    0.000    0.000    0.000 result.py:460(flatten)\n",
      "       22    0.000    0.000    0.000    0.000 _ufunc_config.py:435(__exit__)\n",
      "        4    0.000    0.000    0.001    0.000 parameter.py:152(copy_with_vals)\n",
      "      8/2    0.000    0.000    0.000    0.000 copy.py:227(_deepcopy_dict)\n",
      "       39    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}\n",
      "        2    0.000    0.000    0.000    0.000 model.py:180(build)\n",
      "       44    0.000    0.000    0.000    0.000 {built-in method numpy.seterrobj}\n",
      "        2    0.000    0.000    0.000    0.000 model.py:199(construct_graph)\n",
      "        4    0.000    0.000    0.000    0.000 graph.py:563(add_nodes_from)\n",
      "       76    0.000    0.000    0.000    0.000 inspect.py:191(isclass)\n",
      "        2    0.000    0.000    0.001    0.000 block.py:190(new_params)\n",
      "       39    0.000    0.000    0.000    0.000 abc.py:117(__instancecheck__)\n",
      "       18    0.000    0.000    0.000    0.000 result.py:312(__setattr__)\n",
      "       72    0.000    0.000    0.000    0.000 {method 'values' of 'mappingproxy' objects}\n",
      "       10    0.000    0.000    0.000    0.000 block.py:1204(return_faultmodes)\n",
      "        1    0.000    0.000    0.000    0.000 common.py:425(<dictcomp>)\n",
      "      108    0.000    0.000    0.000    0.000 {built-in method builtins.issubclass}\n",
      "        8    0.000    0.000    0.000    0.000 {built-in method recordclass._dataobject.asdict}\n",
      "       18    0.000    0.000    0.000    0.000 __init__.py:1091(__init__)\n",
      "       36    0.000    0.000    0.000    0.000 inspect.py:632(_is_wrapper)\n",
      "       22    0.000    0.000    0.000    0.000 common.py:26(get_sub_include)\n",
      "        2    0.000    0.000    0.005    0.002 model.py:268(new_with_params)\n",
      "      110    0.000    0.000    0.000    0.000 {built-in method builtins.repr}\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:1178(get_result)\n",
      "       20    0.000    0.000    0.000    0.000 graph.py:1315(neighbors)\n",
      "      116    0.000    0.000    0.000    0.000 {built-in method builtins.callable}\n",
      "       35    0.000    0.000    0.000    0.000 __init__.py:1108(__setitem__)\n",
      "        8    0.000    0.000    0.000    0.000 flow.py:447(init_flow)\n",
      "        2    0.000    0.000    0.000    0.000 model.py:198(<listcomp>)\n",
      "       12    0.000    0.000    0.000    0.000 copy.py:243(_keep_alive)\n",
      "       32    0.000    0.000    0.000    0.000 block.py:159(update_seed)\n",
      "        2    0.000    0.000    0.000    0.000 graph.py:332(__init__)\n",
      "        4    0.000    0.000    0.000    0.000 flow.py:85(create_hist)\n",
      "       88    0.000    0.000    0.000    0.000 {built-in method numpy.geterrobj}\n",
      "        2    0.000    0.000    0.001    0.000 model.py:48(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 block.py:138(add_flow_hist)\n",
      "       10    0.000    0.000    0.000    0.000 numerictypes.py:357(issubdtype)\n",
      "        2    0.000    0.000    0.000    0.000 functools.py:961(__get__)\n",
      "        5    0.000    0.000    0.000    0.000 history.py:209(init_att)\n",
      "        1    0.000    0.000    0.000    0.000 history.py:342(cut)\n",
      "        8    0.000    0.000    0.000    0.000 model.py:106(add_flow)\n",
      "       93    0.000    0.000    0.000    0.000 {built-in method builtins.id}\n",
      "       10    0.000    0.000    0.000    0.000 block.py:57(<dictcomp>)\n",
      "       10    0.000    0.000    0.000    0.000 common.py:60(is_numeric)\n",
      "       72    0.000    0.000    0.000    0.000 inspect.py:3005(parameters)\n",
      "       12    0.000    0.000    0.000    0.000 model.py:518(<listcomp>)\n",
      "       14    0.000    0.000    0.000    0.000 parameter.py:223(<listcomp>)\n",
      "       34    0.000    0.000    0.000    0.000 common.py:173(set_arg_as_type)\n",
      "        3    0.000    0.000    0.000    0.000 history.py:41(init_indicator_hist)\n",
      "       10    0.000    0.000    0.000    0.000 model.py:157(get_flows)\n",
      "        2    0.000    0.000    0.000    0.000 model.py:235(return_faultmodes)\n",
      "       28    0.000    0.000    0.000    0.000 {method 'sort' of 'numpy.ndarray' objects}\n",
      "       10    0.000    0.000    0.000    0.000 __init__.py:201(update)\n",
      "        8    0.000    0.000    0.001    0.000 flow.py:28(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 copy.py:259(_reconstruct)\n",
      "       20    0.000    0.000    0.000    0.000 reportviews.py:527(__iter__)\n",
      "        1    0.000    0.000    0.000    0.000 fromnumeric.py:71(_wrapreduction)\n",
      "       14    0.000    0.000    0.000    0.000 parameter.py:220(<dictcomp>)\n",
      "        2    0.000    0.000    0.000    0.000 isolate.py:42(isolates)\n",
      "        2    0.000    0.000    0.000    0.000 model.py:68(update_seed)\n",
      "        1    0.000    0.000    0.000    0.000 model.py:428(create_hist)\n",
      "       20    0.000    0.000    0.000    0.000 numerictypes.py:283(issubclass_)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:965(init_histrange)\n",
      "        1    0.000    0.000    0.000    0.000 model.py:210(calc_repaircost)\n",
      "       10    0.000    0.000    0.000    0.000 result.py:121(get_dict_attr)\n",
      "       10    0.000    0.000    0.000    0.000 {built-in method numpy.array}\n",
      "       52    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}\n",
      "        2    0.000    0.000    0.000    0.000 _collections_abc.py:991(update)\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method numpy.arange}\n",
      "        2    0.000    0.000    0.000    0.000 model.py:193(<listcomp>)\n",
      "       40    0.000    0.000    0.000    0.000 __init__.py:165(__contains__)\n",
      "        2    0.000    0.000    0.000    0.000 state.py:324(create_hist)\n",
      "       14    0.000    0.000    0.000    0.000 parameter.py:222(<listcomp>)\n",
      "       36    0.000    0.000    0.000    0.000 inspect.py:3009(return_annotation)\n",
      "        2    0.000    0.000    0.000    0.000 reportviews.py:417(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 copy.py:201(_deepcopy_list)\n",
      "       10    0.000    0.000    0.000    0.000 model.py:159(<dictcomp>)\n",
      "       14    0.000    0.000    0.000    0.000 __init__.py:1098(__len__)\n",
      "        2    0.000    0.000    0.000    0.000 graph.py:1481(degree)\n",
      "        2    0.000    0.000    0.000    0.000 isolate.py:85(<genexpr>)\n",
      "       28    0.000    0.000    0.000    0.000 fromnumeric.py:861(_sort_dispatcher)\n",
      "       22    0.000    0.000    0.000    0.000 multiarray.py:153(concatenate)\n",
      "       17    0.000    0.000    0.000    0.000 {method 'pop' of 'dict' objects}\n",
      "       20    0.000    0.000    0.000    0.000 {method 'copy' of 'dict' objects}\n",
      "       10    0.000    0.000    0.000    0.000 {built-in method builtins.max}\n",
      "       10    0.000    0.000    0.000    0.000 block.py:390(is_dynamic)\n",
      "        2    0.000    0.000    0.000    0.000 model.py:195(<listcomp>)\n",
      "       36    0.000    0.000    0.000    0.000 {built-in method sys.getrecursionlimit}\n",
      "        2    0.000    0.000    0.000    0.000 time.py:30(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 backends.py:129(wrapper)\n",
      "        7    0.000    0.000    0.000    0.000 result.py:140(check_include_errors)\n",
      "       12    0.000    0.000    0.000    0.000 {built-in method fromkeys}\n",
      "       22    0.000    0.000    0.000    0.000 contextlib.py:63(_recreate_cm)\n",
      "        5    0.000    0.000    0.000    0.000 common.py:358(get_obj_track)\n",
      "        2    0.000    0.000    0.000    0.000 {method '__reduce_ex__' of 'object' objects}\n",
      "        1    0.000    0.000    0.000    0.000 fromnumeric.py:2836(min)\n",
      "        5    0.000    0.000    0.000    0.000 __init__.py:1101(__getitem__)\n",
      "        5    0.000    0.000    0.000    0.000 {built-in method numpy.empty}\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:822(check_overwrite)\n",
      "       10    0.000    0.000    0.000    0.000 block.py:384(is_static)\n",
      "        2    0.000    0.000    0.000    0.000 graph.py:59(__set__)\n",
      "        1    0.000    0.000    0.000    0.000 scenario.py:116(__init__)\n",
      "        7    0.000    0.000    0.000    0.000 propagate.py:130(<genexpr>)\n",
      "        4    0.000    0.000    0.000    0.000 copy.py:264(<genexpr>)\n",
      "        4    0.000    0.000    0.000    0.000 result.py:290(keys)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:128(unpack_sim_kwargs)\n",
      "       19    0.000    0.000    0.000    0.000 copy.py:182(_deepcopy_atomic)\n",
      "       10    0.000    0.000    0.000    0.000 block.py:1215(<listcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:247(save_helper)\n",
      "        2    0.000    0.000    0.000    0.000 reportviews.py:424(__call__)\n",
      "        1    0.000    0.000    0.000    0.000 common.py:411(get_obj_indicators)\n",
      "        2    0.000    0.000    0.000    0.000 model.py:208(<listcomp>)\n",
      "        2    0.000    0.000    0.000    0.000 common.py:328(get_dataobj_track)\n",
      "        7    0.000    0.000    0.000    0.000 result.py:148(check_include_error)\n",
      "        4    0.000    0.000    0.000    0.000 {method 'endswith' of 'str' objects}\n",
      "        2    0.000    0.000    0.000    0.000 graph.py:37(__set__)\n",
      "        1    0.000    0.000    0.000    0.000 fromnumeric.py:72(<dictcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 __init__.py:1114(__iter__)\n",
      "        2    0.000    0.000    0.000    0.000 {method 'lower' of 'str' objects}\n",
      "        1    0.000    0.000    0.000    0.000 fromnumeric.py:2831(_min_dispatcher)\n",
      "        2    0.000    0.000    0.000    0.000 {method '__exit__' of '_thread.RLock' objects}\n",
      "        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n",
      "        1    0.000    0.000    0.000    0.000 model.py:232(<listcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 propagate.py:1208(<listcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 scenario.py:118(<dictcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 <string>:1(<module>)\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "prof = cProfile.run('propagate.nominal(mdl)', sort='tottime')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown, running this model is not particularly computationally expensive. As a result, the majority of the computational expense is not actually because of the simulation itself, but because of the way the model is simulated:\n",
    "- the majority is spent simulating the model\n",
    "- a certain amount is spent re-initalizing the model at first so that the model object can be re-used without worrying about it being modified by any previous executions \n",
    "- another amount is spent recording the model history, wich can increase or decrease depending on tracking options (note the low number of values tracked in the pump model by default)\n",
    "\n",
    "\n",
    "\n",
    "This is mostly because the model itself is computationally inexpensive. However, this example shows how one might easily speed up simulation for optimization or large-n simulations--avoiding unnecessary re-initialization, tracking fewer model states, or speeding up model execution. This can be done in the following ways:\n",
    "- using the options for `track` (as mentioned above) to track fewer states (reducing time spent recording the history)\n",
    "- using `protect` options, which specifies whether the model used is re-instantiated for the simulation (`True`) or used directly (`False`)\n",
    "- speeding up the model by using `dynamic_behavior()` methods instead of `static_behavior()` or `behavior()` methods (which can halve the simulation time at the expense of undirected propagation)\n",
    "- speeding up the model by using a longer global timestep (`'tstep'` in `modelparams`) or by speeding up paricularly expensive Function dynamic behaviors by setting (`dt=local_tstep`) in  `super().__init__()`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
