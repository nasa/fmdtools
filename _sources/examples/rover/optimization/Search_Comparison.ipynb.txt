{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "bf6994cc",
   "metadata": {},
   "source": [
    "# Faulty State-Space Search Method Comparison\n",
    "\n",
    "The goal of this notebook is to demonstrate the performance of evolutionary search methods on the hazard elicitation problem. The methods to compare are:\n",
    "- monte_carlo (a random search)\n",
    "- evolutionary algorithm\n",
    "- cooperative coevolutionary algorithm\n",
    "\n",
    "These methods have been coded up using the ``deap`` simulation package in ``search_rover.py``. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "04d3eb04",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-08T23:03:50.596717Z",
     "iopub.status.busy": "2024-01-08T23:03:50.596717Z",
     "iopub.status.idle": "2024-01-08T23:03:52.176511Z",
     "shell.execute_reply": "2024-01-08T23:03:52.175990Z"
    }
   },
   "outputs": [],
   "source": [
    "from search_rover import *\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb029e08",
   "metadata": {},
   "source": [
    "An experiment can be run calling the following methods:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c63fd5d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-08T23:03:52.176511Z",
     "iopub.status.busy": "2024-01-08T23:03:52.176511Z",
     "iopub.status.idle": "2024-01-08T23:03:53.126837Z",
     "shell.execute_reply": "2024-01-08T23:03:53.126327Z"
    }
   },
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'deap'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[2], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m result_mc, sol_mc\u001b[38;5;241m=\u001b[39m \u001b[43mmontecarlo\u001b[49m\u001b[43m(\u001b[49m\u001b[43mngen\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m50\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mweight\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m0.5\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfilename\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mresults/rslt_random.csv\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[0;32m      2\u001b[0m result_ea, sol_ea\u001b[38;5;241m=\u001b[39m ea(ngen\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m50\u001b[39m, weight\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0.5\u001b[39m, filename\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mresults/rslt_ea.csv\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m      3\u001b[0m result_ccea, sol_ccea, pop\u001b[38;5;241m=\u001b[39m ccea(ngen\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m50\u001b[39m, weight\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0.5\u001b[39m, filename\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mresults/rslt_ccea.csv\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[1;32m~\\Documents\\GitHub\\fmdtools\\examples\\rover\\optimization\\search_rover.py:373\u001b[0m, in \u001b[0;36mmontecarlo\u001b[1;34m(verbose, ngen, show_sol, weight, filename, formulation)\u001b[0m\n\u001b[0;32m    371\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"Monte carlo optimization of fitness for reference/comparison.\"\"\"\u001b[39;00m\n\u001b[0;32m    372\u001b[0m start \u001b[38;5;241m=\u001b[39m time\u001b[38;5;241m.\u001b[39mtime()\n\u001b[1;32m--> 373\u001b[0m toolbox \u001b[38;5;241m=\u001b[39m \u001b[43msetup_opt\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmc\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mformulation\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mformulation\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    374\u001b[0m g \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m\n\u001b[0;32m    375\u001b[0m gens \u001b[38;5;241m=\u001b[39m []\n",
      "File \u001b[1;32m~\\Documents\\GitHub\\fmdtools\\examples\\rover\\optimization\\search_rover.py:585\u001b[0m, in \u001b[0;36msetup_opt\u001b[1;34m(ccea, mc, formulation)\u001b[0m\n\u001b[0;32m    584\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21msetup_opt\u001b[39m(ccea\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m, mc\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m, formulation\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m):\n\u001b[1;32m--> 585\u001b[0m     \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mdeap\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m base, creator, tools\n\u001b[0;32m    587\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mhasattr\u001b[39m(creator, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mFitnessMax\u001b[39m\u001b[38;5;124m\"\u001b[39m):\n\u001b[0;32m    588\u001b[0m         \u001b[38;5;28;01mdel\u001b[39;00m creator\u001b[38;5;241m.\u001b[39mFitnessMax\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'deap'"
     ]
    }
   ],
   "source": [
    "result_mc, sol_mc= montecarlo(ngen=50, weight=0.5, filename='results/rslt_random.csv')\n",
    "result_ea, sol_ea= ea(ngen=50, weight=0.5, filename='results/rslt_ea.csv')\n",
    "result_ccea, sol_ccea, pop= ccea(ngen=50, weight=0.5, filename=\"results/rslt_ccea.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "daf9b3c4",
   "metadata": {},
   "source": [
    "Alternatively, we can pull this data from saves:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1b923f0c",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfrand = pd.read_csv('results/rslt_random.csv')\n",
    "dfea = pd.read_csv('results/rslt_ea.csv')\n",
    "dfccea = pd.read_csv(\"results/rslt_ccea.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7fe7af56",
   "metadata": {},
   "source": [
    "This shows the computational performance of (one run) of these methods:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8f7c5be9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# scatter plot\n",
    "ax = dfea.plot(x='time', y= 'EA Fitness Values',c='r', kind='scatter', label='EA')\n",
    "dfrand.plot(x='time', y='Random Fitness Values', kind='scatter', ax=ax, c='g', label='Monte Carlo')\n",
    "dfccea.plot(x='time', y='CCEA Fitness Values', kind='scatter', ax=ax, c='b', label='CCEA')\n",
    " \n",
    "# set the title\n",
    "\n",
    "plt.ylabel(\"Objective Value\")\n",
    "plt.xlabel(\"Computational Time (s)\")\n",
    "plt.title(\"Search Performance Comparison\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "98373ab2",
   "metadata": {},
   "outputs": [],
   "source": [
    "sol_ea = eval(dfea[\"EA Health States\"].iloc[-1])\n",
    "sol_mc = eval(dfrand[\"Random Health States\"].iloc[-1])\n",
    "sol_ccea = eval(dfccea[\"Best_Sol\"].iloc[-1])\n",
    "sols = {\"Monte Carlo\":sol_mc, \"Evolutionary Algorithm\":sol_ea, \"Cooperative Coevolution\":sol_ccea}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "299d1684",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = plot_hspaces(sols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5648e065",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = plot_line_dist(sols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "558bb439",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = plot_trajs(sols)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69de268a",
   "metadata": {},
   "source": [
    "## Performance Comparison\n",
    "\n",
    "Comparing algorithm performance over 20 replicates, 100 (50 CCEA) generations,  weight=0.5.\n",
    "\n",
    "Estimated time = 3 mins * 3 types * 20 replicates = 180 minutes (3 hours)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1690d375",
   "metadata": {},
   "outputs": [],
   "source": [
    "num_replicates = 20"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "71149e16",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(num_replicates):\n",
    "    result_mc, sol_mc= montecarlo(ngen=100, weight=0.5, filename=\"results/result_mc_\"+str(i)+\".csv\", show_sol=False)\n",
    "    result_ea, sol_ea= ea(ngen=100, weight=0.5, filename=\"results/result_ea_\"+str(i)+\".csv\", show_sol=False)\n",
    "    result_ccea, sol_ccea, pop= ccea(ngen=100, weight=0.5, filename=\"results/result_ccea_\"+str(i)+\".csv\", show_sol=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80ef0904",
   "metadata": {},
   "source": [
    "Loading results from saves:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5a102de0",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfs_mc, dfs_ea, dfs_ccea = [], [], []\n",
    "for i in range(num_replicates):\n",
    "    dfs_mc.append(pd.read_csv(\"results/result_mc_\"+str(i)+\".csv\"))\n",
    "    dfs_ea.append(pd.read_csv(\"results/result_ea_\"+str(i)+\".csv\"))\n",
    "    dfs_ccea.append(pd.read_csv(\"results/result_ccea_\"+str(i)+\".csv\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "369b19c9",
   "metadata": {},
   "source": [
    "Plotting results:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0b267151",
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib.lines import Line2D\n",
    "dfs = [dfea, dfrand, dfccea]\n",
    "for i, hist in enumerate(dfs_mc):\n",
    "    plt.plot(hist['time'], hist['Random Fitness Values'], color='green', label=\"MC\", alpha=0.2)\n",
    "    plt.scatter(hist['time'].iloc[-1], hist['Random Fitness Values'].iloc[-1],  color='green', marker=\"*\")\n",
    "for i, hist in enumerate(dfs_ea):\n",
    "    plt.plot(hist['time'], hist['EA Fitness Values'], color='blue', label=\"EA\", alpha=0.2)\n",
    "    plt.scatter(hist['time'].iloc[-1], hist['EA Fitness Values'].iloc[-1],  color='blue', marker=\"*\")\n",
    "for i, hist in enumerate(dfs_ccea):\n",
    "    plt.plot(hist['time'], hist['CCEA Fitness Values'], color='red', label=\"CCEA\", alpha=0.2)\n",
    "    plt.scatter(hist['time'].iloc[-1], hist['CCEA Fitness Values'].iloc[-1],color='red', marker=\"*\")\n",
    "plt.legend()\n",
    "ax = plt.gca()\n",
    "handles, labels = ax.get_legend_handles_labels()\n",
    "ax.get_legend().remove()\n",
    "by_label = dict(zip(labels, handles))\n",
    "\n",
    "\n",
    "legend_elements = [Line2D([0], [0], color='green', lw=1, label='CCEA'),\n",
    "                   Line2D([0], [0], color='blue', lw=1, label='EA'),\n",
    "                   Line2D([0], [0], color='orange', lw=1, label='Monte Carlo'),\n",
    "                   Line2D([0], [0], marker='*', color='black', label='Convergence',\n",
    "                          markerfacecolor='black',linestyle = 'None')]\n",
    "\n",
    "ax.legend(handles=legend_elements)\n",
    "#ax.legend(by_label.values(), by_label.keys(), prop={'size': 8})\n",
    "plt.title(\"Algorithm Comparison\")\n",
    "plt.ylabel(\"Objective Value\")\n",
    "#plt.yscale(\"log\")\n",
    "plt.xlabel(\"Computational Time (s)\")\n",
    "plt.grid()\n",
    "fig = plt.gcf()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "468bd1a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "mean_ea = np.mean([df['EA Fitness Values'] for df in dfs_ea],0)\n",
    "times_ea = np.mean([df['time'] for df in dfs_ea],0)\n",
    "std_ea = np.std([df['EA Fitness Values'] for df in dfs_ea],0)\n",
    "mean_ccea = np.mean([df['CCEA Fitness Values'] for df in dfs_ccea],0)\n",
    "times_ccea = np.mean([df['time'] for df in dfs_ccea],0)\n",
    "std_ccea = np.std([df['CCEA Fitness Values'] for df in dfs_ccea],0)\n",
    "mean_mc = np.mean([df['Random Fitness Values'] for df in dfs_mc],0)\n",
    "times_mc = np.mean([df['time'] for df in dfs_mc],0)\n",
    "std_mc = np.std([df['Random Fitness Values'] for df in dfs_mc],0)\n",
    "\n",
    "\n",
    "plt.plot(times_ccea, mean_ccea, label=\"CCEA\")\n",
    "ax = plt.gca()\n",
    "ax.fill_between(times_ccea,mean_ccea-std_ccea, mean_ccea+std_ccea, alpha=0.3)\n",
    "plt.plot(times_ea, mean_ea, label=\"EA\", linestyle='--')\n",
    "ax.fill_between(times_ea,mean_ea-std_ea, mean_ea+std_ea, alpha=0.3)\n",
    "plt.plot(times_mc, mean_mc, label=\"Monte Carlo\", linestyle=':')\n",
    "ax.fill_between(times_mc,mean_mc-std_mc, mean_mc+std_mc, alpha=0.3)\n",
    "plt.legend()\n",
    "plt.title(\"Search Performance ($\\mu \\pm \\dfrac{\\sigma}{2}$ over 20 Replicates)\")\n",
    "plt.ylabel(\"Objective Value\")\n",
    "#plt.yscale(\"log\")\n",
    "plt.xlabel(\"Computational Time (s)\")\n",
    "plt.grid()\n",
    "fig = plt.gcf()\n",
    "plt.xlim([0,207])\n",
    "plt.ylim([0.5,1.06])\n",
    "fig = plt.gcf()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5877c049",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig.savefig(\"alg_perf_comp.pdf\", format=\"pdf\", bbox_inches = 'tight', pad_inches = 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ee38853",
   "metadata": {},
   "source": [
    "## Comparing Solutions over weights - Fault-Space Formulation\n",
    "\n",
    "Comparing results over weights given the goal is to explore the faulty state-space.\n",
    "\n",
    "3 mins * 5 weights = 15 mins"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d3d2d0b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "weights = [0.0, 0.25, 0.5, 0.75, 1.0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d7dc5b37",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i, w in enumerate(weights):\n",
    "    result_ccea, sol_ccea, pop= ccea(ngen=100, weight=w, filename=\"results/result_weight_\"+str(i)+\".csv\", show_sol=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b143edc",
   "metadata": {},
   "source": [
    "Load Results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b9c52925",
   "metadata": {},
   "outputs": [],
   "source": [
    "weight_sols = {}; weight_results = {}\n",
    "for i, w in enumerate(weights):\n",
    "    results = pd.read_csv(\"results/result_weight_\"+str(i)+\".csv\")\n",
    "    weight_sols[\"w=\"+str(w)] = eval(results[\"Best_Sol\"].iloc[-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "eafd2155",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = plot_hspaces(weight_sols, v_padding=0.6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "bb626664",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig.savefig(\"form1_fs_comp.pdf\", format=\"pdf\", bbox_inches = 'tight', pad_inches = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "9ed9566e",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = plot_line_dist(weight_sols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "0d48fff7",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig.savefig(\"form1_ld_comp.pdf\", format=\"pdf\", bbox_inches = 'tight', pad_inches = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "1d7c7ea5",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = plot_trajs(weight_sols, v_padding=0.35)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "8c880dd6",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig.savefig(\"form1_traj_comp.pdf\", format=\"pdf\", bbox_inches = 'tight', pad_inches = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b2cf844e",
   "metadata": {},
   "outputs": [],
   "source": [
    "line_dists = [sum([line_dist_faster(i)[0] for i in sol]) for sol in weight_sols.values()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "b19c1026",
   "metadata": {},
   "outputs": [],
   "source": [
    "hs_dists = [f_2(sol) for sol in weight_sols.values()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ffdc5845",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.scatter(line_dists, hs_dists, color='red')\n",
    "for i,name in enumerate(weight_sols):\n",
    "    plt.annotate(name, (line_dists[i], hs_dists[i]))\n",
    "plt.xlabel(\"Sum of Line Distance\")\n",
    "plt.ylabel(\"Sum of Min Health State Separation\")\n",
    "plt.title(\"Revealed Pareto Front - Formulation 1\")\n",
    "plt.grid()\n",
    "fig = plt.gcf()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "15496f82",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig.savefig(\"form1_fs_pareto.pdf\", format=\"pdf\", bbox_inches = 'tight', pad_inches = 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5cacd505",
   "metadata": {},
   "source": [
    "### Multiplicative Formulation\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "2cb8c586",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_ccea_1, sol_ccea_1, pop_1= ccea(ngen=100,  formulation=12, filename=\"results/result12_weight_.csv\", show_sol=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "920782c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "visualizations(sol_ccea_1, method=\"CCEA-mult1\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "2721b582",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig=plot_hspace([sol_ccea_1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "83872ad7",
   "metadata": {},
   "outputs": [],
   "source": [
    "linedists = [s.linedist for s in sol_ccea_1]\n",
    "plt.hist(linedists, bins=[j for j in np.arange(0,2.5, 0.25)])\n",
    "plt.title(\"CCEA-Mult1 Formulation\")\n",
    "plt.grid(axis=\"y\")\n",
    "plt.ylim([0,10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "d2730ec1",
   "metadata": {},
   "outputs": [],
   "source": [
    "line_dist_mult = f_1(sol_ccea_1)\n",
    "point_dist_mult = f_2(sol_ccea_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "dc16bc0d",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.scatter(line_dists, hs_dists, color='blue')\n",
    "for i,name in enumerate(weight_sols):\n",
    "    plt.annotate(name, (line_dists[i], hs_dists[i]))\n",
    "plt.xlabel(\"Sum of Line Distance\")\n",
    "plt.ylabel(\"Sum of Min Health State Separation\")\n",
    "plt.title(\"Pareto\")\n",
    "plt.grid()\n",
    "\n",
    "plt.scatter([line_dist_mult], [point_dist_mult], color='red')\n",
    "plt.annotate('mult', (line_dist_mult, point_dist_mult))\n",
    "plt.xlabel(\"Sum of Line Distance\")\n",
    "plt.ylabel(\"Sum of Min Health State Separation\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eaa289b7",
   "metadata": {},
   "source": [
    "As shown, the multiplicative formulation produces degenerate results, placing all weight on a single point instead of producing points that are both spread out and hazardous."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e9605ff",
   "metadata": {},
   "source": [
    "## Comparing Solutions over weights - Result-Space Formulation\n",
    "\n",
    "Comparing results over weights given the goal is to uncover new trajectories.\n",
    "\n",
    "3 mins * 5 weights = 15 mins"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "ad49279f",
   "metadata": {},
   "outputs": [],
   "source": [
    "weights = [0.0, 0.25, 0.5, 0.75, 1.0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "89a8019d",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i, w in enumerate(weights):\n",
    "    result_ccea, sol_ccea, pop= ccea(ngen=100, weight=w, formulation=2, filename=\"results/result2_weight_\"+str(i)+\".csv\", show_sol=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "f80fff59",
   "metadata": {},
   "outputs": [],
   "source": [
    "weight_sols = {}; weight_results = {}\n",
    "for i, w in enumerate(weights):\n",
    "    results = pd.read_csv(\"results/result2_weight_\"+str(i)+\".csv\")\n",
    "    weight_sols[\"w=\"+str(w)] = eval(results[\"Best_Sol\"].iloc[-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "7ffa11bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = plot_hspaces(weight_sols, v_padding=0.6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "0434a116",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig.savefig(\"form2_fs_comp.pdf\", format=\"pdf\", bbox_inches = 'tight', pad_inches = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "5cfb2c77",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = plot_line_dist(weight_sols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "3ef13ceb",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig.savefig(\"form2_ld_comp.pdf\", format=\"pdf\", bbox_inches = 'tight', pad_inches = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "ca496121",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = plot_trajs(weight_sols, v_padding=0.35)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "ffe984ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig.savefig(\"form2_traj_comp.pdf\", format=\"pdf\", bbox_inches = 'tight', pad_inches = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "40ab4b62",
   "metadata": {},
   "outputs": [],
   "source": [
    "class ind(list):\n",
    "    def __init__(self):\n",
    "        self.endpt=[]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "4c4327d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "for w, sol in weight_sols.items():\n",
    "    for index, i in enumerate(sol):\n",
    "        new_i = ind()\n",
    "        for j in i:\n",
    "            new_i.append(j)\n",
    "            new_i.endpt = line_dist_faster(i)[2] \n",
    "        weight_sols[w][index]=new_i"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "bfbb3764",
   "metadata": {},
   "outputs": [],
   "source": [
    "line_dists = [sum([line_dist_faster(i)[0] for i in s]) for s in weight_sols.values()]\n",
    "d_dists = [f_4(sol) for sol in weight_sols.values()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "e2a3745e",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.scatter(line_dists, d_dists, color='red')\n",
    "for i,name in enumerate(weight_sols):\n",
    "    plt.annotate(name, (line_dists[i], d_dists[i]))\n",
    "plt.xlabel(\"Sum of Line Distance\")\n",
    "plt.ylabel(\"Sum of Min Result State Separation\")\n",
    "plt.title(\"Revealed Pareto Front - Formulation 2\")\n",
    "plt.grid()\n",
    "fig = plt.gcf()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "41e4ae4e",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig.savefig(\"form2_fs_pareto.pdf\", format=\"pdf\", bbox_inches = 'tight', pad_inches = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "3de549b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_ccea_2, sol_ccea_2, pop_2= ccea(ngen=100,  formulation=22, filename=\"results/result22_weight_.csv\", show_sol=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "d942a607",
   "metadata": {},
   "outputs": [],
   "source": [
    "visualizations(sol_ccea_2, method=\"CCEA-mult\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "a5930d2a",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig=plot_hspace([sol_ccea_2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "0b4df250",
   "metadata": {},
   "outputs": [],
   "source": [
    "linedists = [s.linedist for s in sol_ccea_2]\n",
    "plt.hist(linedists, bins=[j for j in np.arange(0,2.5, 0.25)])\n",
    "plt.title(\"CCEA-Mult2 Formulation\")\n",
    "plt.grid(axis=\"y\")\n",
    "plt.ylim([0,10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "5c7a23cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.scatter(line_dists, d_dists, color='red')\n",
    "for i,name in enumerate(weight_sols):\n",
    "    plt.annotate(name, (line_dists[i], d_dists[i]))\n",
    "plt.xlabel(\"Sum of Line Distance\")\n",
    "plt.ylabel(\"Sum of Min Result State Separation\")\n",
    "plt.title(\"Pareto\")\n",
    "plt.grid()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "198d9142",
   "metadata": {},
   "outputs": [],
   "source": [
    "line_dist_mult = f_1(sol_ccea_2)\n",
    "point_dist_mult = f_4(sol_ccea_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "836a4b12",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.scatter(line_dists, d_dists, color='blue')\n",
    "for i,name in enumerate(weight_sols):\n",
    "    plt.annotate(name, (line_dists[i], d_dists[i]))\n",
    "plt.xlabel(\"Sum of Line Distance\")\n",
    "plt.ylabel(\"Sum of Min Result State Separation\")\n",
    "plt.title(\"Pareto\")\n",
    "plt.grid()\n",
    "\n",
    "plt.scatter([line_dist_mult], [point_dist_mult], color='red')\n",
    "plt.annotate('mult', (line_dist_mult, point_dist_mult))\n",
    "plt.xlabel(\"Sum of Line Distance\")\n",
    "plt.ylabel(\"Sum of Min Health State Separation\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f35b8077",
   "metadata": {},
   "source": [
    "As with the previous objective, the solutions produced appear degenerate in terms of objectives. Qualitatively, however, the results look \"good\" with both a wide range of trajectories and points with a high line distance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "695296b9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
