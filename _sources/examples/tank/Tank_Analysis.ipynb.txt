{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hold-up Tank Model\n",
    "\n",
    "Using fmdtools to simulate hazards in a system with human-component interactions, including:\n",
    "\n",
    "- human-induced failure modes\n",
    "- human responses to component failure modes\n",
    "- joint human-component failure modes\n",
    "\n",
    "The system to model is in `tank_model.py`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-09T23:38:42.420040Z",
     "iopub.status.busy": "2023-06-09T23:38:42.420040Z",
     "iopub.status.idle": "2023-06-09T23:38:44.039419Z",
     "shell.execute_reply": "2023-06-09T23:38:44.037417Z"
    }
   },
   "outputs": [
    {
     "ename": "ImportError",
     "evalue": "cannot import name 'SampleApproach' from 'fmdtools.define' (c:\\users\\dhulse\\documents\\github\\fmdtools\\fmdtools\\define\\__init__.py)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mImportError\u001b[0m                               Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\1/ipykernel_17072/1046824624.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mfmdtools\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0manalyze\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0man\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mtank_model\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mTank\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 4\u001b[1;33m \u001b[1;32mfrom\u001b[0m \u001b[0mfmdtools\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdefine\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mSampleApproach\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mImportError\u001b[0m: cannot import name 'SampleApproach' from 'fmdtools.define' (c:\\users\\dhulse\\documents\\github\\fmdtools\\fmdtools\\define\\__init__.py)"
     ]
    }
   ],
   "source": [
    "import fmdtools.sim.propagate as propagate\n",
    "import fmdtools.analyze as an\n",
    "from tank_model import Tank\n",
    "from fmdtools.define import SampleApproach"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Verifying the nominal state:\n",
    "\n",
    "In the nominal state, no change in system state should occur and the tank level should remain at 5."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "mdl = Tank()\n",
    "resgraph, mdlhist = propagate.nominal(mdl, desired_result='fxnflowgraph')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "mdlhist.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "an.graph.show(resgraph)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, axs = an.plot.mdlhists(mdlhist)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### What happens under component faults?\n",
    "\n",
    "\n",
    "Here we model a leak of the tank. To compensate for this leak, the operator opens the first valve to a higher setting, maintaining the level of the tank"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "resgraph, mdlhist = propagate.one_fault(mdl,'Store_Water','Leak', time=3, desired_result='fxnflowgraph')\n",
    "\n",
    "fig, ax = an.plot.mdlhists(mdlhist, title=\"Tank response to leak at t=3\", time_slice=[3], fxnflowvals={'Store_Water':['level', 'net_flow'], 'Tank_Sig':['indicator'], 'Valve1_Sig':['action']}, legend_loc=False)\n",
    "fig, ax = an.graph.show(resgraph,faultscen='Leak', time=3)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### What about human-induced faults?\n",
    "\n",
    "Here we evaluate what happens if the operator thinks they see a low or high indicator and takes those given actions.\n",
    "\n",
    "Note that in these cases, because of the indicator/procedures, the operators are able to correct for the fault."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "resgraph, mdlhist = propagate.one_fault(mdl,'Human','FalseDetection_low', time=3, desired_result='fxnflowgraph')\n",
    "\n",
    "fig, ax= an.plot.mdlhists(mdlhist, title='FalseDetection_low', time_slice=[3], fxnflowvals={'Store_Water':['level', 'net_flow'], 'Tank_Sig':['indicator'], 'Valve1_Sig':['action']}, legend_loc=False)\n",
    "fig = an.graph.show(resgraph,faultscen='FalseDetection_low', time=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "resgraph, mdlhist = propagate.one_fault(mdl,'Human','FalseDetection_high', time=3, desired_result='fxnflowgraph')\n",
    "\n",
    "fig, ax= an.plot.mdlhists(mdlhist, title='FalseDetection_high', time_slice=[3], fxnflowvals={'Store_Water':['level', 'net_flow'], 'Tank_Sig':['indicator'], 'Valve1_Sig':['action']}, legend_loc=False)\n",
    "fig = an.graph.show(resgraph,faultscen='FalseDetection_high', time=3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Evaluating Joint Component-Human fault modes \n",
    "\n",
    "To understand where the risks of failure are, we need to find the scenarios, that, with the modelled human controls, still lead to failures. To assess this, we develop a sample approach."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#app_full = SampleApproach(mdl)\n",
    "#endclasses, mdlhists = fp.run_approach(mdl, app_full)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we consider all single and joint-fault scenarios in the set of simulations to see which ones lead to failure:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "app_joint_faults = SampleApproach(mdl, faults='all', jointfaults={'faults': 2})\n",
    "endclasses, mdlhists = propagate.approach(mdl, app_joint_faults)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "fmea_tab = an.tabulate.simplefmea(endclasses)\n",
    "fmea_tab"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we can filter out non-failures and sort by the failures with the highest expected cost (though rate would give the same results here)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "failure_tab = fmea_tab[fmea_tab['cost'] > 1]\n",
    "failure_tab.sort_values('expected cost', ascending = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One of the top modes is a joint human-component failure mode. Let's see what happens in this case:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "scenhists ={'nominal':mdlhists['nominal'], 'faulty':mdlhists['Guide_Water_Out: Leak, Human: FalseDetection_high, t=0']}\n",
    "fig, axs = an.plot.mdlhists(scenhists)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this case, there is a leak, but the operator cannot turn the valve, resulting in the tank filling too high, which is a failure."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To consider the leak again, we can see what happens when the leak is not detected:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "scenhists ={'nominal':mdlhists['nominal'], 'faulty':mdlhists['Guide_Water_Out: Leak, Human: FalseDetection_low, t=0']}\n",
    "fig, axs = an.plot.mdlhists(scenhists)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this case, there is a leak, but it is not caugh, resulting in a failure again."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Testing different reaction times\n",
    "\n",
    "The model set up in `tank_model` is parameterized by the reaction time of the operator. As a result, we can assess how long or short reaction times affect the given scenarios."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "mdl_long_reaction_time = Tank(params={'reacttime':10, \"store_tstep\":1.0})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this case, we will show the affect of reaction time on the operator's ability to catch a leak."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "resgraph, mdlhist = propagate.one_fault(mdl_long_reaction_time,'Store_Water','Leak', time=3, desired_result='fxnflowgraph')\n",
    "\n",
    "fig, axs = an.plot.mdlhists(mdlhist, title = \"Response of Tank to Leak\", time_slice=3, fxnflowvals={'Store_Water':['level', 'net_flow'], 'Tank_Sig':['indicator'], 'Valve1_Sig':['action']}, legend_loc=False)\n",
    "fig, ax = an.graph.show(resgraph,faultscen='Leak', time=3)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown, the operator does not respond in time, resulting in the tank draining all the way, a failure state. We can further use the `propagate.approach` function to compare the number of scenarios caught in this system compared with the other."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
