<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="7" skipped="3" tests="304" time="5345.813" timestamp="2024-10-22T16:21:24.524476" hostname="ad1b6980083e"><testcase classname="examples.asg_demo.Action_Sequence_Graph.ipynb" name="" time="25.850" /><testcase classname="examples.eps.EPS_Example_Notebook.ipynb" name="" time="17.143" /><testcase classname="examples.eps.test_eps.epsTests" name="test_all_faults" time="1.438" /><testcase classname="examples.eps.test_eps.epsTests" name="test_backward_fault_prop_1" time="0.101" /><testcase classname="examples.eps.test_eps.epsTests" name="test_backward_fault_prop_2" time="0.109" /><testcase classname="examples.eps.test_eps.epsTests" name="test_fault_app" time="263.117" /><testcase classname="examples.eps.test_eps.epsTests" name="test_multfault_saving" time="0.308" /><testcase classname="examples.eps.test_eps.epsTests" name="test_nominal_saving" time="0.235" /><testcase classname="examples.eps.test_eps.epsTests" name="test_pickleability" time="0.028" /><testcase classname="examples.eps.test_eps.epsTests" name="test_save_load_onefault" time="0.296" /><testcase classname="examples.eps.test_eps.epsTests" name="test_save_load_singlefaults" time="4.398" /><testcase classname="examples.multiflow_demo.Multiflow_and_Commsflow_Demonstration.ipynb" name="" time="12.647" /><testcase classname="examples.multiflow_demo.test_multiflow.define_Tests" name="test_multiflow_combination" time="0.435" /><testcase classname="examples.multiflow_demo.test_multiflow.define_Tests" name="test_multiflow_passing" time="0.425" /><testcase classname="examples.multiflow_demo.test_multiflow.define_Tests" name="test_mutliflow_copying" time="0.446" /><testcase classname="examples.multirotor.Demonstration.ipynb" name="" time="14.199"><failure message="#x1B[0;31mExecutableNotFound#x1B[0m: failed to execute PosixPath('dot'), make sure the Graphviz executables are on your systems' PATH">---------------------------------------------------------------------------
from fmdtools.define.architecture.function import FunctionArchitectureGraph, FunctionArchitectureFxnGraph
mdl = Drone()
mg = FunctionArchitectureGraph(mdl)
dot = mg.draw_graphviz()
#x1B[0;31m---------------------------------------------------------------------------#x1B[0m
#x1B[0;31mFileNotFoundError#x1B[0m                         Traceback (most recent call last)
File #x1B[0;32m/opt/conda/lib/python3.12/site-packages/graphviz/backend/execute.py:76#x1B[0m, in #x1B[0;36mrun_check#x1B[0;34m(cmd, input_lines, encoding, quiet, **kwargs)#x1B[0m
#x1B[1;32m     75#x1B[0m         kwargs[#x1B[38;5;124m'#x1B[39m#x1B[38;5;124mstdout#x1B[39m#x1B[38;5;124m'#x1B[39m] #x1B[38;5;241m=#x1B[39m kwargs[#x1B[38;5;124m'#x1B[39m#x1B[38;5;124mstderr#x1B[39m#x1B[38;5;124m'#x1B[39m] #x1B[38;5;241m=#x1B[39m subprocess#x1B[38;5;241m.#x1B[39mPIPE
#x1B[0;32m---&gt; 76#x1B[0m     proc #x1B[38;5;241m=#x1B[39m _run_input_lines(cmd, input_lines, kwargs#x1B[38;5;241m=#x1B[39mkwargs)
#x1B[1;32m     77#x1B[0m #x1B[38;5;28;01melse#x1B[39;00m:

File #x1B[0;32m/opt/conda/lib/python3.12/site-packages/graphviz/backend/execute.py:96#x1B[0m, in #x1B[0;36m_run_input_lines#x1B[0;34m(cmd, input_lines, kwargs)#x1B[0m
#x1B[1;32m     95#x1B[0m #x1B[38;5;28;01mdef#x1B[39;00m #x1B[38;5;21m_run_input_lines#x1B[39m(cmd, input_lines, #x1B[38;5;241m*#x1B[39m, kwargs):
#x1B[0;32m---&gt; 96#x1B[0m     popen #x1B[38;5;241m=#x1B[39m subprocess#x1B[38;5;241m.#x1B[39mPopen(cmd, stdin#x1B[38;5;241m=#x1B[39msubprocess#x1B[38;5;241m.#x1B[39mPIPE, #x1B[38;5;241m*#x1B[39m#x1B[38;5;241m*#x1B[39mkwargs)
#x1B[1;32m     98#x1B[0m     stdin_write #x1B[38;5;241m=#x1B[39m popen#x1B[38;5;241m.#x1B[39mstdin#x1B[38;5;241m.#x1B[39mwrite

File #x1B[0;32m/opt/conda/lib/python3.12/subprocess.py:1026#x1B[0m, in #x1B[0;36mPopen.__init__#x1B[0;34m(self, args, bufsize, executable, stdin, stdout, stderr, preexec_fn, close_fds, shell, cwd, env, universal_newlines, startupinfo, creationflags, restore_signals, start_new_session, pass_fds, user, group, extra_groups, encoding, errors, text, umask, pipesize, process_group)#x1B[0m
#x1B[1;32m   1023#x1B[0m             #x1B[38;5;28mself#x1B[39m#x1B[38;5;241m.#x1B[39mstderr #x1B[38;5;241m=#x1B[39m io#x1B[38;5;241m.#x1B[39mTextIOWrapper(#x1B[38;5;28mself#x1B[39m#x1B[38;5;241m.#x1B[39mstderr,
#x1B[1;32m   1024#x1B[0m                     encoding#x1B[38;5;241m=#x1B[39mencoding, errors#x1B[38;5;241m=#x1B[39merrors)
#x1B[0;32m-&gt; 1026#x1B[0m     #x1B[38;5;28mself#x1B[39m#x1B[38;5;241m.#x1B[39m_execute_child(args, executable, preexec_fn, close_fds,
#x1B[1;32m   1027#x1B[0m                         pass_fds, cwd, env,
#x1B[1;32m   1028#x1B[0m                         startupinfo, creationflags, shell,
#x1B[1;32m   1029#x1B[0m                         p2cread, p2cwrite,
#x1B[1;32m   1030#x1B[0m                         c2pread, c2pwrite,
#x1B[1;32m   1031#x1B[0m                         errread, errwrite,
#x1B[1;32m   1032#x1B[0m                         restore_signals,
#x1B[1;32m   1033#x1B[0m                         gid, gids, uid, umask,
#x1B[1;32m   1034#x1B[0m                         start_new_session, process_group)
#x1B[1;32m   1035#x1B[0m #x1B[38;5;28;01mexcept#x1B[39;00m:
#x1B[1;32m   1036#x1B[0m     #x1B[38;5;66;03m# Cleanup if the child failed starting.#x1B[39;00m

File #x1B[0;32m/opt/conda/lib/python3.12/subprocess.py:1955#x1B[0m, in #x1B[0;36mPopen._execute_child#x1B[0;34m(self, args, executable, preexec_fn, close_fds, pass_fds, cwd, env, startupinfo, creationflags, shell, p2cread, p2cwrite, c2pread, c2pwrite, errread, errwrite, restore_signals, gid, gids, uid, umask, start_new_session, process_group)#x1B[0m
#x1B[1;32m   1954#x1B[0m #x1B[38;5;28;01mif#x1B[39;00m err_filename #x1B[38;5;129;01mis#x1B[39;00m #x1B[38;5;129;01mnot#x1B[39;00m #x1B[38;5;28;01mNone#x1B[39;00m:
#x1B[0;32m-&gt; 1955#x1B[0m     #x1B[38;5;28;01mraise#x1B[39;00m child_exception_type(errno_num, err_msg, err_filename)
#x1B[1;32m   1956#x1B[0m #x1B[38;5;28;01melse#x1B[39;00m:

#x1B[0;31mFileNotFoundError#x1B[0m: [Errno 2] No such file or directory: PosixPath('dot')

The above exception was the direct cause of the following exception:

#x1B[0;31mExecutableNotFound#x1B[0m                        Traceback (most recent call last)
Cell #x1B[0;32mIn[2], line 4#x1B[0m
#x1B[1;32m      2#x1B[0m mdl #x1B[38;5;241m=#x1B[39m Drone()
#x1B[1;32m      3#x1B[0m mg #x1B[38;5;241m=#x1B[39m FunctionArchitectureGraph(mdl)
#x1B[0;32m----&gt; 4#x1B[0m dot #x1B[38;5;241m=#x1B[39m mg#x1B[38;5;241m.#x1B[39mdraw_graphviz()

File #x1B[0;32m/fmdtools/fmdtools/define/architecture/function.py:194#x1B[0m, in #x1B[0;36mFunctionArchitectureGraph.draw_graphviz#x1B[0;34m(self, layout, overlap, **kwargs)#x1B[0m
#x1B[1;32m    193#x1B[0m #x1B[38;5;28;01mdef#x1B[39;00m #x1B[38;5;21mdraw_graphviz#x1B[39m(#x1B[38;5;28mself#x1B[39m, layout#x1B[38;5;241m=#x1B[39m#x1B[38;5;124m"#x1B[39m#x1B[38;5;124mtwopi#x1B[39m#x1B[38;5;124m"#x1B[39m, overlap#x1B[38;5;241m=#x1B[39m#x1B[38;5;124m'#x1B[39m#x1B[38;5;124mvoronoi#x1B[39m#x1B[38;5;124m'#x1B[39m, #x1B[38;5;241m*#x1B[39m#x1B[38;5;241m*#x1B[39mkwargs):
#x1B[0;32m--&gt; 194#x1B[0m     #x1B[38;5;28;01mreturn#x1B[39;00m #x1B[38;5;28msuper#x1B[39m()#x1B[38;5;241m.#x1B[39mdraw_graphviz(layout#x1B[38;5;241m=#x1B[39mlayout, overlap#x1B[38;5;241m=#x1B[39moverlap, #x1B[38;5;241m*#x1B[39m#x1B[38;5;241m*#x1B[39mkwargs)

File #x1B[0;32m/fmdtools/fmdtools/analyze/graph/base.py:434#x1B[0m, in #x1B[0;36mGraph.draw_graphviz#x1B[0;34m(self, disp, saveas, **kwargs)#x1B[0m
#x1B[1;32m    431#x1B[0m     #x1B[38;5;28;01mfor#x1B[39;00m edge #x1B[38;5;129;01min#x1B[39;00m edges:
#x1B[1;32m    432#x1B[0m         dot#x1B[38;5;241m.#x1B[39medge(edge[#x1B[38;5;241m0#x1B[39m], edge[#x1B[38;5;241m1#x1B[39m], label#x1B[38;5;241m=#x1B[39m#x1B[38;5;28mself#x1B[39m#x1B[38;5;241m.#x1B[39medge_labels#x1B[38;5;241m.#x1B[39mmake_gv_label(edge),
#x1B[1;32m    433#x1B[0m                  #x1B[38;5;241m*#x1B[39m#x1B[38;5;241m*#x1B[39mgv_kwargs)
#x1B[0;32m--&gt; 434#x1B[0m gv_plot_ending(dot, disp#x1B[38;5;241m=#x1B[39mdisp, saveas#x1B[38;5;241m=#x1B[39msaveas)
#x1B[1;32m    435#x1B[0m #x1B[38;5;28;01mreturn#x1B[39;00m dot

File #x1B[0;32m/fmdtools/fmdtools/analyze/graph/style.py:81#x1B[0m, in #x1B[0;36mgv_plot_ending#x1B[0;34m(dot, disp, saveas)#x1B[0m
#x1B[1;32m     79#x1B[0m #x1B[38;5;250m#x1B[39m#x1B[38;5;124;03m"""Add additional options for gv plots."""#x1B[39;00m
#x1B[1;32m     80#x1B[0m #x1B[38;5;28;01mif#x1B[39;00m disp:
#x1B[0;32m---&gt; 81#x1B[0m     display(SVG(dot#x1B[38;5;241m.#x1B[39m_repr_image_svg_xml()))
#x1B[1;32m     82#x1B[0m save_dot(dot, saveas)

File #x1B[0;32m/opt/conda/lib/python3.12/site-packages/graphviz/jupyter_integration.py:112#x1B[0m, in #x1B[0;36mJupyterIntegration._repr_image_svg_xml#x1B[0;34m(self)#x1B[0m
#x1B[1;32m    110#x1B[0m #x1B[38;5;28;01mdef#x1B[39;00m #x1B[38;5;21m_repr_image_svg_xml#x1B[39m(#x1B[38;5;28mself#x1B[39m) #x1B[38;5;241m-#x1B[39m#x1B[38;5;241m&gt;#x1B[39m #x1B[38;5;28mstr#x1B[39m:
#x1B[1;32m    111#x1B[0m #x1B[38;5;250m    #x1B[39m#x1B[38;5;124;03m"""Return the rendered graph as SVG string."""#x1B[39;00m
#x1B[0;32m--&gt; 112#x1B[0m     #x1B[38;5;28;01mreturn#x1B[39;00m #x1B[38;5;28mself#x1B[39m#x1B[38;5;241m.#x1B[39mpipe(#x1B[38;5;28mformat#x1B[39m#x1B[38;5;241m=#x1B[39m#x1B[38;5;124m'#x1B[39m#x1B[38;5;124msvg#x1B[39m#x1B[38;5;124m'#x1B[39m, encoding#x1B[38;5;241m=#x1B[39mSVG_ENCODING)

File #x1B[0;32m/opt/conda/lib/python3.12/site-packages/graphviz/piping.py:104#x1B[0m, in #x1B[0;36mPipe.pipe#x1B[0;34m(self, format, renderer, formatter, neato_no_op, quiet, engine, encoding)#x1B[0m
#x1B[1;32m     55#x1B[0m #x1B[38;5;28;01mdef#x1B[39;00m #x1B[38;5;21mpipe#x1B[39m(#x1B[38;5;28mself#x1B[39m,
#x1B[1;32m     56#x1B[0m          #x1B[38;5;28mformat#x1B[39m: typing#x1B[38;5;241m.#x1B[39mOptional[#x1B[38;5;28mstr#x1B[39m] #x1B[38;5;241m=#x1B[39m #x1B[38;5;28;01mNone#x1B[39;00m,
#x1B[1;32m     57#x1B[0m          renderer: typing#x1B[38;5;241m.#x1B[39mOptional[#x1B[38;5;28mstr#x1B[39m] #x1B[38;5;241m=#x1B[39m #x1B[38;5;28;01mNone#x1B[39;00m,
#x1B[0;32m   (...)#x1B[0m
#x1B[1;32m     61#x1B[0m          engine: typing#x1B[38;5;241m.#x1B[39mOptional[#x1B[38;5;28mstr#x1B[39m] #x1B[38;5;241m=#x1B[39m #x1B[38;5;28;01mNone#x1B[39;00m,
#x1B[1;32m     62#x1B[0m          encoding: typing#x1B[38;5;241m.#x1B[39mOptional[#x1B[38;5;28mstr#x1B[39m] #x1B[38;5;241m=#x1B[39m #x1B[38;5;28;01mNone#x1B[39;00m) #x1B[38;5;241m-#x1B[39m#x1B[38;5;241m&gt;#x1B[39m typing#x1B[38;5;241m.#x1B[39mUnion[#x1B[38;5;28mbytes#x1B[39m, #x1B[38;5;28mstr#x1B[39m]:
#x1B[1;32m     63#x1B[0m #x1B[38;5;250m    #x1B[39m#x1B[38;5;124;03m"""Return the source piped through the Graphviz layout command.#x1B[39;00m
#x1B[1;32m     64#x1B[0m 
#x1B[1;32m     65#x1B[0m #x1B[38;5;124;03m    Args:#x1B[39;00m
#x1B[0;32m   (...)#x1B[0m
#x1B[1;32m    102#x1B[0m #x1B[38;5;124;03m        '&lt;?xml version='#x1B[39;00m
#x1B[1;32m    103#x1B[0m #x1B[38;5;124;03m    """#x1B[39;00m
#x1B[0;32m--&gt; 104#x1B[0m     #x1B[38;5;28;01mreturn#x1B[39;00m #x1B[38;5;28mself#x1B[39m#x1B[38;5;241m.#x1B[39m_pipe_legacy(#x1B[38;5;28mformat#x1B[39m,
#x1B[1;32m    105#x1B[0m                              renderer#x1B[38;5;241m=#x1B[39mrenderer,
#x1B[1;32m    106#x1B[0m                              formatter#x1B[38;5;241m=#x1B[39mformatter,
#x1B[1;32m    107#x1B[0m                              neato_no_op#x1B[38;5;241m=#x1B[39mneato_no_op,
#x1B[1;32m    108#x1B[0m                              quiet#x1B[38;5;241m=#x1B[39mquiet,
#x1B[1;32m    109#x1B[0m                              engine#x1B[38;5;241m=#x1B[39mengine,
#x1B[1;32m    110#x1B[0m                              encoding#x1B[38;5;241m=#x1B[39mencoding)

File #x1B[0;32m/opt/conda/lib/python3.12/site-packages/graphviz/_tools.py:171#x1B[0m, in #x1B[0;36mdeprecate_positional_args.&lt;locals&gt;.decorator.&lt;locals&gt;.wrapper#x1B[0;34m(*args, **kwargs)#x1B[0m
#x1B[1;32m    162#x1B[0m     wanted #x1B[38;5;241m=#x1B[39m #x1B[38;5;124m'#x1B[39m#x1B[38;5;124m, #x1B[39m#x1B[38;5;124m'#x1B[39m#x1B[38;5;241m.#x1B[39mjoin(#x1B[38;5;124mf#x1B[39m#x1B[38;5;124m'#x1B[39m#x1B[38;5;132;01m{#x1B[39;00mname#x1B[38;5;132;01m}#x1B[39;00m#x1B[38;5;124m=#x1B[39m#x1B[38;5;132;01m{#x1B[39;00mvalue#x1B[38;5;132;01m!r}#x1B[39;00m#x1B[38;5;124m'#x1B[39m
#x1B[1;32m    163#x1B[0m                        #x1B[38;5;28;01mfor#x1B[39;00m name, value #x1B[38;5;129;01min#x1B[39;00m deprecated#x1B[38;5;241m.#x1B[39mitems())
#x1B[1;32m    164#x1B[0m     warnings#x1B[38;5;241m.#x1B[39mwarn(#x1B[38;5;124mf#x1B[39m#x1B[38;5;124m'#x1B[39m#x1B[38;5;124mThe signature of #x1B[39m#x1B[38;5;132;01m{#x1B[39;00mfunc#x1B[38;5;241m.#x1B[39m#x1B[38;5;18m__name__#x1B[39m#x1B[38;5;132;01m}#x1B[39;00m#x1B[38;5;124m will be reduced#x1B[39m#x1B[38;5;124m'#x1B[39m
#x1B[1;32m    165#x1B[0m                   #x1B[38;5;124mf#x1B[39m#x1B[38;5;124m'#x1B[39m#x1B[38;5;124m to #x1B[39m#x1B[38;5;132;01m{#x1B[39;00msupported_number#x1B[38;5;132;01m}#x1B[39;00m#x1B[38;5;124m positional args#x1B[39m#x1B[38;5;124m'#x1B[39m
#x1B[1;32m    166#x1B[0m                   #x1B[38;5;124mf#x1B[39m#x1B[38;5;124m'#x1B[39m#x1B[38;5;124m #x1B[39m#x1B[38;5;132;01m{#x1B[39;00m#x1B[38;5;28mlist#x1B[39m(supported)#x1B[38;5;132;01m}#x1B[39;00m#x1B[38;5;124m: pass #x1B[39m#x1B[38;5;132;01m{#x1B[39;00mwanted#x1B[38;5;132;01m}#x1B[39;00m#x1B[38;5;124m'#x1B[39m
#x1B[1;32m    167#x1B[0m                   #x1B[38;5;124m'#x1B[39m#x1B[38;5;124m as keyword arg(s)#x1B[39m#x1B[38;5;124m'#x1B[39m,
#x1B[1;32m    168#x1B[0m                   stacklevel#x1B[38;5;241m=#x1B[39mstacklevel,
#x1B[1;32m    169#x1B[0m                   category#x1B[38;5;241m=#x1B[39mcategory)
#x1B[0;32m--&gt; 171#x1B[0m #x1B[38;5;28;01mreturn#x1B[39;00m func(#x1B[38;5;241m*#x1B[39margs, #x1B[38;5;241m*#x1B[39m#x1B[38;5;241m*#x1B[39mkwargs)

File #x1B[0;32m/opt/conda/lib/python3.12/site-packages/graphviz/piping.py:121#x1B[0m, in #x1B[0;36mPipe._pipe_legacy#x1B[0;34m(self, format, renderer, formatter, neato_no_op, quiet, engine, encoding)#x1B[0m
#x1B[1;32m    112#x1B[0m #x1B[38;5;129m@_tools#x1B[39m#x1B[38;5;241m.#x1B[39mdeprecate_positional_args(supported_number#x1B[38;5;241m=#x1B[39m#x1B[38;5;241m2#x1B[39m)
#x1B[1;32m    113#x1B[0m #x1B[38;5;28;01mdef#x1B[39;00m #x1B[38;5;21m_pipe_legacy#x1B[39m(#x1B[38;5;28mself#x1B[39m,
#x1B[1;32m    114#x1B[0m                  #x1B[38;5;28mformat#x1B[39m: typing#x1B[38;5;241m.#x1B[39mOptional[#x1B[38;5;28mstr#x1B[39m] #x1B[38;5;241m=#x1B[39m #x1B[38;5;28;01mNone#x1B[39;00m,
#x1B[0;32m   (...)#x1B[0m
#x1B[1;32m    119#x1B[0m                  engine: typing#x1B[38;5;241m.#x1B[39mOptional[#x1B[38;5;28mstr#x1B[39m] #x1B[38;5;241m=#x1B[39m #x1B[38;5;28;01mNone#x1B[39;00m,
#x1B[1;32m    120#x1B[0m                  encoding: typing#x1B[38;5;241m.#x1B[39mOptional[#x1B[38;5;28mstr#x1B[39m] #x1B[38;5;241m=#x1B[39m #x1B[38;5;28;01mNone#x1B[39;00m) #x1B[38;5;241m-#x1B[39m#x1B[38;5;241m&gt;#x1B[39m typing#x1B[38;5;241m.#x1B[39mUnion[#x1B[38;5;28mbytes#x1B[39m, #x1B[38;5;28mstr#x1B[39m]:
#x1B[0;32m--&gt; 121#x1B[0m     #x1B[38;5;28;01mreturn#x1B[39;00m #x1B[38;5;28mself#x1B[39m#x1B[38;5;241m.#x1B[39m_pipe_future(#x1B[38;5;28mformat#x1B[39m,
#x1B[1;32m    122#x1B[0m                              renderer#x1B[38;5;241m=#x1B[39mrenderer,
#x1B[1;32m    123#x1B[0m                              formatter#x1B[38;5;241m=#x1B[39mformatter,
#x1B[1;32m    124#x1B[0m                              neato_no_op#x1B[38;5;241m=#x1B[39mneato_no_op,
#x1B[1;32m    125#x1B[0m                              quiet#x1B[38;5;241m=#x1B[39mquiet,
#x1B[1;32m    126#x1B[0m                              engine#x1B[38;5;241m=#x1B[39mengine,
#x1B[1;32m    127#x1B[0m                              encoding#x1B[38;5;241m=#x1B[39mencoding)

File #x1B[0;32m/opt/conda/lib/python3.12/site-packages/graphviz/piping.py:149#x1B[0m, in #x1B[0;36mPipe._pipe_future#x1B[0;34m(self, format, renderer, formatter, neato_no_op, quiet, engine, encoding)#x1B[0m
#x1B[1;32m    146#x1B[0m #x1B[38;5;28;01mif#x1B[39;00m encoding #x1B[38;5;129;01mis#x1B[39;00m #x1B[38;5;129;01mnot#x1B[39;00m #x1B[38;5;28;01mNone#x1B[39;00m:
#x1B[1;32m    147#x1B[0m     #x1B[38;5;28;01mif#x1B[39;00m codecs#x1B[38;5;241m.#x1B[39mlookup(encoding) #x1B[38;5;129;01mis#x1B[39;00m codecs#x1B[38;5;241m.#x1B[39mlookup(#x1B[38;5;28mself#x1B[39m#x1B[38;5;241m.#x1B[39mencoding):
#x1B[1;32m    148#x1B[0m         #x1B[38;5;66;03m# common case: both stdin and stdout need the same encoding#x1B[39;00m
#x1B[0;32m--&gt; 149#x1B[0m         #x1B[38;5;28;01mreturn#x1B[39;00m #x1B[38;5;28mself#x1B[39m#x1B[38;5;241m.#x1B[39m_pipe_lines_string(#x1B[38;5;241m*#x1B[39margs, encoding#x1B[38;5;241m=#x1B[39mencoding, #x1B[38;5;241m*#x1B[39m#x1B[38;5;241m*#x1B[39mkwargs)
#x1B[1;32m    150#x1B[0m     #x1B[38;5;28;01mtry#x1B[39;00m:
#x1B[1;32m    151#x1B[0m         raw #x1B[38;5;241m=#x1B[39m #x1B[38;5;28mself#x1B[39m#x1B[38;5;241m.#x1B[39m_pipe_lines(#x1B[38;5;241m*#x1B[39margs, input_encoding#x1B[38;5;241m=#x1B[39m#x1B[38;5;28mself#x1B[39m#x1B[38;5;241m.#x1B[39mencoding, #x1B[38;5;241m*#x1B[39m#x1B[38;5;241m*#x1B[39mkwargs)

File #x1B[0;32m/opt/conda/lib/python3.12/site-packages/graphviz/backend/piping.py:212#x1B[0m, in #x1B[0;36mpipe_lines_string#x1B[0;34m(engine, format, input_lines, encoding, renderer, formatter, neato_no_op, quiet)#x1B[0m
#x1B[1;32m    206#x1B[0m cmd #x1B[38;5;241m=#x1B[39m dot_command#x1B[38;5;241m.#x1B[39mcommand(engine, #x1B[38;5;28mformat#x1B[39m,
#x1B[1;32m    207#x1B[0m                           renderer#x1B[38;5;241m=#x1B[39mrenderer,
#x1B[1;32m    208#x1B[0m                           formatter#x1B[38;5;241m=#x1B[39mformatter,
#x1B[1;32m    209#x1B[0m                           neato_no_op#x1B[38;5;241m=#x1B[39mneato_no_op)
#x1B[1;32m    210#x1B[0m kwargs #x1B[38;5;241m=#x1B[39m {#x1B[38;5;124m'#x1B[39m#x1B[38;5;124minput_lines#x1B[39m#x1B[38;5;124m'#x1B[39m: input_lines, #x1B[38;5;124m'#x1B[39m#x1B[38;5;124mencoding#x1B[39m#x1B[38;5;124m'#x1B[39m: encoding}
#x1B[0;32m--&gt; 212#x1B[0m proc #x1B[38;5;241m=#x1B[39m execute#x1B[38;5;241m.#x1B[39mrun_check(cmd, capture_output#x1B[38;5;241m=#x1B[39m#x1B[38;5;28;01mTrue#x1B[39;00m, quiet#x1B[38;5;241m=#x1B[39mquiet, #x1B[38;5;241m*#x1B[39m#x1B[38;5;241m*#x1B[39mkwargs)
#x1B[1;32m    213#x1B[0m #x1B[38;5;28;01mreturn#x1B[39;00m proc#x1B[38;5;241m.#x1B[39mstdout

File #x1B[0;32m/opt/conda/lib/python3.12/site-packages/graphviz/backend/execute.py:81#x1B[0m, in #x1B[0;36mrun_check#x1B[0;34m(cmd, input_lines, encoding, quiet, **kwargs)#x1B[0m
#x1B[1;32m     79#x1B[0m #x1B[38;5;28;01mexcept#x1B[39;00m #x1B[38;5;167;01mOSError#x1B[39;00m #x1B[38;5;28;01mas#x1B[39;00m e:
#x1B[1;32m     80#x1B[0m     #x1B[38;5;28;01mif#x1B[39;00m e#x1B[38;5;241m.#x1B[39merrno #x1B[38;5;241m==#x1B[39m errno#x1B[38;5;241m.#x1B[39mENOENT:
#x1B[0;32m---&gt; 81#x1B[0m         #x1B[38;5;28;01mraise#x1B[39;00m ExecutableNotFound(cmd) #x1B[38;5;28;01mfrom#x1B[39;00m #x1B[38;5;21;01me#x1B[39;00m
#x1B[1;32m     82#x1B[0m     #x1B[38;5;28;01mraise#x1B[39;00m
#x1B[1;32m     84#x1B[0m #x1B[38;5;28;01mif#x1B[39;00m #x1B[38;5;129;01mnot#x1B[39;00m quiet #x1B[38;5;129;01mand#x1B[39;00m proc#x1B[38;5;241m.#x1B[39mstderr:

#x1B[0;31mExecutableNotFound#x1B[0m: failed to execute PosixPath('dot'), make sure the Graphviz executables are on your systems' PATH</failure></testcase><testcase classname="examples.multirotor.Multirotor_Optimization.ipynb" name="" time="159.285" /><testcase classname="examples.multirotor.Urban_Drone_Demo.ipynb" name="" time="340.503"><failure message="A cell timed out while it was being executed, after 300 seconds.">A cell timed out while it was being executed, after 300 seconds.
The message was: Cell execution timed out.
Here is a preview of the cell contents:
-------------------
endresults, hists = propagate.fault_sample(mdl, fs, staged=False)
-------------------</failure></testcase><testcase classname="examples.multirotor.drone_mdl_dynamic" name="examples.multirotor.drone_mdl_dynamic.AffectDOF.inc_pos" time="0.022" /><testcase classname="examples.multirotor.drone_mdl_dynamic" name="examples.multirotor.drone_mdl_dynamic.PlanPath.assign_vectdist_to_goal" time="0.007" /><testcase classname="examples.multirotor.drone_mdl_dynamic" name="examples.multirotor.drone_mdl_dynamic.PlanPath.calc_dist_to_goal" time="0.007" /><testcase classname="examples.multirotor.drone_mdl_dynamic" name="examples.multirotor.drone_mdl_dynamic.SightGrid" time="0.498" /><testcase classname="examples.multirotor.drone_mdl_hierarchical" name="examples.multirotor.drone_mdl_hierarchical.AffectDOF.calc_pwr" time="0.021" /><testcase classname="examples.multirotor.drone_mdl_hierarchical" name="examples.multirotor.drone_mdl_hierarchical.LineArchParam" time="0.004" /><testcase classname="examples.multirotor.drone_mdl_static" name="examples.multirotor.drone_mdl_static.AffectDOF.static_behavior" time="0.007" /><testcase classname="examples.multirotor.drone_mdl_static" name="examples.multirotor.drone_mdl_static.CtlDOF.static_behavior" time="0.007" /><testcase classname="examples.multirotor.drone_mdl_static" name="examples.multirotor.drone_mdl_static.DesTrajState.dist2d" time="0.003" /><testcase classname="examples.multirotor.drone_mdl_static" name="examples.multirotor.drone_mdl_static.DesTrajState.unit_vect2d" time="0.004" /><testcase classname="examples.multirotor.drone_mdl_static" name="examples.multirotor.drone_mdl_static.DistEE.static_behavior" time="0.009" /><testcase classname="examples.multirotor.drone_mdl_static" name="examples.multirotor.drone_mdl_static.HoldPayload.static_behavior" time="0.006" /><testcase classname="examples.multirotor.drone_mdl_static" name="examples.multirotor.drone_mdl_static.PlanPath.static_behavior" time="0.006" /><testcase classname="examples.multirotor.test_multirotor.DroneParameterTests" name="test_objectives" time="0.894" /><testcase classname="examples.multirotor.test_multirotor.DroneParameterTests" name="test_param_domain_1" time="0.002" /><testcase classname="examples.multirotor.test_multirotor.DroneParameterTests" name="test_param_domain_2" time="0.002" /><testcase classname="examples.multirotor.test_multirotor.DroneParameterTests" name="test_set_constraints_1" time="0.001" /><testcase classname="examples.multirotor.test_multirotor.DroneParameterTests" name="test_set_constraints_2" time="0.001" /><testcase classname="examples.multirotor.test_multirotor.DroneParameterTests" name="test_sim_mdl" time="0.426" /><testcase classname="examples.multirotor.test_multirotor.DroneScenarioTest" name="test_scenprob_results" time="1.407" /><testcase classname="examples.multirotor.test_multirotor.DroneScenarioTest2" name="test_scenprob_results" time="0.943" /><testcase classname="examples.multirotor.test_multirotor.DroneScenarioTest3" name="test_scenprob_results" time="0.936" /><testcase classname="examples.multirotor.test_multirotor.DroneDisturbanceTest" name="test_disturbance_set" time="0.540" /><testcase classname="examples.pump.Optimization.ipynb" name="" time="199.734" /><testcase classname="examples.pump.Parallelism_Tutorial.ipynb" name="" time="184.965" /><testcase classname="examples.pump.Pump_Example_Notebook.ipynb" name="" time="55.206" /><testcase classname="examples.pump.Stochastic_Modelling.ipynb" name="" time="372.620" /><testcase classname="examples.pump.Tutorial_complete.ipynb" name="" time="25.615" /><testcase classname="examples.pump.ex_pump" name="examples.pump.ex_pump.accumulate" time="0.004" /><testcase classname="examples.pump.ex_pump" name="examples.pump.ex_pump.reseting_accumulate" time="0.003" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_app_prop_values" time="1.454" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_approach_cost_calc" time="106.208" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_approach_parallelism" time="47.809" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_dynamic_prop_values" time="1.088" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_dynamic_prop_values_2" time="1.705" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_fault_sample_isave" time="14.165" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_fault_sample_save" time="13.006" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_fmea_options" time="1.617" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_hist_tracking_setup" time="0.064" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_model_copy_different" time="5.008" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_model_copy_same" time="9.803" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_model_reset" time="0.002"><skipped type="pytest.skip" message="Reset not fully implemented yet and unused throughout.">/fmdtools/examples/pump/test_pump.py:137: Reset not fully implemented yet and unused throughout.</skipped></testcase><testcase classname="examples.pump.test_pump.PumpTests" name="test_nested_sample_isave" time="131.435" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_nested_sample_save" time="129.019" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_nominal_save" time="0.553" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_one_run_csv" time="0.350" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_one_run_json" time="0.347" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_one_run_pickle" time="0.346" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_onefault_save" time="1.026" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_param_sample" time="0.032" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_param_sample_isave" time="4.977" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_param_sample_save" time="5.137" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_pickleability" time="0.040" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_save_load_multfault" time="1.040" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_single_faults_isave" time="4.500" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_single_faults_save" time="4.348" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_value_setting" time="0.033" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_value_setting_dict" time="0.034" /><testcase classname="examples.pump.test_pump.IndivPumpTests" name="test_mutable_setup" time="0.069" /><testcase classname="examples.pump.test_pump_example.ImportEE_Tests" name="test_behave_inf_v" time="0.004" /><testcase classname="examples.pump.test_pump_example.ImportEE_Tests" name="test_behave_no_v" time="0.003" /><testcase classname="examples.pump.test_pump_example.ImportEE_Tests" name="test_behave_nom" time="0.003" /><testcase classname="examples.pump.test_pump_example.ImportEE_Tests" name="test_condfaults_hi" time="0.003" /><testcase classname="examples.pump.test_pump_example.ImportEE_Tests" name="test_condfaults_nom" time="0.003" /><testcase classname="examples.pump.test_pump_example.ImportEE_Tests" name="test_initialization" time="0.003" /><testcase classname="examples.pump.test_pump_example.MoveWat_Tests" name="test_condfaults_dynamic" time="0.005" /><testcase classname="examples.pump.test_pump_example.MoveWat_Tests" name="test_initialization" time="0.004" /><testcase classname="examples.pump.test_pump_example.MoveWat_Tests" name="test_nom" time="0.004" /><testcase classname="examples.pump.test_pump_example.Integration_Tests" name="test_blockage_results" time="0.427" /><testcase classname="examples.pump.test_pump_example.Integration_Tests" name="test_blockage_static" time="0.043" /><testcase classname="examples.pump.test_pump_example.Integration_Tests" name="test_nominal_results" time="0.224" /><testcase classname="examples.pump.test_pump_stochastic.StochasticPumpTests" name="test_mdl_pickle" time="0.665" /><testcase classname="examples.pump.test_pump_stochastic.StochasticPumpTests" name="test_model_copy_different" time="5.675" /><testcase classname="examples.pump.test_pump_stochastic.StochasticPumpTests" name="test_model_copy_same" time="8.463" /><testcase classname="examples.pump.test_pump_stochastic.StochasticPumpTests" name="test_model_reset" time="0.002"><skipped type="pytest.skip" message="Reset not fully implemented yet and unused throughout.">/fmdtools/examples/pump/test_pump_stochastic.py:115: Reset not fully implemented yet and unused throughout.</skipped></testcase><testcase classname="examples.pump.test_pump_stochastic.StochasticPumpTests" name="test_model_set_vars" time="0.033" /><testcase classname="examples.pump.test_pump_stochastic.StochasticPumpTests" name="test_nested_sample_isave" time="228.631" /><testcase classname="examples.pump.test_pump_stochastic.StochasticPumpTests" name="test_nested_sample_save" time="229.124" /><testcase classname="examples.pump.test_pump_stochastic.StochasticPumpTests" name="test_param_sample_isave" time="4.367" /><testcase classname="examples.pump.test_pump_stochastic.StochasticPumpTests" name="test_param_sample_save" time="4.195" /><testcase classname="examples.pump.test_pump_stochastic.StochasticPumpTests" name="test_plot_nested_hists" time="28.978" /><testcase classname="examples.pump.test_pump_stochastic.StochasticPumpTests" name="test_plot_nominal_vals" time="2.880" /><testcase classname="examples.pump.test_pump_stochastic.StochasticPumpTests" name="test_plot_nominal_vals_xd" time="153.614" /><testcase classname="examples.pump.test_pump_stochastic.StochasticPumpTests" name="test_rand_paramsample_plot" time="10.543" /><testcase classname="examples.pump.test_pump_stochastic.StochasticPumpTests" name="test_run_approach" time="245.864" /><testcase classname="examples.pump.test_pump_stochastic.StochasticPumpTests" name="test_run_safety" time="14.906" /><testcase classname="examples.pump.test_pump_stochastic.StochasticPumpTests" name="test_set_seeds" time="0.107" /><testcase classname="examples.pump.test_pump_stochastic.StochasticPumpTests" name="test_stochastic_pdf" time="0.063" /><testcase classname="examples.rover.FaultSample_Use-Cases.ipynb" name="" time="19.461" /><testcase classname="examples.rover.Model_Structure_Visualization_Tutorial.ipynb" name="" time="16.299"><failure message="#x1B[0;31mExecutableNotFound#x1B[0m: failed to execute PosixPath('dot'), make sure the Graphviz executables are on your systems' PATH">---------------------------------------------------------------------------
dot = mtg.draw_graphviz()
#x1B[0;31m---------------------------------------------------------------------------#x1B[0m
#x1B[0;31mFileNotFoundError#x1B[0m                         Traceback (most recent call last)
File #x1B[0;32m/opt/conda/lib/python3.12/site-packages/graphviz/backend/execute.py:76#x1B[0m, in #x1B[0;36mrun_check#x1B[0;34m(cmd, input_lines, encoding, quiet, **kwargs)#x1B[0m
#x1B[1;32m     75#x1B[0m         kwargs[#x1B[38;5;124m'#x1B[39m#x1B[38;5;124mstdout#x1B[39m#x1B[38;5;124m'#x1B[39m] #x1B[38;5;241m=#x1B[39m kwargs[#x1B[38;5;124m'#x1B[39m#x1B[38;5;124mstderr#x1B[39m#x1B[38;5;124m'#x1B[39m] #x1B[38;5;241m=#x1B[39m subprocess#x1B[38;5;241m.#x1B[39mPIPE
#x1B[0;32m---&gt; 76#x1B[0m     proc #x1B[38;5;241m=#x1B[39m _run_input_lines(cmd, input_lines, kwargs#x1B[38;5;241m=#x1B[39mkwargs)
#x1B[1;32m     77#x1B[0m #x1B[38;5;28;01melse#x1B[39;00m:

File #x1B[0;32m/opt/conda/lib/python3.12/site-packages/graphviz/backend/execute.py:96#x1B[0m, in #x1B[0;36m_run_input_lines#x1B[0;34m(cmd, input_lines, kwargs)#x1B[0m
#x1B[1;32m     95#x1B[0m #x1B[38;5;28;01mdef#x1B[39;00m #x1B[38;5;21m_run_input_lines#x1B[39m(cmd, input_lines, #x1B[38;5;241m*#x1B[39m, kwargs):
#x1B[0;32m---&gt; 96#x1B[0m     popen #x1B[38;5;241m=#x1B[39m subprocess#x1B[38;5;241m.#x1B[39mPopen(cmd, stdin#x1B[38;5;241m=#x1B[39msubprocess#x1B[38;5;241m.#x1B[39mPIPE, #x1B[38;5;241m*#x1B[39m#x1B[38;5;241m*#x1B[39mkwargs)
#x1B[1;32m     98#x1B[0m     stdin_write #x1B[38;5;241m=#x1B[39m popen#x1B[38;5;241m.#x1B[39mstdin#x1B[38;5;241m.#x1B[39mwrite

File #x1B[0;32m/opt/conda/lib/python3.12/subprocess.py:1026#x1B[0m, in #x1B[0;36mPopen.__init__#x1B[0;34m(self, args, bufsize, executable, stdin, stdout, stderr, preexec_fn, close_fds, shell, cwd, env, universal_newlines, startupinfo, creationflags, restore_signals, start_new_session, pass_fds, user, group, extra_groups, encoding, errors, text, umask, pipesize, process_group)#x1B[0m
#x1B[1;32m   1023#x1B[0m             #x1B[38;5;28mself#x1B[39m#x1B[38;5;241m.#x1B[39mstderr #x1B[38;5;241m=#x1B[39m io#x1B[38;5;241m.#x1B[39mTextIOWrapper(#x1B[38;5;28mself#x1B[39m#x1B[38;5;241m.#x1B[39mstderr,
#x1B[1;32m   1024#x1B[0m                     encoding#x1B[38;5;241m=#x1B[39mencoding, errors#x1B[38;5;241m=#x1B[39merrors)
#x1B[0;32m-&gt; 1026#x1B[0m     #x1B[38;5;28mself#x1B[39m#x1B[38;5;241m.#x1B[39m_execute_child(args, executable, preexec_fn, close_fds,
#x1B[1;32m   1027#x1B[0m                         pass_fds, cwd, env,
#x1B[1;32m   1028#x1B[0m                         startupinfo, creationflags, shell,
#x1B[1;32m   1029#x1B[0m                         p2cread, p2cwrite,
#x1B[1;32m   1030#x1B[0m                         c2pread, c2pwrite,
#x1B[1;32m   1031#x1B[0m                         errread, errwrite,
#x1B[1;32m   1032#x1B[0m                         restore_signals,
#x1B[1;32m   1033#x1B[0m                         gid, gids, uid, umask,
#x1B[1;32m   1034#x1B[0m                         start_new_session, process_group)
#x1B[1;32m   1035#x1B[0m #x1B[38;5;28;01mexcept#x1B[39;00m:
#x1B[1;32m   1036#x1B[0m     #x1B[38;5;66;03m# Cleanup if the child failed starting.#x1B[39;00m

File #x1B[0;32m/opt/conda/lib/python3.12/subprocess.py:1955#x1B[0m, in #x1B[0;36mPopen._execute_child#x1B[0;34m(self, args, executable, preexec_fn, close_fds, pass_fds, cwd, env, startupinfo, creationflags, shell, p2cread, p2cwrite, c2pread, c2pwrite, errread, errwrite, restore_signals, gid, gids, uid, umask, start_new_session, process_group)#x1B[0m
#x1B[1;32m   1954#x1B[0m #x1B[38;5;28;01mif#x1B[39;00m err_filename #x1B[38;5;129;01mis#x1B[39;00m #x1B[38;5;129;01mnot#x1B[39;00m #x1B[38;5;28;01mNone#x1B[39;00m:
#x1B[0;32m-&gt; 1955#x1B[0m     #x1B[38;5;28;01mraise#x1B[39;00m child_exception_type(errno_num, err_msg, err_filename)
#x1B[1;32m   1956#x1B[0m #x1B[38;5;28;01melse#x1B[39;00m:

#x1B[0;31mFileNotFoundError#x1B[0m: [Errno 2] No such file or directory: PosixPath('dot')

The above exception was the direct cause of the following exception:

#x1B[0;31mExecutableNotFound#x1B[0m                        Traceback (most recent call last)
Cell #x1B[0;32mIn[11], line 1#x1B[0m
#x1B[0;32m----&gt; 1#x1B[0m dot #x1B[38;5;241m=#x1B[39m mtg#x1B[38;5;241m.#x1B[39mdraw_graphviz()

File #x1B[0;32m/fmdtools/fmdtools/define/architecture/function.py:397#x1B[0m, in #x1B[0;36mFunctionArchitectureTypeGraph.draw_graphviz#x1B[0;34m(self, layout, ranksep, **kwargs)#x1B[0m
#x1B[1;32m    396#x1B[0m #x1B[38;5;28;01mdef#x1B[39;00m #x1B[38;5;21mdraw_graphviz#x1B[39m(#x1B[38;5;28mself#x1B[39m, layout#x1B[38;5;241m=#x1B[39m#x1B[38;5;124m"#x1B[39m#x1B[38;5;124mdot#x1B[39m#x1B[38;5;124m"#x1B[39m, ranksep#x1B[38;5;241m=#x1B[39m#x1B[38;5;124m'#x1B[39m#x1B[38;5;124m2.0#x1B[39m#x1B[38;5;124m'#x1B[39m, #x1B[38;5;241m*#x1B[39m#x1B[38;5;241m*#x1B[39mkwargs):
#x1B[0;32m--&gt; 397#x1B[0m     #x1B[38;5;28;01mreturn#x1B[39;00m #x1B[38;5;28msuper#x1B[39m()#x1B[38;5;241m.#x1B[39mdraw_graphviz(layout#x1B[38;5;241m=#x1B[39mlayout, ranksep#x1B[38;5;241m=#x1B[39mranksep, #x1B[38;5;241m*#x1B[39m#x1B[38;5;241m*#x1B[39mkwargs)

File #x1B[0;32m/fmdtools/fmdtools/define/architecture/function.py:194#x1B[0m, in #x1B[0;36mFunctionArchitectureGraph.draw_graphviz#x1B[0;34m(self, layout, overlap, **kwargs)#x1B[0m
#x1B[1;32m    193#x1B[0m #x1B[38;5;28;01mdef#x1B[39;00m #x1B[38;5;21mdraw_graphviz#x1B[39m(#x1B[38;5;28mself#x1B[39m, layout#x1B[38;5;241m=#x1B[39m#x1B[38;5;124m"#x1B[39m#x1B[38;5;124mtwopi#x1B[39m#x1B[38;5;124m"#x1B[39m, overlap#x1B[38;5;241m=#x1B[39m#x1B[38;5;124m'#x1B[39m#x1B[38;5;124mvoronoi#x1B[39m#x1B[38;5;124m'#x1B[39m, #x1B[38;5;241m*#x1B[39m#x1B[38;5;241m*#x1B[39mkwargs):
#x1B[0;32m--&gt; 194#x1B[0m     #x1B[38;5;28;01mreturn#x1B[39;00m #x1B[38;5;28msuper#x1B[39m()#x1B[38;5;241m.#x1B[39mdraw_graphviz(layout#x1B[38;5;241m=#x1B[39mlayout, overlap#x1B[38;5;241m=#x1B[39moverlap, #x1B[38;5;241m*#x1B[39m#x1B[38;5;241m*#x1B[39mkwargs)

File #x1B[0;32m/fmdtools/fmdtools/analyze/graph/base.py:434#x1B[0m, in #x1B[0;36mGraph.draw_graphviz#x1B[0;34m(self, disp, saveas, **kwargs)#x1B[0m
#x1B[1;32m    431#x1B[0m     #x1B[38;5;28;01mfor#x1B[39;00m edge #x1B[38;5;129;01min#x1B[39;00m edges:
#x1B[1;32m    432#x1B[0m         dot#x1B[38;5;241m.#x1B[39medge(edge[#x1B[38;5;241m0#x1B[39m], edge[#x1B[38;5;241m1#x1B[39m], label#x1B[38;5;241m=#x1B[39m#x1B[38;5;28mself#x1B[39m#x1B[38;5;241m.#x1B[39medge_labels#x1B[38;5;241m.#x1B[39mmake_gv_label(edge),
#x1B[1;32m    433#x1B[0m                  #x1B[38;5;241m*#x1B[39m#x1B[38;5;241m*#x1B[39mgv_kwargs)
#x1B[0;32m--&gt; 434#x1B[0m gv_plot_ending(dot, disp#x1B[38;5;241m=#x1B[39mdisp, saveas#x1B[38;5;241m=#x1B[39msaveas)
#x1B[1;32m    435#x1B[0m #x1B[38;5;28;01mreturn#x1B[39;00m dot

File #x1B[0;32m/fmdtools/fmdtools/analyze/graph/style.py:81#x1B[0m, in #x1B[0;36mgv_plot_ending#x1B[0;34m(dot, disp, saveas)#x1B[0m
#x1B[1;32m     79#x1B[0m #x1B[38;5;250m#x1B[39m#x1B[38;5;124;03m"""Add additional options for gv plots."""#x1B[39;00m
#x1B[1;32m     80#x1B[0m #x1B[38;5;28;01mif#x1B[39;00m disp:
#x1B[0;32m---&gt; 81#x1B[0m     display(SVG(dot#x1B[38;5;241m.#x1B[39m_repr_image_svg_xml()))
#x1B[1;32m     82#x1B[0m save_dot(dot, saveas)

File #x1B[0;32m/opt/conda/lib/python3.12/site-packages/graphviz/jupyter_integration.py:112#x1B[0m, in #x1B[0;36mJupyterIntegration._repr_image_svg_xml#x1B[0;34m(self)#x1B[0m
#x1B[1;32m    110#x1B[0m #x1B[38;5;28;01mdef#x1B[39;00m #x1B[38;5;21m_repr_image_svg_xml#x1B[39m(#x1B[38;5;28mself#x1B[39m) #x1B[38;5;241m-#x1B[39m#x1B[38;5;241m&gt;#x1B[39m #x1B[38;5;28mstr#x1B[39m:
#x1B[1;32m    111#x1B[0m #x1B[38;5;250m    #x1B[39m#x1B[38;5;124;03m"""Return the rendered graph as SVG string."""#x1B[39;00m
#x1B[0;32m--&gt; 112#x1B[0m     #x1B[38;5;28;01mreturn#x1B[39;00m #x1B[38;5;28mself#x1B[39m#x1B[38;5;241m.#x1B[39mpipe(#x1B[38;5;28mformat#x1B[39m#x1B[38;5;241m=#x1B[39m#x1B[38;5;124m'#x1B[39m#x1B[38;5;124msvg#x1B[39m#x1B[38;5;124m'#x1B[39m, encoding#x1B[38;5;241m=#x1B[39mSVG_ENCODING)

File #x1B[0;32m/opt/conda/lib/python3.12/site-packages/graphviz/piping.py:104#x1B[0m, in #x1B[0;36mPipe.pipe#x1B[0;34m(self, format, renderer, formatter, neato_no_op, quiet, engine, encoding)#x1B[0m
#x1B[1;32m     55#x1B[0m #x1B[38;5;28;01mdef#x1B[39;00m #x1B[38;5;21mpipe#x1B[39m(#x1B[38;5;28mself#x1B[39m,
#x1B[1;32m     56#x1B[0m          #x1B[38;5;28mformat#x1B[39m: typing#x1B[38;5;241m.#x1B[39mOptional[#x1B[38;5;28mstr#x1B[39m] #x1B[38;5;241m=#x1B[39m #x1B[38;5;28;01mNone#x1B[39;00m,
#x1B[1;32m     57#x1B[0m          renderer: typing#x1B[38;5;241m.#x1B[39mOptional[#x1B[38;5;28mstr#x1B[39m] #x1B[38;5;241m=#x1B[39m #x1B[38;5;28;01mNone#x1B[39;00m,
#x1B[0;32m   (...)#x1B[0m
#x1B[1;32m     61#x1B[0m          engine: typing#x1B[38;5;241m.#x1B[39mOptional[#x1B[38;5;28mstr#x1B[39m] #x1B[38;5;241m=#x1B[39m #x1B[38;5;28;01mNone#x1B[39;00m,
#x1B[1;32m     62#x1B[0m          encoding: typing#x1B[38;5;241m.#x1B[39mOptional[#x1B[38;5;28mstr#x1B[39m] #x1B[38;5;241m=#x1B[39m #x1B[38;5;28;01mNone#x1B[39;00m) #x1B[38;5;241m-#x1B[39m#x1B[38;5;241m&gt;#x1B[39m typing#x1B[38;5;241m.#x1B[39mUnion[#x1B[38;5;28mbytes#x1B[39m, #x1B[38;5;28mstr#x1B[39m]:
#x1B[1;32m     63#x1B[0m #x1B[38;5;250m    #x1B[39m#x1B[38;5;124;03m"""Return the source piped through the Graphviz layout command.#x1B[39;00m
#x1B[1;32m     64#x1B[0m 
#x1B[1;32m     65#x1B[0m #x1B[38;5;124;03m    Args:#x1B[39;00m
#x1B[0;32m   (...)#x1B[0m
#x1B[1;32m    102#x1B[0m #x1B[38;5;124;03m        '&lt;?xml version='#x1B[39;00m
#x1B[1;32m    103#x1B[0m #x1B[38;5;124;03m    """#x1B[39;00m
#x1B[0;32m--&gt; 104#x1B[0m     #x1B[38;5;28;01mreturn#x1B[39;00m #x1B[38;5;28mself#x1B[39m#x1B[38;5;241m.#x1B[39m_pipe_legacy(#x1B[38;5;28mformat#x1B[39m,
#x1B[1;32m    105#x1B[0m                              renderer#x1B[38;5;241m=#x1B[39mrenderer,
#x1B[1;32m    106#x1B[0m                              formatter#x1B[38;5;241m=#x1B[39mformatter,
#x1B[1;32m    107#x1B[0m                              neato_no_op#x1B[38;5;241m=#x1B[39mneato_no_op,
#x1B[1;32m    108#x1B[0m                              quiet#x1B[38;5;241m=#x1B[39mquiet,
#x1B[1;32m    109#x1B[0m                              engine#x1B[38;5;241m=#x1B[39mengine,
#x1B[1;32m    110#x1B[0m                              encoding#x1B[38;5;241m=#x1B[39mencoding)

File #x1B[0;32m/opt/conda/lib/python3.12/site-packages/graphviz/_tools.py:171#x1B[0m, in #x1B[0;36mdeprecate_positional_args.&lt;locals&gt;.decorator.&lt;locals&gt;.wrapper#x1B[0;34m(*args, **kwargs)#x1B[0m
#x1B[1;32m    162#x1B[0m     wanted #x1B[38;5;241m=#x1B[39m #x1B[38;5;124m'#x1B[39m#x1B[38;5;124m, #x1B[39m#x1B[38;5;124m'#x1B[39m#x1B[38;5;241m.#x1B[39mjoin(#x1B[38;5;124mf#x1B[39m#x1B[38;5;124m'#x1B[39m#x1B[38;5;132;01m{#x1B[39;00mname#x1B[38;5;132;01m}#x1B[39;00m#x1B[38;5;124m=#x1B[39m#x1B[38;5;132;01m{#x1B[39;00mvalue#x1B[38;5;132;01m!r}#x1B[39;00m#x1B[38;5;124m'#x1B[39m
#x1B[1;32m    163#x1B[0m                        #x1B[38;5;28;01mfor#x1B[39;00m name, value #x1B[38;5;129;01min#x1B[39;00m deprecated#x1B[38;5;241m.#x1B[39mitems())
#x1B[1;32m    164#x1B[0m     warnings#x1B[38;5;241m.#x1B[39mwarn(#x1B[38;5;124mf#x1B[39m#x1B[38;5;124m'#x1B[39m#x1B[38;5;124mThe signature of #x1B[39m#x1B[38;5;132;01m{#x1B[39;00mfunc#x1B[38;5;241m.#x1B[39m#x1B[38;5;18m__name__#x1B[39m#x1B[38;5;132;01m}#x1B[39;00m#x1B[38;5;124m will be reduced#x1B[39m#x1B[38;5;124m'#x1B[39m
#x1B[1;32m    165#x1B[0m                   #x1B[38;5;124mf#x1B[39m#x1B[38;5;124m'#x1B[39m#x1B[38;5;124m to #x1B[39m#x1B[38;5;132;01m{#x1B[39;00msupported_number#x1B[38;5;132;01m}#x1B[39;00m#x1B[38;5;124m positional args#x1B[39m#x1B[38;5;124m'#x1B[39m
#x1B[1;32m    166#x1B[0m                   #x1B[38;5;124mf#x1B[39m#x1B[38;5;124m'#x1B[39m#x1B[38;5;124m #x1B[39m#x1B[38;5;132;01m{#x1B[39;00m#x1B[38;5;28mlist#x1B[39m(supported)#x1B[38;5;132;01m}#x1B[39;00m#x1B[38;5;124m: pass #x1B[39m#x1B[38;5;132;01m{#x1B[39;00mwanted#x1B[38;5;132;01m}#x1B[39;00m#x1B[38;5;124m'#x1B[39m
#x1B[1;32m    167#x1B[0m                   #x1B[38;5;124m'#x1B[39m#x1B[38;5;124m as keyword arg(s)#x1B[39m#x1B[38;5;124m'#x1B[39m,
#x1B[1;32m    168#x1B[0m                   stacklevel#x1B[38;5;241m=#x1B[39mstacklevel,
#x1B[1;32m    169#x1B[0m                   category#x1B[38;5;241m=#x1B[39mcategory)
#x1B[0;32m--&gt; 171#x1B[0m #x1B[38;5;28;01mreturn#x1B[39;00m func(#x1B[38;5;241m*#x1B[39margs, #x1B[38;5;241m*#x1B[39m#x1B[38;5;241m*#x1B[39mkwargs)

File #x1B[0;32m/opt/conda/lib/python3.12/site-packages/graphviz/piping.py:121#x1B[0m, in #x1B[0;36mPipe._pipe_legacy#x1B[0;34m(self, format, renderer, formatter, neato_no_op, quiet, engine, encoding)#x1B[0m
#x1B[1;32m    112#x1B[0m #x1B[38;5;129m@_tools#x1B[39m#x1B[38;5;241m.#x1B[39mdeprecate_positional_args(supported_number#x1B[38;5;241m=#x1B[39m#x1B[38;5;241m2#x1B[39m)
#x1B[1;32m    113#x1B[0m #x1B[38;5;28;01mdef#x1B[39;00m #x1B[38;5;21m_pipe_legacy#x1B[39m(#x1B[38;5;28mself#x1B[39m,
#x1B[1;32m    114#x1B[0m                  #x1B[38;5;28mformat#x1B[39m: typing#x1B[38;5;241m.#x1B[39mOptional[#x1B[38;5;28mstr#x1B[39m] #x1B[38;5;241m=#x1B[39m #x1B[38;5;28;01mNone#x1B[39;00m,
#x1B[0;32m   (...)#x1B[0m
#x1B[1;32m    119#x1B[0m                  engine: typing#x1B[38;5;241m.#x1B[39mOptional[#x1B[38;5;28mstr#x1B[39m] #x1B[38;5;241m=#x1B[39m #x1B[38;5;28;01mNone#x1B[39;00m,
#x1B[1;32m    120#x1B[0m                  encoding: typing#x1B[38;5;241m.#x1B[39mOptional[#x1B[38;5;28mstr#x1B[39m] #x1B[38;5;241m=#x1B[39m #x1B[38;5;28;01mNone#x1B[39;00m) #x1B[38;5;241m-#x1B[39m#x1B[38;5;241m&gt;#x1B[39m typing#x1B[38;5;241m.#x1B[39mUnion[#x1B[38;5;28mbytes#x1B[39m, #x1B[38;5;28mstr#x1B[39m]:
#x1B[0;32m--&gt; 121#x1B[0m     #x1B[38;5;28;01mreturn#x1B[39;00m #x1B[38;5;28mself#x1B[39m#x1B[38;5;241m.#x1B[39m_pipe_future(#x1B[38;5;28mformat#x1B[39m,
#x1B[1;32m    122#x1B[0m                              renderer#x1B[38;5;241m=#x1B[39mrenderer,
#x1B[1;32m    123#x1B[0m                              formatter#x1B[38;5;241m=#x1B[39mformatter,
#x1B[1;32m    124#x1B[0m                              neato_no_op#x1B[38;5;241m=#x1B[39mneato_no_op,
#x1B[1;32m    125#x1B[0m                              quiet#x1B[38;5;241m=#x1B[39mquiet,
#x1B[1;32m    126#x1B[0m                              engine#x1B[38;5;241m=#x1B[39mengine,
#x1B[1;32m    127#x1B[0m                              encoding#x1B[38;5;241m=#x1B[39mencoding)

File #x1B[0;32m/opt/conda/lib/python3.12/site-packages/graphviz/piping.py:149#x1B[0m, in #x1B[0;36mPipe._pipe_future#x1B[0;34m(self, format, renderer, formatter, neato_no_op, quiet, engine, encoding)#x1B[0m
#x1B[1;32m    146#x1B[0m #x1B[38;5;28;01mif#x1B[39;00m encoding #x1B[38;5;129;01mis#x1B[39;00m #x1B[38;5;129;01mnot#x1B[39;00m #x1B[38;5;28;01mNone#x1B[39;00m:
#x1B[1;32m    147#x1B[0m     #x1B[38;5;28;01mif#x1B[39;00m codecs#x1B[38;5;241m.#x1B[39mlookup(encoding) #x1B[38;5;129;01mis#x1B[39;00m codecs#x1B[38;5;241m.#x1B[39mlookup(#x1B[38;5;28mself#x1B[39m#x1B[38;5;241m.#x1B[39mencoding):
#x1B[1;32m    148#x1B[0m         #x1B[38;5;66;03m# common case: both stdin and stdout need the same encoding#x1B[39;00m
#x1B[0;32m--&gt; 149#x1B[0m         #x1B[38;5;28;01mreturn#x1B[39;00m #x1B[38;5;28mself#x1B[39m#x1B[38;5;241m.#x1B[39m_pipe_lines_string(#x1B[38;5;241m*#x1B[39margs, encoding#x1B[38;5;241m=#x1B[39mencoding, #x1B[38;5;241m*#x1B[39m#x1B[38;5;241m*#x1B[39mkwargs)
#x1B[1;32m    150#x1B[0m     #x1B[38;5;28;01mtry#x1B[39;00m:
#x1B[1;32m    151#x1B[0m         raw #x1B[38;5;241m=#x1B[39m #x1B[38;5;28mself#x1B[39m#x1B[38;5;241m.#x1B[39m_pipe_lines(#x1B[38;5;241m*#x1B[39margs, input_encoding#x1B[38;5;241m=#x1B[39m#x1B[38;5;28mself#x1B[39m#x1B[38;5;241m.#x1B[39mencoding, #x1B[38;5;241m*#x1B[39m#x1B[38;5;241m*#x1B[39mkwargs)

File #x1B[0;32m/opt/conda/lib/python3.12/site-packages/graphviz/backend/piping.py:212#x1B[0m, in #x1B[0;36mpipe_lines_string#x1B[0;34m(engine, format, input_lines, encoding, renderer, formatter, neato_no_op, quiet)#x1B[0m
#x1B[1;32m    206#x1B[0m cmd #x1B[38;5;241m=#x1B[39m dot_command#x1B[38;5;241m.#x1B[39mcommand(engine, #x1B[38;5;28mformat#x1B[39m,
#x1B[1;32m    207#x1B[0m                           renderer#x1B[38;5;241m=#x1B[39mrenderer,
#x1B[1;32m    208#x1B[0m                           formatter#x1B[38;5;241m=#x1B[39mformatter,
#x1B[1;32m    209#x1B[0m                           neato_no_op#x1B[38;5;241m=#x1B[39mneato_no_op)
#x1B[1;32m    210#x1B[0m kwargs #x1B[38;5;241m=#x1B[39m {#x1B[38;5;124m'#x1B[39m#x1B[38;5;124minput_lines#x1B[39m#x1B[38;5;124m'#x1B[39m: input_lines, #x1B[38;5;124m'#x1B[39m#x1B[38;5;124mencoding#x1B[39m#x1B[38;5;124m'#x1B[39m: encoding}
#x1B[0;32m--&gt; 212#x1B[0m proc #x1B[38;5;241m=#x1B[39m execute#x1B[38;5;241m.#x1B[39mrun_check(cmd, capture_output#x1B[38;5;241m=#x1B[39m#x1B[38;5;28;01mTrue#x1B[39;00m, quiet#x1B[38;5;241m=#x1B[39mquiet, #x1B[38;5;241m*#x1B[39m#x1B[38;5;241m*#x1B[39mkwargs)
#x1B[1;32m    213#x1B[0m #x1B[38;5;28;01mreturn#x1B[39;00m proc#x1B[38;5;241m.#x1B[39mstdout

File #x1B[0;32m/opt/conda/lib/python3.12/site-packages/graphviz/backend/execute.py:81#x1B[0m, in #x1B[0;36mrun_check#x1B[0;34m(cmd, input_lines, encoding, quiet, **kwargs)#x1B[0m
#x1B[1;32m     79#x1B[0m #x1B[38;5;28;01mexcept#x1B[39;00m #x1B[38;5;167;01mOSError#x1B[39;00m #x1B[38;5;28;01mas#x1B[39;00m e:
#x1B[1;32m     80#x1B[0m     #x1B[38;5;28;01mif#x1B[39;00m e#x1B[38;5;241m.#x1B[39merrno #x1B[38;5;241m==#x1B[39m errno#x1B[38;5;241m.#x1B[39mENOENT:
#x1B[0;32m---&gt; 81#x1B[0m         #x1B[38;5;28;01mraise#x1B[39;00m ExecutableNotFound(cmd) #x1B[38;5;28;01mfrom#x1B[39;00m #x1B[38;5;21;01me#x1B[39;00m
#x1B[1;32m     82#x1B[0m     #x1B[38;5;28;01mraise#x1B[39;00m
#x1B[1;32m     84#x1B[0m #x1B[38;5;28;01mif#x1B[39;00m #x1B[38;5;129;01mnot#x1B[39;00m quiet #x1B[38;5;129;01mand#x1B[39;00m proc#x1B[38;5;241m.#x1B[39mstderr:

#x1B[0;31mExecutableNotFound#x1B[0m: failed to execute PosixPath('dot'), make sure the Graphviz executables are on your systems' PATH</failure></testcase><testcase classname="examples.rover.ParameterSample_Use-Cases.ipynb" name="" time="320.952" /><testcase classname="examples.rover.Rover_Setup_Notebook.ipynb" name="" time="83.282" /><testcase classname="examples.rover.rover_model" name="examples.rover.rover_model.Drive.drive_nominal" time="0.067" /><testcase classname="examples.rover.rover_model_human" name="examples.rover.rover_model_human.Comprehend" time="0.006" /><testcase classname="examples.rover.rover_model_human" name="examples.rover.rover_model_human.Decide" time="0.004" /><testcase classname="examples.rover.rover_model_human" name="examples.rover.rover_model_human.HumanActions" time="0.019" /><testcase classname="examples.rover.rover_model_human" name="examples.rover.rover_model_human.Look" time="0.004" /><testcase classname="examples.rover.rover_model_human" name="examples.rover.rover_model_human.Percieve" time="0.005" /><testcase classname="examples.rover.rover_model_human" name="examples.rover.rover_model_human.Press" time="0.004" /><testcase classname="examples.rover.rover_model_human" name="examples.rover.rover_model_human.Project" time="0.005" /><testcase classname="examples.rover.test_rover.RoverTests" name="test_obj_values" time="5.529" /><testcase classname="examples.rover.HFAC_Analyses.HFAC_Analyses.ipynb" name="" time="397.480" /><testcase classname="examples.rover.HFAC_Analyses.IDETC_Human_Paper_Analysis.ipynb" name="" time="433.910" /><testcase classname="examples.rover.degradation_modelling.Degradation_Modelling_Notebook.ipynb" name="" time="488.310" /><testcase classname="examples.tank.Tank_Analysis.ipynb" name="" time="63.236" /><testcase classname="examples.tank.test_tank.TankTests" name="test_approach" time="9.208" /><testcase classname="examples.tank.test_tank.TankTests" name="test_approach_parallelism_0" time="8.276" /><testcase classname="examples.tank.test_tank.TankTests" name="test_approach_parallelism_1" time="20.635" /><testcase classname="examples.tank.test_tank.TankTests" name="test_approach_parallelism_notrack" time="8.278" /><testcase classname="examples.tank.test_tank.TankTests" name="test_comp_mode_inj" time="0.254" /><testcase classname="examples.tank.test_tank.TankTests" name="test_different_components" time="0.123" /><testcase classname="examples.tank.test_tank.TankTests" name="test_epc_math" time="0.079" /><testcase classname="examples.tank.test_tank.TankTests" name="test_fault_sample_isave" time="9.313" /><testcase classname="examples.tank.test_tank.TankTests" name="test_fault_sample_save" time="8.921" /><testcase classname="examples.tank.test_tank.TankTests" name="test_local_tstep" time="0.585" /><testcase classname="examples.tank.test_tank.TankTests" name="test_model_copy_different" time="3.448" /><testcase classname="examples.tank.test_tank.TankTests" name="test_model_copy_same" time="5.994" /><testcase classname="examples.tank.test_tank.TankTests" name="test_model_reset" time="0.002"><skipped type="pytest.skip" message="Reset not fully implemented yet and unused throughout.">/fmdtools/examples/tank/test_tank.py:69: Reset not fully implemented yet and unused throughout.</skipped></testcase><testcase classname="examples.tank.test_tank.TankTests" name="test_nested_sample_isave" time="94.424" /><testcase classname="examples.tank.test_tank.TankTests" name="test_nested_sample_save" time="86.652" /><testcase classname="examples.tank.test_tank.TankTests" name="test_param_sample_save" time="2.869" /><testcase classname="examples.tank.test_tank.TankTests" name="test_save_load_multfault" time="0.573" /><testcase classname="examples.tank.test_tank.TankTests" name="test_save_load_nominal" time="0.365" /><testcase classname="examples.tank.test_tank.TankTests" name="test_save_load_onefault" time="0.555" /><testcase classname="examples.tank.test_tank.TankTests" name="test_save_load_singlefaults" time="4.359" /><testcase classname="examples.tank.test_tank.TankTests" name="test_singlefaults_isave" time="4.617" /><testcase classname="examples.tank.test_tank.TankTests" name="test_tank_copy_args" time="0.099" /><testcase classname="examples.taxiway.Paper_Notebook.ipynb" name="" time="58.844" /><testcase classname="examples.taxiway.test_asset.AssetTests" name="test_avoid" time="0.470" /><testcase classname="examples.taxiway.test_asset.AssetTests" name="test_avoid_plot" time="1.196" /><testcase classname="examples.taxiway.test_asset.AssetTests" name="test_heli_cycle" time="0.137" /><testcase classname="examples.taxiway.test_asset.AssetTests" name="test_heli_cycle_plot" time="0.661" /><testcase classname="examples.taxiway.test_asset.AssetTests" name="test_lost_sight" time="1.293" /><testcase classname="examples.taxiway.test_asset.AssetTests" name="test_lost_sight_plot" time="1.486" /><testcase classname="examples.taxiway.test_asset.AssetTests" name="test_one_cycle" time="0.150" /><testcase classname="examples.taxiway.test_asset.AssetTests" name="test_one_cycle_plot" time="0.505" /><testcase classname="examples.taxiway.test_model.ModelTests" name="test_atc_lost_ground_perception" time="5.026" /><testcase classname="examples.taxiway.test_model.ModelTests" name="test_atc_lost_ground_perception_plot" time="6.839" /><testcase classname="examples.taxiway.test_model.ModelTests" name="test_atc_wrong_land_command" time="5.827" /><testcase classname="examples.taxiway.test_model.ModelTests" name="test_atc_wrong_land_command_lost_sight" time="5.557" /><testcase classname="examples.taxiway.test_model.ModelTests" name="test_atc_wrong_land_command_sight_plot" time="9.520" /><testcase classname="examples.taxiway.test_model.ModelTests" name="test_default_plots" time="8.397" /><testcase classname="examples.taxiway.test_model.ModelTests" name="test_scen" time="1.381" /><testcase classname="fmdtools.analyze.common" name="fmdtools.analyze.common.is_bool" time="0.007" /><testcase classname="fmdtools.analyze.common" name="fmdtools.analyze.common.is_numeric" time="0.006" /><testcase classname="fmdtools.analyze.common" name="fmdtools.analyze.common.join_key" time="0.005" /><testcase classname="fmdtools.analyze.common" name="fmdtools.analyze.common.nan_to_x" time="0.005" /><testcase classname="fmdtools.analyze.common" name="fmdtools.analyze.common.to_include_keys" time="0.005" /><testcase classname="fmdtools.analyze.history" name="fmdtools.analyze.history.History" time="0.007" /><testcase classname="fmdtools.analyze.history" name="fmdtools.analyze.history.History.cut" time="0.006" /><testcase classname="fmdtools.analyze.history" name="fmdtools.analyze.history.History.get_mean_bound_errhist" time="0.008" /><testcase classname="fmdtools.analyze.phases" name="fmdtools.analyze.phases.PhaseMap.calc_modephase_time" time="0.006" /><testcase classname="fmdtools.analyze.phases" name="fmdtools.analyze.phases.PhaseMap.calc_phase_time" time="0.005" /><testcase classname="fmdtools.analyze.phases" name="fmdtools.analyze.phases.PhaseMap.calc_samples_in_phases" time="0.006" /><testcase classname="fmdtools.analyze.phases" name="fmdtools.analyze.phases.PhaseMap.find_modephase" time="0.005" /><testcase classname="fmdtools.analyze.phases" name="fmdtools.analyze.phases.PhaseMap.get_phase_times" time="0.006" /><testcase classname="fmdtools.analyze.phases" name="fmdtools.analyze.phases.PhaseMap.get_sample_times" time="0.006" /><testcase classname="fmdtools.analyze.phases" name="fmdtools.analyze.phases.find_interval_overlap" time="0.006" /><testcase classname="fmdtools.analyze.phases" name="fmdtools.analyze.phases.join_phasemaps" time="0.006" /><testcase classname="fmdtools.analyze.result" name="fmdtools.analyze.result.Result" time="0.007" /><testcase classname="fmdtools.analyze.tabulate" name="fmdtools.analyze.tabulate.Comparison" time="2.388" /><testcase classname="fmdtools.analyze.graph.base" name="fmdtools.analyze.graph.base.Graph" time="0.551"><failure message="078     g: networkx.Graph&#10;079         Graph to analyze.&#10;080 &#10;081     Examples&#10;082     --------&#10;083     &gt;&gt;&gt; from fmdtools.analyze.graph.style import mod_prefix&#10;084     &gt;&gt;&gt; loc = mod_prefix()&#10;085     &gt;&gt;&gt; graph = Graph(ex_nxgraph)&#10;086     &gt;&gt;&gt; graph.set_pos(auto='kamada_kawai')&#10;087     &gt;&gt;&gt; fig, ax = graph.draw(saveas=loc+'nx_funcdecomp.svg')&#10;UNEXPECTED EXCEPTION: FileNotFoundError(2, 'No such file or directory')&#10;Traceback (most recent call last):&#10;  File &quot;/opt/conda/lib/python3.12/doctest.py&quot;, line 1368, in __run&#10;    exec(compile(example.source, filename, &quot;single&quot;,&#10;  File &quot;&lt;doctest fmdtools.analyze.graph.base.Graph[4]&gt;&quot;, line 1, in &lt;module&gt;&#10;  File &quot;/fmdtools/fmdtools/analyze/graph/base.py&quot;, line 367, in draw&#10;    nx_plot_ending(fig, ax, title, withlegend, saveas=saveas,&#10;  File &quot;/fmdtools/fmdtools/analyze/graph/style.py&quot;, line 75, in nx_plot_ending&#10;    fig.savefig(saveas, bbox_inches='tight')&#10;  File &quot;/opt/conda/lib/python3.12/site-packages/matplotlib/figure.py&quot;, line 3390, in savefig&#10;    self.canvas.print_figure(fname, **kwargs)&#10;  File &quot;/opt/conda/lib/python3.12/site-packages/matplotlib/backend_bases.py&quot;, line 2193, in print_figure&#10;    result = print_method(&#10;             ^^^^^^^^^^^^^&#10;  File &quot;/opt/conda/lib/python3.12/site-packages/matplotlib/backend_bases.py&quot;, line 2043, in &lt;lambda&gt;&#10;    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(&#10;                                                                 ^^^^^&#10;  File &quot;/opt/conda/lib/python3.12/site-packages/matplotlib/backends/backend_svg.py&quot;, line 1328, in print_svg&#10;    with cbook.open_file_cm(filename, &quot;w&quot;, encoding=&quot;utf-8&quot;) as fh:&#10;         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#10;  File &quot;/opt/conda/lib/python3.12/site-packages/matplotlib/cbook.py&quot;, line 497, in open_file_cm&#10;    fh, opened = to_filehandle(path_or_file, mode, True, encoding)&#10;                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#10;  File &quot;/opt/conda/lib/python3.12/site-packages/matplotlib/cbook.py&quot;, line 483, in to_filehandle&#10;    fh = open(fname, flag, encoding=encoding)&#10;         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#10;FileNotFoundError: [Errno 2] No such file or directory: 'docs/figures/frdl/nx_funcdecomp.svg'&#10;/fmdtools/fmdtools/analyze/graph/base.py:87: UnexpectedException">078     g: networkx.Graph
079         Graph to analyze.
080 
081     Examples
082     --------
083     &gt;&gt;&gt; from fmdtools.analyze.graph.style import mod_prefix
084     &gt;&gt;&gt; loc = mod_prefix()
085     &gt;&gt;&gt; graph = Graph(ex_nxgraph)
086     &gt;&gt;&gt; graph.set_pos(auto='kamada_kawai')
087     &gt;&gt;&gt; fig, ax = graph.draw(saveas=loc+'nx_funcdecomp.svg')
UNEXPECTED EXCEPTION: FileNotFoundError(2, 'No such file or directory')
Traceback (most recent call last):
  File "/opt/conda/lib/python3.12/doctest.py", line 1368, in __run
    exec(compile(example.source, filename, "single",
  File "&lt;doctest fmdtools.analyze.graph.base.Graph[4]&gt;", line 1, in &lt;module&gt;
  File "/fmdtools/fmdtools/analyze/graph/base.py", line 367, in draw
    nx_plot_ending(fig, ax, title, withlegend, saveas=saveas,
  File "/fmdtools/fmdtools/analyze/graph/style.py", line 75, in nx_plot_ending
    fig.savefig(saveas, bbox_inches='tight')
  File "/opt/conda/lib/python3.12/site-packages/matplotlib/figure.py", line 3390, in savefig
    self.canvas.print_figure(fname, **kwargs)
  File "/opt/conda/lib/python3.12/site-packages/matplotlib/backend_bases.py", line 2193, in print_figure
    result = print_method(
             ^^^^^^^^^^^^^
  File "/opt/conda/lib/python3.12/site-packages/matplotlib/backend_bases.py", line 2043, in &lt;lambda&gt;
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
                                                                 ^^^^^
  File "/opt/conda/lib/python3.12/site-packages/matplotlib/backends/backend_svg.py", line 1328, in print_svg
    with cbook.open_file_cm(filename, "w", encoding="utf-8") as fh:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/conda/lib/python3.12/site-packages/matplotlib/cbook.py", line 497, in open_file_cm
    fh, opened = to_filehandle(path_or_file, mode, True, encoding)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/conda/lib/python3.12/site-packages/matplotlib/cbook.py", line 483, in to_filehandle
    fh = open(fname, flag, encoding=encoding)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: 'docs/figures/frdl/nx_funcdecomp.svg'
/fmdtools/fmdtools/analyze/graph/base.py:87: UnexpectedException</failure></testcase><testcase classname="fmdtools.analyze.graph.base" name="fmdtools.analyze.graph.base.Graph.add_node_groups" time="0.131" /><testcase classname="fmdtools.analyze.graph.base" name="fmdtools.analyze.graph.base.Graph.set_heatmap" time="0.123" /><testcase classname="fmdtools.analyze.graph.style" name="fmdtools.analyze.graph.style.FlowEdgeStyle" time="0.004" /><testcase classname="fmdtools.analyze.graph.style" name="fmdtools.analyze.graph.style.edge_style_factory" time="0.138"><failure message="291     styles : dict&#10;292         edge_styles based on style membership&#10;293     **kwargs : kwargs&#10;294         Additional keyword arguments for the EdgeStyle&#10;295 &#10;296     Examples&#10;297     --------&#10;298     &gt;&gt;&gt; loc = mod_prefix()&#10;299     &gt;&gt;&gt; fs = edge_style_factory('flow')&#10;300     &gt;&gt;&gt; fig, ax = fs.show_nx(saveas=loc+'nx_flowconnection.svg')&#10;UNEXPECTED EXCEPTION: FileNotFoundError(2, 'No such file or directory')&#10;Traceback (most recent call last):&#10;  File &quot;/opt/conda/lib/python3.12/doctest.py&quot;, line 1368, in __run&#10;    exec(compile(example.source, filename, &quot;single&quot;,&#10;  File &quot;&lt;doctest fmdtools.analyze.graph.style.edge_style_factory[2]&gt;&quot;, line 1, in &lt;module&gt;&#10;  File &quot;/fmdtools/fmdtools/analyze/graph/style.py&quot;, line 181, in show_nx&#10;    nx_plot_ending(fig, ax, title=self.__class__.__name__, withlegend=withlegend,&#10;  File &quot;/fmdtools/fmdtools/analyze/graph/style.py&quot;, line 75, in nx_plot_ending&#10;    fig.savefig(saveas, bbox_inches='tight')&#10;  File &quot;/opt/conda/lib/python3.12/site-packages/matplotlib/figure.py&quot;, line 3390, in savefig&#10;    self.canvas.print_figure(fname, **kwargs)&#10;  File &quot;/opt/conda/lib/python3.12/site-packages/matplotlib/backend_bases.py&quot;, line 2193, in print_figure&#10;    result = print_method(&#10;             ^^^^^^^^^^^^^&#10;  File &quot;/opt/conda/lib/python3.12/site-packages/matplotlib/backend_bases.py&quot;, line 2043, in &lt;lambda&gt;&#10;    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(&#10;                                                                 ^^^^^&#10;  File &quot;/opt/conda/lib/python3.12/site-packages/matplotlib/backends/backend_svg.py&quot;, line 1328, in print_svg&#10;    with cbook.open_file_cm(filename, &quot;w&quot;, encoding=&quot;utf-8&quot;) as fh:&#10;         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#10;  File &quot;/opt/conda/lib/python3.12/site-packages/matplotlib/cbook.py&quot;, line 497, in open_file_cm&#10;    fh, opened = to_filehandle(path_or_file, mode, True, encoding)&#10;                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#10;  File &quot;/opt/conda/lib/python3.12/site-packages/matplotlib/cbook.py&quot;, line 483, in to_filehandle&#10;    fh = open(fname, flag, encoding=encoding)&#10;         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#10;FileNotFoundError: [Errno 2] No such file or directory: 'docs/figures/frdl/nx_flowconnection.svg'&#10;/fmdtools/fmdtools/analyze/graph/style.py:300: UnexpectedException">291     styles : dict
292         edge_styles based on style membership
293     **kwargs : kwargs
294         Additional keyword arguments for the EdgeStyle
295 
296     Examples
297     --------
298     &gt;&gt;&gt; loc = mod_prefix()
299     &gt;&gt;&gt; fs = edge_style_factory('flow')
300     &gt;&gt;&gt; fig, ax = fs.show_nx(saveas=loc+'nx_flowconnection.svg')
UNEXPECTED EXCEPTION: FileNotFoundError(2, 'No such file or directory')
Traceback (most recent call last):
  File "/opt/conda/lib/python3.12/doctest.py", line 1368, in __run
    exec(compile(example.source, filename, "single",
  File "&lt;doctest fmdtools.analyze.graph.style.edge_style_factory[2]&gt;", line 1, in &lt;module&gt;
  File "/fmdtools/fmdtools/analyze/graph/style.py", line 181, in show_nx
    nx_plot_ending(fig, ax, title=self.__class__.__name__, withlegend=withlegend,
  File "/fmdtools/fmdtools/analyze/graph/style.py", line 75, in nx_plot_ending
    fig.savefig(saveas, bbox_inches='tight')
  File "/opt/conda/lib/python3.12/site-packages/matplotlib/figure.py", line 3390, in savefig
    self.canvas.print_figure(fname, **kwargs)
  File "/opt/conda/lib/python3.12/site-packages/matplotlib/backend_bases.py", line 2193, in print_figure
    result = print_method(
             ^^^^^^^^^^^^^
  File "/opt/conda/lib/python3.12/site-packages/matplotlib/backend_bases.py", line 2043, in &lt;lambda&gt;
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
                                                                 ^^^^^
  File "/opt/conda/lib/python3.12/site-packages/matplotlib/backends/backend_svg.py", line 1328, in print_svg
    with cbook.open_file_cm(filename, "w", encoding="utf-8") as fh:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/conda/lib/python3.12/site-packages/matplotlib/cbook.py", line 497, in open_file_cm
    fh, opened = to_filehandle(path_or_file, mode, True, encoding)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/conda/lib/python3.12/site-packages/matplotlib/cbook.py", line 483, in to_filehandle
    fh = open(fname, flag, encoding=encoding)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: 'docs/figures/frdl/nx_flowconnection.svg'
/fmdtools/fmdtools/analyze/graph/style.py:300: UnexpectedException</failure></testcase><testcase classname="fmdtools.analyze.graph.style" name="fmdtools.analyze.graph.style.node_style_factory" time="0.244"><failure message="512     styles : dict&#10;513         edge_styles/node_styles&#10;514     label : tuple&#10;515         tuple of tag values to create the keywords for&#10;516 &#10;517     Examples&#10;518     --------&#10;519     &gt;&gt;&gt; loc = mod_prefix()&#10;520     &gt;&gt;&gt; fs = node_style_factory('flow')&#10;521     &gt;&gt;&gt; fig, ax = fs.show_nx(saveas=loc+'nx_flow.svg')&#10;UNEXPECTED EXCEPTION: FileNotFoundError(2, 'No such file or directory')&#10;Traceback (most recent call last):&#10;  File &quot;/opt/conda/lib/python3.12/doctest.py&quot;, line 1368, in __run&#10;    exec(compile(example.source, filename, &quot;single&quot;,&#10;  File &quot;&lt;doctest fmdtools.analyze.graph.style.node_style_factory[2]&gt;&quot;, line 1, in &lt;module&gt;&#10;  File &quot;/fmdtools/fmdtools/analyze/graph/style.py&quot;, line 392, in show_nx&#10;    nx_plot_ending(fig, ax, title=self.__class__.__name__, withlegend=withlegend,&#10;  File &quot;/fmdtools/fmdtools/analyze/graph/style.py&quot;, line 75, in nx_plot_ending&#10;    fig.savefig(saveas, bbox_inches='tight')&#10;  File &quot;/opt/conda/lib/python3.12/site-packages/matplotlib/figure.py&quot;, line 3390, in savefig&#10;    self.canvas.print_figure(fname, **kwargs)&#10;  File &quot;/opt/conda/lib/python3.12/site-packages/matplotlib/backend_bases.py&quot;, line 2193, in print_figure&#10;    result = print_method(&#10;             ^^^^^^^^^^^^^&#10;  File &quot;/opt/conda/lib/python3.12/site-packages/matplotlib/backend_bases.py&quot;, line 2043, in &lt;lambda&gt;&#10;    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(&#10;                                                                 ^^^^^&#10;  File &quot;/opt/conda/lib/python3.12/site-packages/matplotlib/backends/backend_svg.py&quot;, line 1328, in print_svg&#10;    with cbook.open_file_cm(filename, &quot;w&quot;, encoding=&quot;utf-8&quot;) as fh:&#10;         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#10;  File &quot;/opt/conda/lib/python3.12/site-packages/matplotlib/cbook.py&quot;, line 497, in open_file_cm&#10;    fh, opened = to_filehandle(path_or_file, mode, True, encoding)&#10;                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#10;  File &quot;/opt/conda/lib/python3.12/site-packages/matplotlib/cbook.py&quot;, line 483, in to_filehandle&#10;    fh = open(fname, flag, encoding=encoding)&#10;         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#10;FileNotFoundError: [Errno 2] No such file or directory: 'docs/figures/frdl/nx_flow.svg'&#10;/fmdtools/fmdtools/analyze/graph/style.py:521: UnexpectedException">512     styles : dict
513         edge_styles/node_styles
514     label : tuple
515         tuple of tag values to create the keywords for
516 
517     Examples
518     --------
519     &gt;&gt;&gt; loc = mod_prefix()
520     &gt;&gt;&gt; fs = node_style_factory('flow')
521     &gt;&gt;&gt; fig, ax = fs.show_nx(saveas=loc+'nx_flow.svg')
UNEXPECTED EXCEPTION: FileNotFoundError(2, 'No such file or directory')
Traceback (most recent call last):
  File "/opt/conda/lib/python3.12/doctest.py", line 1368, in __run
    exec(compile(example.source, filename, "single",
  File "&lt;doctest fmdtools.analyze.graph.style.node_style_factory[2]&gt;", line 1, in &lt;module&gt;
  File "/fmdtools/fmdtools/analyze/graph/style.py", line 392, in show_nx
    nx_plot_ending(fig, ax, title=self.__class__.__name__, withlegend=withlegend,
  File "/fmdtools/fmdtools/analyze/graph/style.py", line 75, in nx_plot_ending
    fig.savefig(saveas, bbox_inches='tight')
  File "/opt/conda/lib/python3.12/site-packages/matplotlib/figure.py", line 3390, in savefig
    self.canvas.print_figure(fname, **kwargs)
  File "/opt/conda/lib/python3.12/site-packages/matplotlib/backend_bases.py", line 2193, in print_figure
    result = print_method(
             ^^^^^^^^^^^^^
  File "/opt/conda/lib/python3.12/site-packages/matplotlib/backend_bases.py", line 2043, in &lt;lambda&gt;
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
                                                                 ^^^^^
  File "/opt/conda/lib/python3.12/site-packages/matplotlib/backends/backend_svg.py", line 1328, in print_svg
    with cbook.open_file_cm(filename, "w", encoding="utf-8") as fh:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/conda/lib/python3.12/site-packages/matplotlib/cbook.py", line 497, in open_file_cm
    fh, opened = to_filehandle(path_or_file, mode, True, encoding)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/conda/lib/python3.12/site-packages/matplotlib/cbook.py", line 483, in to_filehandle
    fh = open(fname, flag, encoding=encoding)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: 'docs/figures/frdl/nx_flow.svg'
/fmdtools/fmdtools/analyze/graph/style.py:521: UnexpectedException</failure></testcase><testcase classname="fmdtools.analyze.graph.style" name="fmdtools.analyze.graph.style.to_legend_label" time="0.006" /><testcase classname="fmdtools.define.environment" name="fmdtools.define.environment.Environment" time="0.033" /><testcase classname="fmdtools.define.environment" name="fmdtools.define.environment.Environment.copy" time="0.062" /><testcase classname="fmdtools.define.architecture.action" name="fmdtools.define.architecture.action.ActionArchitectureActGraph" time="0.016" /><testcase classname="fmdtools.define.architecture.action" name="fmdtools.define.architecture.action.ActionArchitectureFlowGraph" time="0.015" /><testcase classname="fmdtools.define.architecture.action" name="fmdtools.define.architecture.action.ActionArchitectureGraph" time="0.015" /><testcase classname="fmdtools.define.architecture.function" name="fmdtools.define.architecture.function.FunctionArchitecture" time="0.018" /><testcase classname="fmdtools.define.architecture.function" name="fmdtools.define.architecture.function.FunctionArchitectureFlowGraph" time="0.019" /><testcase classname="fmdtools.define.architecture.function" name="fmdtools.define.architecture.function.FunctionArchitectureFxnGraph" time="0.021" /><testcase classname="fmdtools.define.architecture.function" name="fmdtools.define.architecture.function.FunctionArchitectureGraph" time="0.020" /><testcase classname="fmdtools.define.architecture.function" name="fmdtools.define.architecture.function.FunctionArchitectureTypeGraph" time="0.010" /><testcase classname="fmdtools.define.architecture.geom" name="fmdtools.define.architecture.geom.GeomArchitecture" time="0.009" /><testcase classname="fmdtools.define.architecture.geom" name="fmdtools.define.architecture.geom.GeomArchitecture.all_at" time="0.010" /><testcase classname="fmdtools.define.block.action" name="fmdtools.define.block.action.Action" time="0.006" /><testcase classname="fmdtools.define.block.base" name="fmdtools.define.block.base.SimParam.get_hist_ind" time="0.004" /><testcase classname="fmdtools.define.block.base" name="fmdtools.define.block.base.SimParam.get_shift" time="0.004" /><testcase classname="fmdtools.define.block.base" name="fmdtools.define.block.base.SimParam.get_timerange" time="0.004" /><testcase classname="fmdtools.define.block.function" name="fmdtools.define.block.function.Function" time="0.007" /><testcase classname="fmdtools.define.container.base" name="fmdtools.define.container.base.BaseContainer.assign" time="0.005" /><testcase classname="fmdtools.define.container.base" name="fmdtools.define.container.base.BaseContainer.copy" time="0.004" /><testcase classname="fmdtools.define.container.base" name="fmdtools.define.container.base.BaseContainer.create_hist" time="0.003" /><testcase classname="fmdtools.define.container.base" name="fmdtools.define.container.base.BaseContainer.get_field_dict" time="0.004" /><testcase classname="fmdtools.define.container.base" name="fmdtools.define.container.base.BaseContainer.set_field" time="0.004" /><testcase classname="fmdtools.define.container.base" name="fmdtools.define.container.base.BaseContainer.to_default" time="0.004" /><testcase classname="fmdtools.define.container.base" name="fmdtools.define.container.base.check_container_pick" time="0.004" /><testcase classname="fmdtools.define.container.mode" name="fmdtools.define.container.mode.Fault.calc_rate" time="0.004" /><testcase classname="fmdtools.define.container.mode" name="fmdtools.define.container.mode.Mode" time="0.005" /><testcase classname="fmdtools.define.container.parameter" name="fmdtools.define.container.parameter.Parameter" time="0.005" /><testcase classname="fmdtools.define.container.rand" name="fmdtools.define.container.rand.Rand" time="0.007" /><testcase classname="fmdtools.define.container.rand" name="fmdtools.define.container.rand.Rand.get_rand_states" time="0.004" /><testcase classname="fmdtools.define.container.state" name="fmdtools.define.container.state.State" time="0.005" /><testcase classname="fmdtools.define.container.state" name="fmdtools.define.container.state.State.add" time="0.003" /><testcase classname="fmdtools.define.container.state" name="fmdtools.define.container.state.State.div" time="0.003" /><testcase classname="fmdtools.define.container.state" name="fmdtools.define.container.state.State.get" time="0.004" /><testcase classname="fmdtools.define.container.state" name="fmdtools.define.container.state.State.gett" time="0.003" /><testcase classname="fmdtools.define.container.state" name="fmdtools.define.container.state.State.inc" time="0.004" /><testcase classname="fmdtools.define.container.state" name="fmdtools.define.container.state.State.limit" time="0.003" /><testcase classname="fmdtools.define.container.state" name="fmdtools.define.container.state.State.mul" time="0.003" /><testcase classname="fmdtools.define.container.state" name="fmdtools.define.container.state.State.put" time="0.003" /><testcase classname="fmdtools.define.container.state" name="fmdtools.define.container.state.State.roundto" time="0.004" /><testcase classname="fmdtools.define.container.state" name="fmdtools.define.container.state.State.same" time="0.004" /><testcase classname="fmdtools.define.container.state" name="fmdtools.define.container.state.State.set_atts" time="0.004" /><testcase classname="fmdtools.define.container.state" name="fmdtools.define.container.state.State.sub" time="0.003" /><testcase classname="fmdtools.define.container.time" name="fmdtools.define.container.time.Time" time="0.006" /><testcase classname="fmdtools.define.flow.base" name="fmdtools.define.flow.base.Flow" time="0.006" /><testcase classname="fmdtools.define.object.base" name="fmdtools.define.object.base.BaseObject" time="0.007" /><testcase classname="fmdtools.define.object.base" name="fmdtools.define.object.base.BaseObject.assign_roles" time="0.005" /><testcase classname="fmdtools.define.object.base" name="fmdtools.define.object.base.BaseObject.get_att_roletype" time="0.004" /><testcase classname="fmdtools.define.object.base" name="fmdtools.define.object.base.BaseObject.get_node_attrs" time="0.005" /><testcase classname="fmdtools.define.object.coords" name="fmdtools.define.object.coords.Coords" time="0.010" /><testcase classname="fmdtools.define.object.coords" name="fmdtools.define.object.coords.Coords.copy" time="0.007" /><testcase classname="fmdtools.define.object.coords" name="fmdtools.define.object.coords.Coords.find_all" time="0.007" /><testcase classname="fmdtools.define.object.coords" name="fmdtools.define.object.coords.Coords.find_all_prop" time="0.005" /><testcase classname="fmdtools.define.object.coords" name="fmdtools.define.object.coords.Coords.find_closest" time="0.006" /><testcase classname="fmdtools.define.object.coords" name="fmdtools.define.object.coords.Coords.get" time="0.005" /><testcase classname="fmdtools.define.object.coords" name="fmdtools.define.object.coords.Coords.get_neighbors" time="0.009" /><testcase classname="fmdtools.define.object.coords" name="fmdtools.define.object.coords.Coords.get_properties" time="0.005" /><testcase classname="fmdtools.define.object.coords" name="fmdtools.define.object.coords.Coords.in_area" time="0.005" /><testcase classname="fmdtools.define.object.coords" name="fmdtools.define.object.coords.Coords.set" time="0.005" /><testcase classname="fmdtools.define.object.coords" name="fmdtools.define.object.coords.Coords.set_pts" time="0.005" /><testcase classname="fmdtools.define.object.coords" name="fmdtools.define.object.coords.Coords.set_rand_pts" time="0.005" /><testcase classname="fmdtools.define.object.coords" name="fmdtools.define.object.coords.Coords.set_range" time="0.011" /><testcase classname="fmdtools.define.object.coords" name="fmdtools.define.object.coords.Coords.to_gridpoint" time="0.006" /><testcase classname="fmdtools.define.object.coords" name="fmdtools.define.object.coords.Coords.to_index" time="0.005" /><testcase classname="fmdtools.define.object.coords" name="fmdtools.define.object.coords.CoordsParam" time="0.005" /><testcase classname="fmdtools.define.object.geom" name="fmdtools.define.object.geom.Geom.all_at" time="0.006" /><testcase classname="fmdtools.define.object.geom" name="fmdtools.define.object.geom.Geom.vect_at_shape" time="0.006" /><testcase classname="fmdtools.define.object.geom" name="fmdtools.define.object.geom.Geom.vect_to_shape" time="0.006" /><testcase classname="fmdtools.define.object.geom" name="fmdtools.define.object.geom.GeomLine" time="0.005" /><testcase classname="fmdtools.define.object.geom" name="fmdtools.define.object.geom.GeomPoint" time="0.006" /><testcase classname="fmdtools.define.object.geom" name="fmdtools.define.object.geom.GeomPoly" time="0.005" /><testcase classname="fmdtools.define.object.geom" name="fmdtools.define.object.geom.LineParam" time="0.005" /><testcase classname="fmdtools.define.object.geom" name="fmdtools.define.object.geom.PointParam" time="0.004" /><testcase classname="fmdtools.define.object.geom" name="fmdtools.define.object.geom.PolyParam" time="0.004" /><testcase classname="fmdtools.define.object.timer" name="fmdtools.define.object.timer.Timer" time="0.004" /><testcase classname="fmdtools.sim.sample" name="fmdtools.sim.sample.FaultDomain.add_all" time="0.047" /><testcase classname="fmdtools.sim.sample" name="fmdtools.sim.sample.FaultDomain.add_all_fxn_modes" time="0.046" /><testcase classname="fmdtools.sim.sample" name="fmdtools.sim.sample.FaultDomain.add_all_fxnclass_modes" time="0.029" /><testcase classname="fmdtools.sim.sample" name="fmdtools.sim.sample.FaultDomain.add_faults" time="0.045" /><testcase classname="fmdtools.sim.sample" name="fmdtools.sim.sample.FaultDomain.add_singlecomp_modes" time="0.045" /><testcase classname="fmdtools.sim.sample" name="fmdtools.sim.sample.FaultSample.add_fault_phases" time="0.046" /><testcase classname="fmdtools.sim.sample" name="fmdtools.sim.sample.FaultSample.add_fault_times" time="0.047" /><testcase classname="fmdtools.sim.sample" name="fmdtools.sim.sample.FaultSample.add_joint_fault_scenario" time="0.046" /><testcase classname="fmdtools.sim.sample" name="fmdtools.sim.sample.FaultSample.add_single_fault_scenario" time="0.044" /><testcase classname="fmdtools.sim.sample" name="fmdtools.sim.sample.ParameterDomain" time="0.006" /><testcase classname="fmdtools.sim.sample" name="fmdtools.sim.sample.ParameterDomain.get_var_iters" time="0.003" /><testcase classname="fmdtools.sim.sample" name="fmdtools.sim.sample.ParameterHistSample" time="0.005" /><testcase classname="fmdtools.sim.sample" name="fmdtools.sim.sample.ParameterResultSample" time="0.005" /><testcase classname="fmdtools.sim.sample" name="fmdtools.sim.sample.ParameterSample.add_variable_ranges" time="0.006" /><testcase classname="fmdtools.sim.sample" name="fmdtools.sim.sample.ParameterSample.add_variable_replicates" time="0.004" /><testcase classname="fmdtools.sim.sample" name="fmdtools.sim.sample.ParameterSample.add_variable_scenario" time="0.003" /><testcase classname="fmdtools.sim.sample" name="fmdtools.sim.sample.ParameterSample.combine_orthogonal" time="0.003" /><testcase classname="fmdtools.sim.sample" name="fmdtools.sim.sample.ParameterSample.combine_product" time="0.003" /><testcase classname="fmdtools.sim.sample" name="fmdtools.sim.sample.ParameterSample.combine_random" time="0.004" /><testcase classname="fmdtools.sim.sample" name="fmdtools.sim.sample.SampleApproach.add_faultdomain" time="0.046" /><testcase classname="fmdtools.sim.sample" name="fmdtools.sim.sample.SampleApproach.add_faultsample" time="0.054" /><testcase classname="fmdtools.sim.sample" name="fmdtools.sim.sample.combine_orthogonal" time="0.003" /><testcase classname="fmdtools.sim.sample" name="fmdtools.sim.sample.combine_random" time="0.003" /><testcase classname="fmdtools.sim.sample" name="fmdtools.sim.sample.sample_times_even" time="0.004" /><testcase classname="fmdtools.sim.sample" name="fmdtools.sim.sample.sample_times_quad" time="0.004" /><testcase classname="fmdtools.sim.scenario" name="fmdtools.sim.scenario.Sequence" time="0.003" /><testcase classname="fmdtools.sim.scenario" name="fmdtools.sim.scenario.Sequence.update_sequence" time="0.003" /><testcase classname="fmdtools.sim.search" name="fmdtools.sim.search.DisturbanceProblem.__init__" time="0.032" /><testcase classname="fmdtools.sim.search" name="fmdtools.sim.search.HistoryObjective" time="0.003" /><testcase classname="fmdtools.sim.search" name="fmdtools.sim.search.ParameterSimProblem" time="0.156" /><testcase classname="fmdtools.sim.search" name="fmdtools.sim.search.ProblemArchitecture" time="0.071" /><testcase classname="fmdtools.sim.search" name="fmdtools.sim.search.ProblemArchitecture.update_full_problem" time="0.051" /><testcase classname="fmdtools.sim.search" name="fmdtools.sim.search.ProblemArchitecture.update_problem" time="0.033" /><testcase classname="fmdtools.sim.search" name="fmdtools.sim.search.ResultConstraint.con_from_value" time="0.004" /><testcase classname="fmdtools.sim.search" name="fmdtools.sim.search.ResultObjective.get_result_value" time="0.004" /><testcase classname="fmdtools.sim.search" name="fmdtools.sim.search.SimpleProblem" time="0.004" /><testcase classname="fmdtools.sim.search" name="fmdtools.sim.search.SingleFaultScenarioProblem" time="0.029" /><testcase classname="tests.test_graph.ModelGraphTests" name="test_fault_plot" time="1.075" /><testcase classname="tests.test_graph.ModelGraphTests" name="test_flowgraph_plot" time="0.517" /><testcase classname="tests.test_graph.ModelGraphTests" name="test_fxngraph_plot" time="0.354" /><testcase classname="tests.test_graph.ModelGraphTests" name="test_modelgraph_plot" time="0.530" /><testcase classname="tests.test_graph.ModelGraphTests" name="test_result_from_plot" time="0.607"><failure message="graphviz.backend.execute.ExecutableNotFound: failed to execute PosixPath('dot'), make sure the Graphviz executables are on your systems' PATH">cmd = [PosixPath('dot'), '-Kdot', '-Tsvg']
input_lines = &lt;generator object Dot.__iter__ at 0x7facc14dc590&gt;
encoding = 'utf-8', quiet = False
kwargs = {'encoding': 'utf-8', 'startupinfo': None, 'stderr': -1, 'stdout': -1}

    def run_check(cmd: typing.Sequence[typing.Union[os.PathLike, str]], *,
                  input_lines: typing.Optional[BytesOrStrIterator] = None,
                  encoding: typing.Optional[str] = None,
                  quiet: bool = False,
                  **kwargs) -&gt; subprocess.CompletedProcess:
        """Run the command described by ``cmd``
            with ``check=True`` and return its completed process.
    
        Raises:
            CalledProcessError: if the returncode of the subprocess is non-zero.
        """
        log.debug('run %r', cmd)
        if not kwargs.pop('check', True):  # pragma: no cover
            raise NotImplementedError('check must be True or omited')
    
        if encoding is not None:
            kwargs['encoding'] = encoding
    
        kwargs.setdefault('startupinfo', _compat.get_startupinfo())
    
        try:
            if input_lines is not None:
                assert kwargs.get('input') is None
                assert iter(input_lines) is input_lines
                if kwargs.pop('capture_output'):
                    kwargs['stdout'] = kwargs['stderr'] = subprocess.PIPE
&gt;               proc = _run_input_lines(cmd, input_lines, kwargs=kwargs)

/opt/conda/lib/python3.12/site-packages/graphviz/backend/execute.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/conda/lib/python3.12/site-packages/graphviz/backend/execute.py:96: in _run_input_lines
    popen = subprocess.Popen(cmd, stdin=subprocess.PIPE, **kwargs)
/opt/conda/lib/python3.12/subprocess.py:1026: in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Popen: returncode: 255 args: [PosixPath('dot'), '-Kdot', '-Tsvg']&gt;
args = [PosixPath('dot'), '-Kdot', '-Tsvg'], executable = b'dot'
preexec_fn = None, close_fds = True, pass_fds = (), cwd = None, env = None
startupinfo = None, creationflags = 0, shell = False, p2cread = 16
p2cwrite = 17, c2pread = 18, c2pwrite = 19, errread = 20, errwrite = 21
restore_signals = True, gid = None, gids = None, uid = None, umask = -1
start_new_session = False, process_group = -1

    def _execute_child(self, args, executable, preexec_fn, close_fds,
                       pass_fds, cwd, env,
                       startupinfo, creationflags, shell,
                       p2cread, p2cwrite,
                       c2pread, c2pwrite,
                       errread, errwrite,
                       restore_signals,
                       gid, gids, uid, umask,
                       start_new_session, process_group):
        """Execute program (POSIX version)"""
    
        if isinstance(args, (str, bytes)):
            args = [args]
        elif isinstance(args, os.PathLike):
            if shell:
                raise TypeError('path-like args is not allowed when '
                                'shell is true')
            args = [args]
        else:
            args = list(args)
    
        if shell:
            # On Android the default shell is at '/system/bin/sh'.
            unix_shell = ('/system/bin/sh' if
                      hasattr(sys, 'getandroidapilevel') else '/bin/sh')
            args = [unix_shell, "-c"] + args
            if executable:
                args[0] = executable
    
        if executable is None:
            executable = args[0]
    
        sys.audit("subprocess.Popen", executable, args, cwd, env)
    
        if (_USE_POSIX_SPAWN
                and os.path.dirname(executable)
                and preexec_fn is None
                and not close_fds
                and not pass_fds
                and cwd is None
                and (p2cread == -1 or p2cread &gt; 2)
                and (c2pwrite == -1 or c2pwrite &gt; 2)
                and (errwrite == -1 or errwrite &gt; 2)
                and not start_new_session
                and process_group == -1
                and gid is None
                and gids is None
                and uid is None
                and umask &lt; 0):
            self._posix_spawn(args, executable, env, restore_signals,
                              p2cread, p2cwrite,
                              c2pread, c2pwrite,
                              errread, errwrite)
            return
    
        orig_executable = executable
    
        # For transferring possible exec failure from child to parent.
        # Data format: "exception name:hex errno:description"
        # Pickle is not used; it is complex and involves memory allocation.
        errpipe_read, errpipe_write = os.pipe()
        # errpipe_write must not be in the standard io 0, 1, or 2 fd range.
        low_fds_to_close = []
        while errpipe_write &lt; 3:
            low_fds_to_close.append(errpipe_write)
            errpipe_write = os.dup(errpipe_write)
        for low_fd in low_fds_to_close:
            os.close(low_fd)
        try:
            try:
                # We must avoid complex work that could involve
                # malloc or free in the child process to avoid
                # potential deadlocks, thus we do all this here.
                # and pass it to fork_exec()
    
                if env is not None:
                    env_list = []
                    for k, v in env.items():
                        k = os.fsencode(k)
                        if b'=' in k:
                            raise ValueError("illegal environment variable name")
                        env_list.append(k + b'=' + os.fsencode(v))
                else:
                    env_list = None  # Use execv instead of execve.
                executable = os.fsencode(executable)
                if os.path.dirname(executable):
                    executable_list = (executable,)
                else:
                    # This matches the behavior of os._execvpe().
                    executable_list = tuple(
                        os.path.join(os.fsencode(dir), executable)
                        for dir in os.get_exec_path(env))
                fds_to_keep = set(pass_fds)
                fds_to_keep.add(errpipe_write)
                self.pid = _fork_exec(
                        args, executable_list,
                        close_fds, tuple(sorted(map(int, fds_to_keep))),
                        cwd, env_list,
                        p2cread, p2cwrite, c2pread, c2pwrite,
                        errread, errwrite,
                        errpipe_read, errpipe_write,
                        restore_signals, start_new_session,
                        process_group, gid, gids, uid, umask,
                        preexec_fn, _USE_VFORK)
                self._child_created = True
            finally:
                # be sure the FD is closed no matter what
                os.close(errpipe_write)
    
            self._close_pipe_fds(p2cread, p2cwrite,
                                 c2pread, c2pwrite,
                                 errread, errwrite)
    
            # Wait for exec to fail or succeed; possibly raising an
            # exception (limited in size)
            errpipe_data = bytearray()
            while True:
                part = os.read(errpipe_read, 50000)
                errpipe_data += part
                if not part or len(errpipe_data) &gt; 50000:
                    break
        finally:
            # be sure the FD is closed no matter what
            os.close(errpipe_read)
    
        if errpipe_data:
            try:
                pid, sts = os.waitpid(self.pid, 0)
                if pid == self.pid:
                    self._handle_exitstatus(sts)
                else:
                    self.returncode = sys.maxsize
            except ChildProcessError:
                pass
    
            try:
                exception_name, hex_errno, err_msg = (
                        errpipe_data.split(b':', 2))
                # The encoding here should match the encoding
                # written in by the subprocess implementations
                # like _posixsubprocess
                err_msg = err_msg.decode()
            except ValueError:
                exception_name = b'SubprocessError'
                hex_errno = b'0'
                err_msg = 'Bad exception data from child: {!r}'.format(
                              bytes(errpipe_data))
            child_exception_type = getattr(
                    builtins, exception_name.decode('ascii'),
                    SubprocessError)
            if issubclass(child_exception_type, OSError) and hex_errno:
                errno_num = int(hex_errno, 16)
                if err_msg == "noexec:chdir":
                    err_msg = ""
                    # The error must be from chdir(cwd).
                    err_filename = cwd
                elif err_msg == "noexec":
                    err_msg = ""
                    err_filename = None
                else:
                    err_filename = orig_executable
                if errno_num != 0:
                    err_msg = os.strerror(errno_num)
                if err_filename is not None:
&gt;                   raise child_exception_type(errno_num, err_msg, err_filename)
E                   FileNotFoundError: [Errno 2] No such file or directory: PosixPath('dot')

/opt/conda/lib/python3.12/subprocess.py:1955: FileNotFoundError

The above exception was the direct cause of the following exception:

self = &lt;tests.test_graph.ModelGraphTests testMethod=test_result_from_plot&gt;

    def test_result_from_plot(self):
        des_res = ['graph', 'endclass', 'endfaults']
        er, hist = propagate.one_fault(self.mdl, 'move_water', 'short',
                                       time=10, track='all', desired_result=des_res)
        mg = FunctionArchitectureGraph(self.mdl)
        mg.draw_from(11, hist)
&gt;       mg.draw_graphviz_from(11, hist)

tests/test_graph.py:91: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
fmdtools/analyze/graph/model.py:285: in draw_graphviz_from
    self.draw_graphviz(**kwargs)
fmdtools/define/architecture/function.py:194: in draw_graphviz
    return super().draw_graphviz(layout=layout, overlap=overlap, **kwargs)
fmdtools/analyze/graph/base.py:434: in draw_graphviz
    gv_plot_ending(dot, disp=disp, saveas=saveas)
fmdtools/analyze/graph/style.py:81: in gv_plot_ending
    display(SVG(dot._repr_image_svg_xml()))
/opt/conda/lib/python3.12/site-packages/graphviz/jupyter_integration.py:112: in _repr_image_svg_xml
    return self.pipe(format='svg', encoding=SVG_ENCODING)
/opt/conda/lib/python3.12/site-packages/graphviz/piping.py:104: in pipe
    return self._pipe_legacy(format,
/opt/conda/lib/python3.12/site-packages/graphviz/_tools.py:171: in wrapper
    return func(*args, **kwargs)
/opt/conda/lib/python3.12/site-packages/graphviz/piping.py:121: in _pipe_legacy
    return self._pipe_future(format,
/opt/conda/lib/python3.12/site-packages/graphviz/piping.py:149: in _pipe_future
    return self._pipe_lines_string(*args, encoding=encoding, **kwargs)
/opt/conda/lib/python3.12/site-packages/graphviz/backend/piping.py:212: in pipe_lines_string
    proc = execute.run_check(cmd, capture_output=True, quiet=quiet, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = [PosixPath('dot'), '-Kdot', '-Tsvg']
input_lines = &lt;generator object Dot.__iter__ at 0x7facc14dc590&gt;
encoding = 'utf-8', quiet = False
kwargs = {'encoding': 'utf-8', 'startupinfo': None, 'stderr': -1, 'stdout': -1}

    def run_check(cmd: typing.Sequence[typing.Union[os.PathLike, str]], *,
                  input_lines: typing.Optional[BytesOrStrIterator] = None,
                  encoding: typing.Optional[str] = None,
                  quiet: bool = False,
                  **kwargs) -&gt; subprocess.CompletedProcess:
        """Run the command described by ``cmd``
            with ``check=True`` and return its completed process.
    
        Raises:
            CalledProcessError: if the returncode of the subprocess is non-zero.
        """
        log.debug('run %r', cmd)
        if not kwargs.pop('check', True):  # pragma: no cover
            raise NotImplementedError('check must be True or omited')
    
        if encoding is not None:
            kwargs['encoding'] = encoding
    
        kwargs.setdefault('startupinfo', _compat.get_startupinfo())
    
        try:
            if input_lines is not None:
                assert kwargs.get('input') is None
                assert iter(input_lines) is input_lines
                if kwargs.pop('capture_output'):
                    kwargs['stdout'] = kwargs['stderr'] = subprocess.PIPE
                proc = _run_input_lines(cmd, input_lines, kwargs=kwargs)
            else:
                proc = subprocess.run(cmd, **kwargs)
        except OSError as e:
            if e.errno == errno.ENOENT:
&gt;               raise ExecutableNotFound(cmd) from e
E               graphviz.backend.execute.ExecutableNotFound: failed to execute PosixPath('dot'), make sure the Graphviz executables are on your systems' PATH

/opt/conda/lib/python3.12/site-packages/graphviz/backend/execute.py:81: ExecutableNotFound</failure></testcase><testcase classname="tests.test_graph.ModelGraphTests" name="test_typegraph_plot" time="0.166" /><testcase classname="tests.test_packages.define_Tests" name="test_pdf_translation_options" time="0.018" /></testsuite></testsuites>