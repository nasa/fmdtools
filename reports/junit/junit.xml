<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="4" skipped="0" tests="97" time="128.055" timestamp="2023-08-02T16:23:02.289301" hostname="starlight"><testcase classname="examples.eps.test_eps.epsTests" name="test_all_faults" time="0.259" /><testcase classname="examples.eps.test_eps.epsTests" name="test_backward_fault_prop_1" time="0.010" /><testcase classname="examples.eps.test_eps.epsTests" name="test_backward_fault_prop_2" time="0.011" /><testcase classname="examples.eps.test_eps.epsTests" name="test_fault_app" time="25.112" /><testcase classname="examples.eps.test_eps.epsTests" name="test_pickleability" time="0.003" /><testcase classname="examples.eps.test_eps.epsTests" name="test_save_load_multfault" time="0.036" /><testcase classname="examples.eps.test_eps.epsTests" name="test_save_load_nominal" time="0.031" /><testcase classname="examples.eps.test_eps.epsTests" name="test_save_load_onefault" time="0.036" /><testcase classname="examples.eps.test_eps.epsTests" name="test_save_load_singlefaults" time="0.826" /><testcase classname="examples.multiflow_demo.test_multiflow.define_Tests" name="test_multiflows" time="0.013" /><testcase classname="examples.multirotor.test_multirotor.DroneTests" name="test_interface_values" time="1.569"><failure message="AssertionError: 1.0460427910138081 != 0.7096666666666668 within 1 places (0.33637612434714137 difference)">self = &lt;examples.multirotor.test_multirotor.DroneTests testMethod=test_interface_values&gt;

    #x1B[94mdef#x1B[39;49;00m #x1B[92mtest_interface_values#x1B[39;49;00m(#x1B[96mself#x1B[39;49;00m):#x1B[90m#x1B[39;49;00m
    #x1B[90m#x1B[39;49;00m
        testvalues = [[#x1B[94m0#x1B[39;49;00m,#x1B[94m0#x1B[39;49;00m, #x1B[94m50#x1B[39;49;00m, #x1B[94m0#x1B[39;49;00m,#x1B[94m0#x1B[39;49;00m], [#x1B[94m0#x1B[39;49;00m,#x1B[94m2#x1B[39;49;00m, #x1B[94m100#x1B[39;49;00m, #x1B[94m1#x1B[39;49;00m,#x1B[94m1#x1B[39;49;00m],[#x1B[94m2#x1B[39;49;00m,#x1B[94m2#x1B[39;49;00m, #x1B[94m150#x1B[39;49;00m, #x1B[94m1#x1B[39;49;00m,#x1B[94m1#x1B[39;49;00m]]#x1B[90m#x1B[39;49;00m
        #x1B[90m# NOTE: because there is a fault in the nominal sim that triggers the resilience policy#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
        #x1B[90m# the value [2,2, 50, 0,0] will give inconsistent results, since the operational model#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
        #x1B[90m# doesn't have a consistent resilience policy in that case#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
        #x1B[94mfor#x1B[39;49;00m testvalue #x1B[95min#x1B[39;49;00m testvalues:#x1B[90m#x1B[39;49;00m
    #x1B[90m#x1B[39;49;00m
            rcost_manual = x_to_rcost(testvalue[:#x1B[94m2#x1B[39;49;00m], [testvalue[#x1B[94m2#x1B[39;49;00m]], testvalue[#x1B[94m3#x1B[39;49;00m:], faultmodes=#x1B[33m'#x1B[39;49;00m#x1B[33mstore_ee#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m)#x1B[90m#x1B[39;49;00m
            rcost_int = opt_prob.cr(testvalue)#x1B[90m#x1B[39;49;00m
&gt;           #x1B[96mself#x1B[39;49;00m.assertAlmostEqual(rcost_manual/#x1B[94m10000#x1B[39;49;00m, rcost_int/#x1B[94m10000#x1B[39;49;00m, #x1B[94m1#x1B[39;49;00m)#x1B[90m#x1B[39;49;00m
#x1B[1m#x1B[31mE           AssertionError: 1.0460427910138081 != 0.7096666666666668 within 1 places (0.33637612434714137 difference)#x1B[0m

#x1B[1m#x1B[31mexamples\multirotor\test_multirotor.py#x1B[0m:22: AssertionError</failure></testcase><testcase classname="examples.multirotor.test_multirotor.DroneTests" name="test_sim_types" time="3.955" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_app_prop_values" time="0.053" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_approach_cost_calc" time="3.481"><failure message="AssertionError: 1799299.0952380951 != 1799153.8095238095 within 7 places (145.28571428568102 difference)">self = &lt;examples.pump.test_pump.PumpTests testMethod=test_approach_cost_calc&gt;

    #x1B[94mdef#x1B[39;49;00m #x1B[92mtest_approach_cost_calc#x1B[39;49;00m(#x1B[96mself#x1B[39;49;00m):#x1B[90m#x1B[39;49;00m
    #x1B[90m    #x1B[39;49;00m#x1B[33m"""Test that the (linear) resilience loss function is perfectly approximated#x1B[39;49;00m
    #x1B[33m    using the given sampling methods"""#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
        mdl = Pump(p={#x1B[33m'#x1B[39;49;00m#x1B[33mcost#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m:(#x1B[33m'#x1B[39;49;00m#x1B[33mee#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m, #x1B[33m'#x1B[39;49;00m#x1B[33mrepair#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m, #x1B[33m'#x1B[39;49;00m#x1B[33mwater#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m), #x1B[33m'#x1B[39;49;00m#x1B[33mdelay#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m:#x1B[94m0#x1B[39;49;00m})#x1B[90m#x1B[39;49;00m
        app_full = SampleApproach(mdl, defaultsamp={#x1B[33m'#x1B[39;49;00m#x1B[33msamp#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m:#x1B[33m'#x1B[39;49;00m#x1B[33mfullint#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m})#x1B[90m#x1B[39;49;00m
        full_util=exp_cost_quant(app_full,mdl)#x1B[90m#x1B[39;49;00m
    #x1B[90m#x1B[39;49;00m
        app_multipt = SampleApproach(mdl, defaultsamp={#x1B[33m'#x1B[39;49;00m#x1B[33msamp#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m:#x1B[33m'#x1B[39;49;00m#x1B[33mevenspacing#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m, #x1B[33m'#x1B[39;49;00m#x1B[33mnumpts#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m:#x1B[94m3#x1B[39;49;00m})#x1B[90m#x1B[39;49;00m
        multipt_util=exp_cost_quant(app_multipt,mdl)#x1B[90m#x1B[39;49;00m
&gt;       #x1B[96mself#x1B[39;49;00m.assertAlmostEqual(full_util, multipt_util)#x1B[90m#x1B[39;49;00m
#x1B[1m#x1B[31mE       AssertionError: 1799299.0952380951 != 1799153.8095238095 within 7 places (145.28571428568102 difference)#x1B[0m

#x1B[1m#x1B[31mexamples\pump\test_pump.py#x1B[0m:79: AssertionError</failure></testcase><testcase classname="examples.pump.test_pump.PumpTests" name="test_approach_parallelism" time="7.276" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_approach_pruning" time="1.856"><failure message="AssertionError: Lists differ: [5.0, 6.0, 27.0] != [27.0]&#10;&#10;First differing element 0:&#10;5.0&#10;27.0&#10;&#10;First list contains 2 additional elements.&#10;First extra element 1:&#10;6.0&#10;&#10;- [5.0, 6.0, 27.0]&#10;+ [27.0]">self = &lt;examples.pump.test_pump.PumpTests testMethod=test_approach_pruning&gt;

    #x1B[94mdef#x1B[39;49;00m #x1B[92mtest_approach_pruning#x1B[39;49;00m(#x1B[96mself#x1B[39;49;00m):#x1B[90m#x1B[39;49;00m
    #x1B[90m    #x1B[39;49;00m#x1B[33m"""Tests that sample approach pruning places points in the center of their#x1B[39;49;00m
    #x1B[33m    respective intervals for linear resilience loss functions."""#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
        mdl = Pump(p={#x1B[33m'#x1B[39;49;00m#x1B[33mcost#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m:(#x1B[33m'#x1B[39;49;00m#x1B[33mee#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m, #x1B[33m'#x1B[39;49;00m#x1B[33mrepair#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m, #x1B[33m'#x1B[39;49;00m#x1B[33mwater#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m), #x1B[33m'#x1B[39;49;00m#x1B[33mdelay#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m:#x1B[94m0#x1B[39;49;00m})#x1B[90m#x1B[39;49;00m
        app_full = SampleApproach(mdl, phases= [#x1B[33m"#x1B[39;49;00m#x1B[33mon#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m], defaultsamp={#x1B[33m'#x1B[39;49;00m#x1B[33msamp#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m:#x1B[33m'#x1B[39;49;00m#x1B[33mfullint#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m})#x1B[90m#x1B[39;49;00m
        app_center = SampleApproach(mdl, phases=[#x1B[33m"#x1B[39;49;00m#x1B[33mon#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m], defaultsamp={#x1B[33m'#x1B[39;49;00m#x1B[33msamp#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m:#x1B[33m'#x1B[39;49;00m#x1B[33mevenspacing#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m, #x1B[33m'#x1B[39;49;00m#x1B[33mnumpts#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m:#x1B[94m1#x1B[39;49;00m})#x1B[90m#x1B[39;49;00m
        endclasses, mdlhists = propagate.approach(mdl, app_full, showprogress=#x1B[94mFalse#x1B[39;49;00m)#x1B[90m#x1B[39;49;00m
        #x1B[96mself#x1B[39;49;00m.assertNotEqual(app_full.times, app_center.times)#x1B[90m#x1B[39;49;00m
        app_full.prune_scenarios(endclasses)#x1B[90m#x1B[39;49;00m
&gt;       #x1B[96mself#x1B[39;49;00m.assertEqual(app_full.times, app_center.times)#x1B[90m#x1B[39;49;00m
#x1B[1m#x1B[31mE       AssertionError: Lists differ: [5.0, 6.0, 27.0] != [27.0]#x1B[0m
#x1B[1m#x1B[31mE       #x1B[0m
#x1B[1m#x1B[31mE       First differing element 0:#x1B[0m
#x1B[1m#x1B[31mE       5.0#x1B[0m
#x1B[1m#x1B[31mE       27.0#x1B[0m
#x1B[1m#x1B[31mE       #x1B[0m
#x1B[1m#x1B[31mE       First list contains 2 additional elements.#x1B[0m
#x1B[1m#x1B[31mE       First extra element 1:#x1B[0m
#x1B[1m#x1B[31mE       6.0#x1B[0m
#x1B[1m#x1B[31mE       #x1B[0m
#x1B[1m#x1B[31mE       - [5.0, 6.0, 27.0]#x1B[0m
#x1B[1m#x1B[31mE       + [27.0]#x1B[0m

#x1B[1m#x1B[31mexamples\pump\test_pump.py#x1B[0m:103: AssertionError</failure></testcase><testcase classname="examples.pump.test_pump.PumpTests" name="test_dynamic_prop_values" time="0.053" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_dynamic_prop_values_2" time="0.106" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_fmea_options" time="0.388" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_model_copy_different" time="0.235" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_model_copy_same" time="0.384" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_model_reset" time="0.429" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_one_run_csv" time="0.023" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_one_run_json" time="0.024" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_one_run_pickle" time="0.021" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_pickleability" time="0.005" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_save_load_approach" time="0.479" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_save_load_approach_indiv" time="0.597" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_save_load_multfault" time="0.064" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_save_load_nestedapproach" time="4.928" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_save_load_nestedapproach_indiv" time="5.023" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_save_load_nominal" time="0.041" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_save_load_nominalapproach" time="0.282" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_save_load_nominalapproach_indiv" time="0.347" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_save_load_onefault" time="0.070" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_save_load_singlefaults" time="0.582" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_save_load_singlefaults_indiv" time="0.771" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_value_setting" time="0.005" /><testcase classname="examples.pump.test_pump.PumpTests" name="test_value_setting_dict" time="0.004" /><testcase classname="examples.pump.test_pump_example.ImportEE_Tests" name="test_behave_inf_v" time="0.001" /><testcase classname="examples.pump.test_pump_example.ImportEE_Tests" name="test_behave_no_v" time="0.001" /><testcase classname="examples.pump.test_pump_example.ImportEE_Tests" name="test_behave_nom" time="0.001" /><testcase classname="examples.pump.test_pump_example.ImportEE_Tests" name="test_condfaults_hi" time="0.001" /><testcase classname="examples.pump.test_pump_example.ImportEE_Tests" name="test_condfaults_nom" time="0.001" /><testcase classname="examples.pump.test_pump_example.ImportEE_Tests" name="test_initialization" time="0.001" /><testcase classname="examples.pump.test_pump_example.MoveWat_Tests" name="test_condfaults_dynamic" time="0.001" /><testcase classname="examples.pump.test_pump_example.MoveWat_Tests" name="test_initialization" time="0.001" /><testcase classname="examples.pump.test_pump_example.MoveWat_Tests" name="test_nom" time="0.001" /><testcase classname="examples.pump.test_pump_example.Integration_Tests" name="test_blockage_results" time="0.042" /><testcase classname="examples.pump.test_pump_example.Integration_Tests" name="test_blockage_static" time="0.003" /><testcase classname="examples.pump.test_pump_example.Integration_Tests" name="test_nominal_results" time="0.021" /><testcase classname="examples.pump.test_pump_stochastic.StochasticPumpTests" name="test_model_copy_different" time="0.262" /><testcase classname="examples.pump.test_pump_stochastic.StochasticPumpTests" name="test_model_copy_same" time="0.346" /><testcase classname="examples.pump.test_pump_stochastic.StochasticPumpTests" name="test_model_reset" time="0.434" /><testcase classname="examples.pump.test_pump_stochastic.StochasticPumpTests" name="test_plot_nominal_vals" time="0.204" /><testcase classname="examples.pump.test_pump_stochastic.StochasticPumpTests" name="test_plot_nominal_vals_xd" time="0.693" /><testcase classname="examples.pump.test_pump_stochastic.StochasticPumpTests" name="test_run_approach" time="11.529" /><testcase classname="examples.pump.test_pump_stochastic.StochasticPumpTests" name="test_run_safety" time="2.398" /><testcase classname="examples.pump.test_pump_stochastic.StochasticPumpTests" name="test_save_load_nestedapproach" time="9.275" /><testcase classname="examples.pump.test_pump_stochastic.StochasticPumpTests" name="test_save_load_nestedapproach_indiv" time="9.661" /><testcase classname="examples.pump.test_pump_stochastic.StochasticPumpTests" name="test_save_load_nominalapproach" time="3.840" /><testcase classname="examples.pump.test_pump_stochastic.StochasticPumpTests" name="test_save_load_nominalapproach_indiv" time="3.681" /><testcase classname="examples.pump.test_pump_stochastic.StochasticPumpTests" name="test_set_seeds" time="0.017" /><testcase classname="examples.pump.test_pump_stochastic.StochasticPumpTests" name="test_stochastic_pdf" time="0.009" /><testcase classname="examples.rover.test_rover.RoverTests" name="test_obj_values" time="0.079"><failure message="AssertionError: 0.11329848698471573 != 0.5763384838180136">self = &lt;examples.rover.test_rover.RoverTests testMethod=test_obj_values&gt;

    #x1B[94mdef#x1B[39;49;00m #x1B[92mtest_obj_values#x1B[39;49;00m(#x1B[96mself#x1B[39;49;00m):#x1B[90m#x1B[39;49;00m
    #x1B[90m#x1B[39;49;00m
        testvalues = [[#x1B[94m1.0#x1B[39;49;00m,#x1B[94m0.5#x1B[39;49;00m,#x1B[94m0.0#x1B[39;49;00m],[#x1B[94m0.0#x1B[39;49;00m,#x1B[94m0.0#x1B[39;49;00m,#x1B[94m0.0#x1B[39;49;00m], [#x1B[94m1.0#x1B[39;49;00m,#x1B[94m1.0#x1B[39;49;00m,#x1B[94m1.0#x1B[39;49;00m], [#x1B[94m0.5#x1B[39;49;00m,#x1B[94m0.5#x1B[39;49;00m,#x1B[94m0.5#x1B[39;49;00m]]#x1B[90m#x1B[39;49;00m
        #x1B[94mfor#x1B[39;49;00m testvalue #x1B[95min#x1B[39;49;00m testvalues:#x1B[90m#x1B[39;49;00m
            dist_int,enddist_int, endpt_int = line_dist_faster(testvalue)#x1B[90m#x1B[39;49;00m
            dist,enddist, endpt = line_dist(testvalue)#x1B[90m#x1B[39;49;00m
    #x1B[90m#x1B[39;49;00m
&gt;           #x1B[96mself#x1B[39;49;00m.assertEqual(dist, dist_int)#x1B[90m#x1B[39;49;00m
#x1B[1m#x1B[31mE           AssertionError: 0.11329848698471573 != 0.5763384838180136#x1B[0m

#x1B[1m#x1B[31mexamples\rover\test_rover.py#x1B[0m:20: AssertionError</failure></testcase><testcase classname="examples.tank.test_tank.TankTests" name="test_approach" time="0.360" /><testcase classname="examples.tank.test_tank.TankTests" name="test_approach_parallelism_0" time="3.012" /><testcase classname="examples.tank.test_tank.TankTests" name="test_approach_parallelism_1" time="3.343" /><testcase classname="examples.tank.test_tank.TankTests" name="test_approach_parallelism_notrack" time="2.933" /><testcase classname="examples.tank.test_tank.TankTests" name="test_comp_mode_inj" time="0.027" /><testcase classname="examples.tank.test_tank.TankTests" name="test_different_components" time="0.012" /><testcase classname="examples.tank.test_tank.TankTests" name="test_epc_math" time="0.006" /><testcase classname="examples.tank.test_tank.TankTests" name="test_local_tstep" time="0.044" /><testcase classname="examples.tank.test_tank.TankTests" name="test_model_copy_different" time="0.188" /><testcase classname="examples.tank.test_tank.TankTests" name="test_model_copy_same" time="0.258" /><testcase classname="examples.tank.test_tank.TankTests" name="test_model_reset" time="0.277" /><testcase classname="examples.tank.test_tank.TankTests" name="test_save_load_approach" time="0.410" /><testcase classname="examples.tank.test_tank.TankTests" name="test_save_load_approach_indiv" time="0.437" /><testcase classname="examples.tank.test_tank.TankTests" name="test_save_load_multfault" time="0.044" /><testcase classname="examples.tank.test_tank.TankTests" name="test_save_load_nestedapproach" time="3.305" /><testcase classname="examples.tank.test_tank.TankTests" name="test_save_load_nestedapproach_indiv" time="3.317" /><testcase classname="examples.tank.test_tank.TankTests" name="test_save_load_nominal" time="0.033" /><testcase classname="examples.tank.test_tank.TankTests" name="test_save_load_nominalapproach" time="0.177" /><testcase classname="examples.tank.test_tank.TankTests" name="test_save_load_nominalapproach_indiv" time="0.233" /><testcase classname="examples.tank.test_tank.TankTests" name="test_save_load_onefault" time="0.044" /><testcase classname="examples.tank.test_tank.TankTests" name="test_save_load_singlefaults" time="1.286" /><testcase classname="examples.tank.test_tank.TankTests" name="test_save_load_singlefaults_indiv" time="1.767" /><testcase classname="examples.tank.test_tank.TankTests" name="test_tank_copy_args" time="0.015" /><testcase classname="examples.tank.test_tank_opt.TankOptTests" name="test_same_rcost" time="3.457" /><testcase classname="tests.test_graph.ModelGraphTests" name="test_fault_plot" time="0.083" /><testcase classname="tests.test_graph.ModelGraphTests" name="test_flowgraph_plot" time="0.073" /><testcase classname="tests.test_graph.ModelGraphTests" name="test_fxngraph_plot" time="0.204" /><testcase classname="tests.test_graph.ModelGraphTests" name="test_modelgraph_plot" time="0.123" /><testcase classname="tests.test_graph.ModelGraphTests" name="test_result_from_plot" time="0.058" /><testcase classname="tests.test_graph.ModelGraphTests" name="test_typegraph_plot" time="0.034" /><testcase classname="tests.test_mode.ModeTests" name="test_mode_generation" time="0.001" /><testcase classname="tests.test_packages.define_Tests" name="test_pdf_translation_options" time="0.002" /></testsuite></testsuites>