{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# fmdtools Tutorial\n",
    "\n",
    "This tutorial notebook will show some of the basic commands needed to perform resilience analysis in fmdtools.\n",
    "\n",
    "For some context, it may be helpful to look through the accompanying presentation. This notebook uses the model defined in `ex_pump.py`. In this notebook, we will:\n",
    "\n",
    "- Load an environment and model\n",
    "- Simulate the system in nominal and faulty scenarios\n",
    "- Visualize and quantify the results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.) Loading the environment and model\n",
    "\n",
    "To load the `fmdtools` environment, we have to import it. \n",
    "\n",
    "Since we're in a subfolder of the repository, we need to add the fmdtools folder to the system path. (This would be unnecessary if we installed using `pip`)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are a number of different syntaxes for importing modules. Because of the long names of the module trees, it is often helpful to load the modules individually and abbreviate (e.g. ``import fmdtools.faultsim.propagate as propagate``). Below, import the propagate `fmdtools.faultsim.propagate` and `fmdtools.resultdisp` modules, as well as the `SampleApproach` from `fmdtools.modeldef`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<module 'fmdtools' from 'C:\\\\Users\\\\dhulse\\\\Documents\\\\GitHub\\\\fmdtools\\\\example_pump\\\\..\\\\fmdtools\\\\__init__.py'>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, import the Pump class defined in the ex_pump module."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can then use that to instantiate a model object. See:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To get started, it can be helpful to view some of the aspects of the model. Try `dir(mdl)`, `mdl.fxns`, `mdl.flows`, `mdl.graph`, etc."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'ImportEE': ImportEE ImportEE function: ({'mode': 'nom'}, {'nom'}),\n",
       " 'ImportWater': ImportWater ImportWater function: ({'mode': 'nom'}, {'nom'}),\n",
       " 'ImportSignal': ImportSignal ImportSig function: ({'mode': 'nom'}, {'nom'}),\n",
       " 'MoveWater': MoveWater MoveWat function: ({'eff': 1.0, 'mode': 'nom'}, {'nom'}),\n",
       " 'ExportWater': ExportWater ExportWater function: ({'mode': 'nom'}, {'nom'})}"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also view the run order to see how the model will be simulated."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown, because all of the methods were defined as generic behaviors, they are each run in the static propagation step. No order is shown in the static step because the static propagation step iterates between model functions until the values have converged. Nevertheless, one can view the initial static order using:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderedSet(['ImportEE', 'ImportWater', 'ImportSignal', 'MoveWater', 'ExportWater'])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and the dynamic step order (if there was one):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderedSet()"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also instantiate this model with different model parameters. By default, this model gets \n",
    "`params={'cost':{'repair', 'water'}, 'delay':10, 'units':'hrs'}` but we can pass any set of costs that is a subset of `{'repair', 'water', 'water_exp', 'ee'}` and any int `delay` parameter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.) and 3.) Simulate and visualize the results!\n",
    "\n",
    "Now, we will use the methods in `propagate` and the visualization modules in `rd` to simulate the model and visualize the results."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2a.) Simulate nominal\n",
    "To simulate the model in the nominal scenario, use the `propagate.nominal` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What do the results look like? Explore results structures."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'faults': {},\n",
       " 'classification': {'rate': 1.0, 'cost': 0.0, 'expected cost': 0.0}}"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2b.) Visualize nominal model\n",
    "First, we can show the model graph using `rd.graph.show` to see that it was set up correctly. We can do this both on the model graph itself `mdl.graph` and the results of the nominal run `resgraph_nominal` to verify both are fault-free."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also view the flow values of the model using ''rd.plot.mdlhists''. It may be helpful to only view flows of interest."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note: for quick access to the syntax and options for these methods, type the `?method` or `help(method)` in the terminal. For example `?rd.plot.mdlhists`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2b.) Simulate a fault mode\n",
    "To simulate the model in the nominal scenario, use the `propagate.one_fault` method. The set of possible faults is defined in the function definitions in `ex_pump.py`, and we can propagate a fault at any time in the operational interval (0-55 seconds)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also view the results for from this. In this case `mdlhist` gives a history of results for both the nominal and faulty runs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'flows': {'EE_1': {'voltage': 0.0}},\n",
       " 'faults': {'ImportEE': ['no_v'], 'MoveWater': ['short']},\n",
       " 'classification': {'rate': 0.00055,\n",
       "  'cost': 29000.000000000007,\n",
       "  'expected cost': 1595000.0000000005}}"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['nominal', 'faulty']"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3b.) Visualize fault model states\n",
    "`rd.plot.mdlhistvals` also works for a mdlhists given from `propagate.one_fault`. We can view these results below. As shown, the function will give the nominal result in a blue dotted line and the faulty result in a red line."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also view this result graph using 'rd.graph.show'. In this case, it shows the state of the model at the final time-step of the model run. Thus, while the `EE_1` flow is shown in orange (because it is off-nominal), the Water flows are not, because they have the same state at the final time-step."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we want to view the graph at another time-step, we can use 'rd.process.hist' and 'rd.graph.result_from' to first process the model states into results which can be visualized and then map that onto a graph view at a given time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4a.) Simulate set of fault modes\n",
    "\n",
    "To simulate the set of fault modes, we first choose a `SampleApproach`. For simplicity, we can choose default parameters at first."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "SCENARIOS COMPLETE: 100%|█████████████████████████████████████████████████████████████| 17/17 [00:00<00:00, 151.68it/s]\n"
     ]
    }
   ],
   "source": [
    "endclasses_app, mdlhists_app = propagate.approach(mdl, app)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It can be helpful to view what these results look like--a dictionary of faults injected at particular times with their respective results dictionaries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'ImportEE no_v, t=27': {'rate': 0.0003600000000000001,\n",
       "  'cost': 15174.999999999998,\n",
       "  'expected cost': 546300.0},\n",
       " 'ImportEE inf_v, t=27': {'rate': 9.000000000000002e-05,\n",
       "  'cost': 20175.0,\n",
       "  'expected cost': 181575.00000000003},\n",
       " 'ImportWater no_wat, t=27': {'rate': 0.00015,\n",
       "  'cost': 6174.999999999998,\n",
       "  'expected cost': 92624.99999999996},\n",
       " 'ImportSignal no_sig, t=27': {'rate': 1.2857142857142856e-05,\n",
       "  'cost': 15174.999999999998,\n",
       "  'expected cost': 19510.714285714283},\n",
       " 'MoveWater mech_break, t=27': {'rate': 0.00023142857142857142,\n",
       "  'cost': 10174.999999999998,\n",
       "  'expected cost': 235478.5714285714},\n",
       " 'MoveWater short, t=27': {'rate': 0.00012857142857142858,\n",
       "  'cost': 25175.0,\n",
       "  'expected cost': 323678.5714285714},\n",
       " 'ExportWater block, t=27': {'rate': 0.00012857142857142858,\n",
       "  'cost': 15152.5,\n",
       "  'expected cost': 194817.85714285716},\n",
       " 'ImportWater no_wat, t=2': {'rate': 1.6666666666666667e-05,\n",
       "  'cost': 11125.000000000007,\n",
       "  'expected cost': 18541.66666666668},\n",
       " 'ImportSignal no_sig, t=2': {'rate': 2.1428571428571427e-06,\n",
       "  'cost': 20125.000000000007,\n",
       "  'expected cost': 4312.500000000001},\n",
       " 'MoveWater mech_break, t=2': {'rate': 2.1428571428571427e-06,\n",
       "  'cost': 15125.000000000007,\n",
       "  'expected cost': 3241.07142857143},\n",
       " 'MoveWater short, t=2': {'rate': 2.1428571428571428e-05,\n",
       "  'cost': 30125.000000000007,\n",
       "  'expected cost': 64553.57142857144},\n",
       " 'ExportWater block, t=2': {'rate': 2.1428571428571428e-05,\n",
       "  'cost': 20102.500000000007,\n",
       "  'expected cost': 43076.78571428573},\n",
       " 'ImportWater no_wat, t=52': {'rate': 1.6666666666666667e-05,\n",
       "  'cost': 1000.0,\n",
       "  'expected cost': 1666.6666666666667},\n",
       " 'ImportSignal no_sig, t=52': {'rate': 1.4285714285714284e-06,\n",
       "  'cost': 10000.0,\n",
       "  'expected cost': 1428.5714285714284},\n",
       " 'MoveWater mech_break, t=52': {'rate': 2.1428571428571427e-06,\n",
       "  'cost': 5000.0,\n",
       "  'expected cost': 1071.4285714285713},\n",
       " 'MoveWater short, t=52': {'rate': 1.4285714285714285e-05,\n",
       "  'cost': 10000.0,\n",
       "  'expected cost': 14285.714285714286},\n",
       " 'ExportWater block, t=52': {'rate': 1.4285714285714285e-05,\n",
       "  'cost': 5000.0,\n",
       "  'expected cost': 7142.857142857143},\n",
       " 'nominal': {'rate': 1.0, 'cost': 0.0, 'expected cost': 0.0}}"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It can be helpful to explore different approach parameters (e.g. focussing on single faults, different numbers of sample points, etc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('MoveWater', 'short')]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are a number of different ways to sample the scenarios in the approach:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 1, 2, 3, 4, 12, 20, 27, 34, 42, 50, 51, 52, 53, 54]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4b.) Visualize set of fault modes\n",
    "\n",
    "Using this fault approach, we can now make an FMEA-like analyses of the different fault modes. `rd.tabulate.summfmea` organizes endclasses into a table for each fault."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>rate</th>\n",
       "      <th>cost</th>\n",
       "      <th>expected cost</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ImportEE</th>\n",
       "      <th>no_v</th>\n",
       "      <td>0.000360</td>\n",
       "      <td>15175.000000</td>\n",
       "      <td>546300.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>inf_v</th>\n",
       "      <td>0.000090</td>\n",
       "      <td>20175.000000</td>\n",
       "      <td>181575.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ImportWater</th>\n",
       "      <th>no_wat</th>\n",
       "      <td>0.000183</td>\n",
       "      <td>6100.000000</td>\n",
       "      <td>112833.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ImportSignal</th>\n",
       "      <th>no_sig</th>\n",
       "      <td>0.000016</td>\n",
       "      <td>15100.000000</td>\n",
       "      <td>25251.785714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">MoveWater</th>\n",
       "      <th>mech_break</th>\n",
       "      <td>0.000236</td>\n",
       "      <td>10100.000000</td>\n",
       "      <td>239791.071429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>short</th>\n",
       "      <td>0.000164</td>\n",
       "      <td>21766.666667</td>\n",
       "      <td>402517.857143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ExportWater</th>\n",
       "      <th>block</th>\n",
       "      <td>0.000164</td>\n",
       "      <td>13418.333333</td>\n",
       "      <td>245037.500000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             rate          cost  expected cost\n",
       "ImportEE     no_v        0.000360  15175.000000  546300.000000\n",
       "             inf_v       0.000090  20175.000000  181575.000000\n",
       "ImportWater  no_wat      0.000183   6100.000000  112833.333333\n",
       "ImportSignal no_sig      0.000016  15100.000000   25251.785714\n",
       "MoveWater    mech_break  0.000236  10100.000000  239791.071429\n",
       "             short       0.000164  21766.666667  402517.857143\n",
       "ExportWater  block       0.000164  13418.333333  245037.500000"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also use `rd.tabulatefullmea` with the processed results histories to get a better picture of which flows and functions degrade in each scenario"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>degraded functions</th>\n",
       "      <th>degraded flows</th>\n",
       "      <th>rate</th>\n",
       "      <th>cost</th>\n",
       "      <th>expected cost</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ImportEE no_v, t=27</th>\n",
       "      <td>[ImportEE]</td>\n",
       "      <td>[EE_1, Wat_1, Wat_2]</td>\n",
       "      <td>0.00036</td>\n",
       "      <td>15175.0</td>\n",
       "      <td>546300.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ImportEE inf_v, t=27</th>\n",
       "      <td>[ImportEE]</td>\n",
       "      <td>[EE_1, Wat_1, Wat_2]</td>\n",
       "      <td>0.00009</td>\n",
       "      <td>20175.0</td>\n",
       "      <td>181575.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ImportWater no_wat, t=27</th>\n",
       "      <td>[ImportWater]</td>\n",
       "      <td>[EE_1, Wat_1, Wat_2]</td>\n",
       "      <td>0.00015</td>\n",
       "      <td>6175.0</td>\n",
       "      <td>92625.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ImportSignal no_sig, t=27</th>\n",
       "      <td>[ImportSignal]</td>\n",
       "      <td>[EE_1, Sig_1, Wat_1, Wat_2]</td>\n",
       "      <td>0.000013</td>\n",
       "      <td>15175.0</td>\n",
       "      <td>19510.714286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MoveWater mech_break, t=27</th>\n",
       "      <td>[MoveWater]</td>\n",
       "      <td>[EE_1, Wat_1, Wat_2]</td>\n",
       "      <td>0.000231</td>\n",
       "      <td>10175.0</td>\n",
       "      <td>235478.571429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MoveWater short, t=27</th>\n",
       "      <td>[ImportEE, MoveWater]</td>\n",
       "      <td>[EE_1, Wat_1, Wat_2]</td>\n",
       "      <td>0.000129</td>\n",
       "      <td>25175.0</td>\n",
       "      <td>323678.571429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ExportWater block, t=27</th>\n",
       "      <td>[MoveWater, ExportWater]</td>\n",
       "      <td>[EE_1, Wat_1, Wat_2]</td>\n",
       "      <td>0.000129</td>\n",
       "      <td>15152.5</td>\n",
       "      <td>194817.857143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ImportWater no_wat, t=2</th>\n",
       "      <td>[ImportWater]</td>\n",
       "      <td>[EE_1, Wat_1, Wat_2]</td>\n",
       "      <td>0.000017</td>\n",
       "      <td>11125.0</td>\n",
       "      <td>18541.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ImportSignal no_sig, t=2</th>\n",
       "      <td>[ImportSignal]</td>\n",
       "      <td>[EE_1, Sig_1, Wat_1, Wat_2]</td>\n",
       "      <td>0.000002</td>\n",
       "      <td>20125.0</td>\n",
       "      <td>4312.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MoveWater mech_break, t=2</th>\n",
       "      <td>[MoveWater]</td>\n",
       "      <td>[EE_1, Wat_1, Wat_2]</td>\n",
       "      <td>0.000002</td>\n",
       "      <td>15125.0</td>\n",
       "      <td>3241.071429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MoveWater short, t=2</th>\n",
       "      <td>[ImportEE, MoveWater]</td>\n",
       "      <td>[EE_1, Wat_1, Wat_2]</td>\n",
       "      <td>0.000021</td>\n",
       "      <td>30125.0</td>\n",
       "      <td>64553.571429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ExportWater block, t=2</th>\n",
       "      <td>[MoveWater, ExportWater]</td>\n",
       "      <td>[EE_1, Wat_1, Wat_2]</td>\n",
       "      <td>0.000021</td>\n",
       "      <td>20102.5</td>\n",
       "      <td>43076.785714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ImportWater no_wat, t=52</th>\n",
       "      <td>[ImportWater]</td>\n",
       "      <td>[Wat_1]</td>\n",
       "      <td>0.000017</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>1666.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ImportSignal no_sig, t=52</th>\n",
       "      <td>[ImportSignal]</td>\n",
       "      <td>[]</td>\n",
       "      <td>0.000001</td>\n",
       "      <td>10000.0</td>\n",
       "      <td>1428.571429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MoveWater mech_break, t=52</th>\n",
       "      <td>[MoveWater]</td>\n",
       "      <td>[]</td>\n",
       "      <td>0.000002</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>1071.428571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MoveWater short, t=52</th>\n",
       "      <td>[MoveWater]</td>\n",
       "      <td>[]</td>\n",
       "      <td>0.000014</td>\n",
       "      <td>10000.0</td>\n",
       "      <td>14285.714286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ExportWater block, t=52</th>\n",
       "      <td>[ExportWater]</td>\n",
       "      <td>[Wat_2]</td>\n",
       "      <td>0.000014</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>7142.857143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>nominal</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  degraded functions  \\\n",
       "ImportEE no_v, t=27                       [ImportEE]   \n",
       "ImportEE inf_v, t=27                      [ImportEE]   \n",
       "ImportWater no_wat, t=27               [ImportWater]   \n",
       "ImportSignal no_sig, t=27             [ImportSignal]   \n",
       "MoveWater mech_break, t=27               [MoveWater]   \n",
       "MoveWater short, t=27          [ImportEE, MoveWater]   \n",
       "ExportWater block, t=27     [MoveWater, ExportWater]   \n",
       "ImportWater no_wat, t=2                [ImportWater]   \n",
       "ImportSignal no_sig, t=2              [ImportSignal]   \n",
       "MoveWater mech_break, t=2                [MoveWater]   \n",
       "MoveWater short, t=2           [ImportEE, MoveWater]   \n",
       "ExportWater block, t=2      [MoveWater, ExportWater]   \n",
       "ImportWater no_wat, t=52               [ImportWater]   \n",
       "ImportSignal no_sig, t=52             [ImportSignal]   \n",
       "MoveWater mech_break, t=52               [MoveWater]   \n",
       "MoveWater short, t=52                    [MoveWater]   \n",
       "ExportWater block, t=52                [ExportWater]   \n",
       "nominal                                          NaN   \n",
       "\n",
       "                                         degraded flows      rate     cost  \\\n",
       "ImportEE no_v, t=27                [EE_1, Wat_1, Wat_2]   0.00036  15175.0   \n",
       "ImportEE inf_v, t=27               [EE_1, Wat_1, Wat_2]   0.00009  20175.0   \n",
       "ImportWater no_wat, t=27           [EE_1, Wat_1, Wat_2]   0.00015   6175.0   \n",
       "ImportSignal no_sig, t=27   [EE_1, Sig_1, Wat_1, Wat_2]  0.000013  15175.0   \n",
       "MoveWater mech_break, t=27         [EE_1, Wat_1, Wat_2]  0.000231  10175.0   \n",
       "MoveWater short, t=27              [EE_1, Wat_1, Wat_2]  0.000129  25175.0   \n",
       "ExportWater block, t=27            [EE_1, Wat_1, Wat_2]  0.000129  15152.5   \n",
       "ImportWater no_wat, t=2            [EE_1, Wat_1, Wat_2]  0.000017  11125.0   \n",
       "ImportSignal no_sig, t=2    [EE_1, Sig_1, Wat_1, Wat_2]  0.000002  20125.0   \n",
       "MoveWater mech_break, t=2          [EE_1, Wat_1, Wat_2]  0.000002  15125.0   \n",
       "MoveWater short, t=2               [EE_1, Wat_1, Wat_2]  0.000021  30125.0   \n",
       "ExportWater block, t=2             [EE_1, Wat_1, Wat_2]  0.000021  20102.5   \n",
       "ImportWater no_wat, t=52                        [Wat_1]  0.000017   1000.0   \n",
       "ImportSignal no_sig, t=52                            []  0.000001  10000.0   \n",
       "MoveWater mech_break, t=52                           []  0.000002   5000.0   \n",
       "MoveWater short, t=52                                []  0.000014  10000.0   \n",
       "ExportWater block, t=52                         [Wat_2]  0.000014   5000.0   \n",
       "nominal                                             NaN       1.0      0.0   \n",
       "\n",
       "                            expected cost  \n",
       "ImportEE no_v, t=27              546300.0  \n",
       "ImportEE inf_v, t=27             181575.0  \n",
       "ImportWater no_wat, t=27          92625.0  \n",
       "ImportSignal no_sig, t=27    19510.714286  \n",
       "MoveWater mech_break, t=27  235478.571429  \n",
       "MoveWater short, t=27       323678.571429  \n",
       "ExportWater block, t=27     194817.857143  \n",
       "ImportWater no_wat, t=2      18541.666667  \n",
       "ImportSignal no_sig, t=2           4312.5  \n",
       "MoveWater mech_break, t=2     3241.071429  \n",
       "MoveWater short, t=2         64553.571429  \n",
       "ExportWater block, t=2       43076.785714  \n",
       "ImportWater no_wat, t=52      1666.666667  \n",
       "ImportSignal no_sig, t=52     1428.571429  \n",
       "MoveWater mech_break, t=52    1071.428571  \n",
       "MoveWater short, t=52        14285.714286  \n",
       "ExportWater block, t=52       7142.857143  \n",
       "nominal                               0.0  "
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5.) Saving Work\n",
    "\n",
    "In detailed simulations, running a lot of computational simulations can take a considerable amount of time. As a result, it becomes impractical to run a new simulation every time one wishes to analyse its data. Results from fmdtools simulations (endclasses or mdlhists) can be saved as pickle, csv, or json files in this instance using either:\n",
    "- rd.process.save_result() or \n",
    "- passing a save_args dictionary to the respective propagate functions (e.g., {'endclass':{'filename':'file.pkl','overwrite':True})\n",
    "\n",
    "and then loaded using:\n",
    "- rd.process.load_result()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For example, for this variable:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'ImportEE no_v, t=27': {'rate': 0.0003600000000000001,\n",
       "  'cost': 15174.999999999998,\n",
       "  'expected cost': 546300.0},\n",
       " 'ImportEE inf_v, t=27': {'rate': 9.000000000000002e-05,\n",
       "  'cost': 20175.0,\n",
       "  'expected cost': 181575.00000000003},\n",
       " 'ImportWater no_wat, t=27': {'rate': 0.00015,\n",
       "  'cost': 6174.999999999998,\n",
       "  'expected cost': 92624.99999999996},\n",
       " 'ImportSignal no_sig, t=27': {'rate': 1.2857142857142856e-05,\n",
       "  'cost': 15174.999999999998,\n",
       "  'expected cost': 19510.714285714283},\n",
       " 'MoveWater mech_break, t=27': {'rate': 0.00023142857142857142,\n",
       "  'cost': 10174.999999999998,\n",
       "  'expected cost': 235478.5714285714},\n",
       " 'MoveWater short, t=27': {'rate': 0.00012857142857142858,\n",
       "  'cost': 25175.0,\n",
       "  'expected cost': 323678.5714285714},\n",
       " 'ExportWater block, t=27': {'rate': 0.00012857142857142858,\n",
       "  'cost': 15152.5,\n",
       "  'expected cost': 194817.85714285716},\n",
       " 'ImportWater no_wat, t=2': {'rate': 1.6666666666666667e-05,\n",
       "  'cost': 11125.000000000007,\n",
       "  'expected cost': 18541.66666666668},\n",
       " 'ImportSignal no_sig, t=2': {'rate': 2.1428571428571427e-06,\n",
       "  'cost': 20125.000000000007,\n",
       "  'expected cost': 4312.500000000001},\n",
       " 'MoveWater mech_break, t=2': {'rate': 2.1428571428571427e-06,\n",
       "  'cost': 15125.000000000007,\n",
       "  'expected cost': 3241.07142857143},\n",
       " 'MoveWater short, t=2': {'rate': 2.1428571428571428e-05,\n",
       "  'cost': 30125.000000000007,\n",
       "  'expected cost': 64553.57142857144},\n",
       " 'ExportWater block, t=2': {'rate': 2.1428571428571428e-05,\n",
       "  'cost': 20102.500000000007,\n",
       "  'expected cost': 43076.78571428573},\n",
       " 'ImportWater no_wat, t=52': {'rate': 1.6666666666666667e-05,\n",
       "  'cost': 1000.0,\n",
       "  'expected cost': 1666.6666666666667},\n",
       " 'ImportSignal no_sig, t=52': {'rate': 1.4285714285714284e-06,\n",
       "  'cost': 10000.0,\n",
       "  'expected cost': 1428.5714285714284},\n",
       " 'MoveWater mech_break, t=52': {'rate': 2.1428571428571427e-06,\n",
       "  'cost': 5000.0,\n",
       "  'expected cost': 1071.4285714285713},\n",
       " 'MoveWater short, t=52': {'rate': 1.4285714285714285e-05,\n",
       "  'cost': 10000.0,\n",
       "  'expected cost': 14285.714285714286},\n",
       " 'ExportWater block, t=52': {'rate': 1.4285714285714285e-05,\n",
       "  'cost': 5000.0,\n",
       "  'expected cost': 7142.857142857143},\n",
       " 'nominal': {'rate': 1.0, 'cost': 0.0, 'expected cost': 0.0}}"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'ImportSignal no_sig, t=27': {'rate': 1.2857142857142856e-05,\n",
       "  'cost': 15174.999999999998,\n",
       "  'expected cost': 19510.714285714283},\n",
       " 'ImportEE no_v, t=27': {'rate': 0.00036,\n",
       "  'cost': 15174.999999999998,\n",
       "  'expected cost': 546300.0},\n",
       " 'ImportSignal no_sig, t=2': {'rate': 2.1428571428571427e-06,\n",
       "  'cost': 20125.000000000007,\n",
       "  'expected cost': 4312.500000000001},\n",
       " 'MoveWater mech_break, t=52': {'rate': 2.1428571428571427e-06,\n",
       "  'cost': 5000.0,\n",
       "  'expected cost': 1071.428571428571},\n",
       " 'MoveWater short, t=2': {'rate': 2.1428571428571428e-05,\n",
       "  'cost': 30125.000000000007,\n",
       "  'expected cost': 64553.57142857144},\n",
       " 'ImportEE inf_v, t=27': {'rate': 9.000000000000002e-05,\n",
       "  'cost': 20175.0,\n",
       "  'expected cost': 181575.00000000003},\n",
       " 'ImportWater no_wat, t=27': {'rate': 0.00015,\n",
       "  'cost': 6174.999999999998,\n",
       "  'expected cost': 92624.99999999996},\n",
       " 'MoveWater short, t=27': {'rate': 0.0001285714285714,\n",
       "  'cost': 25175.0,\n",
       "  'expected cost': 323678.5714285714},\n",
       " 'ExportWater block, t=27': {'rate': 0.0001285714285714,\n",
       "  'cost': 15152.5,\n",
       "  'expected cost': 194817.8571428572},\n",
       " 'ImportWater no_wat, t=2': {'rate': 1.6666666666666667e-05,\n",
       "  'cost': 11125.000000000007,\n",
       "  'expected cost': 18541.66666666668},\n",
       " 'ImportWater no_wat, t=52': {'rate': 1.6666666666666667e-05,\n",
       "  'cost': 1000.0,\n",
       "  'expected cost': 1666.6666666666667},\n",
       " 'MoveWater mech_break, t=2': {'rate': 2.1428571428571427e-06,\n",
       "  'cost': 15125.000000000007,\n",
       "  'expected cost': 3241.07142857143},\n",
       " 'MoveWater short, t=52': {'rate': 1.4285714285714284e-05,\n",
       "  'cost': 10000.0,\n",
       "  'expected cost': 14285.714285714286},\n",
       " 'nominal': {'rate': 1.0, 'cost': 0.0, 'expected cost': 0.0},\n",
       " 'ExportWater block, t=52': {'rate': 1.4285714285714284e-05,\n",
       "  'cost': 5000.0,\n",
       "  'expected cost': 7142.857142857143},\n",
       " 'MoveWater mech_break, t=27': {'rate': 0.0002314285714285,\n",
       "  'cost': 10174.999999999998,\n",
       "  'expected cost': 235478.5714285714},\n",
       " 'ExportWater block, t=2': {'rate': 2.1428571428571428e-05,\n",
       "  'cost': 20102.500000000007,\n",
       "  'expected cost': 43076.78571428573},\n",
       " 'ImportSignal no_sig, t=52': {'rate': 1.4285714285714284e-06,\n",
       "  'cost': 10000.0,\n",
       "  'expected cost': 1428.5714285714284}}"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
