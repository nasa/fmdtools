{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "02b1fbf2",
   "metadata": {},
   "source": [
    "# fmdtools-AdaStress integration\n",
    "\n",
    "\n",
    "**NOTE: This notebook may not run correctly, see ticket RAD-224**\n",
    "\n",
    "This goal of this notebook is to illustrate running [Adaptive Stress Testing](https://www.nasa.gov/content/tech/rse/research/adastress) on fmdtools model using the AdaStress package.\n",
    "\n",
    "For this setup to work, first install:\n",
    "- AdaStress (and related packages) in Julia\n",
    "- fmdtools (and related packages) in Python\n",
    "- PyCall in Julia\n",
    "- - Make sure ENV[\"PYTHON\"] points to python kernel where fmdtools is installed \n",
    "- PyJulia in Python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8f3bfc69",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Commands for building PyCall where python is located:\n",
    "# ENV[\"PYTHON\"] = \"C:\\\\Users\\\\dhulse\\\\AppData\\\\Local\\\\anaconda3\\\\python.exe\"\n",
    "# using Pkg\n",
    "# Pkg.build(\"PyCall\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "46221b91",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-15T10:17:37.185000Z",
     "iopub.status.busy": "2023-06-15T10:17:36.791000Z",
     "iopub.status.idle": "2023-06-15T10:17:45.189000Z",
     "shell.execute_reply": "2023-06-15T10:17:45.127000Z"
    }
   },
   "outputs": [],
   "source": [
    "using Plots\n",
    "using AdaStress"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4505fa77",
   "metadata": {},
   "source": [
    "### Python setup:\n",
    "\n",
    "First, we get the fmdtools model from its respective folder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2267448f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-15T10:17:46.426000Z",
     "iopub.status.busy": "2023-06-15T10:17:45.189000Z",
     "iopub.status.idle": "2023-06-15T10:17:52.117000Z",
     "shell.execute_reply": "2023-06-15T10:17:52.117000Z"
    }
   },
   "outputs": [],
   "source": [
    "\n",
    "using PyCall\n",
    "#ENV[\"MPLBACKEND\"]=\"qt5agg\"\n",
    "using PyPlot\n",
    "py\"\"\"\n",
    "import sys, os\n",
    "sys.path.insert(0,os.curdir)\n",
    "sys.path.insert(1,os.path.join('..'))\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "951e052f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "v\"3.10.9\""
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "PyCall.pyversion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "09139504",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-15T10:17:52.863000Z",
     "iopub.status.busy": "2023-06-15T10:17:52.117000Z",
     "iopub.status.idle": "2023-06-15T10:17:52.901000Z",
     "shell.execute_reply": "2023-06-15T10:17:52.901000Z"
    }
   },
   "outputs": [],
   "source": [
    "#pygui_start(:qt)\n",
    "#PyCall.fixqtpath()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85b18451",
   "metadata": {},
   "source": [
    "Next, we get the module--in this case we will be using the stochastic pump model in `/example_pump/pump_stochastic`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "98bcfa5e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-15T10:17:52.904000Z",
     "iopub.status.busy": "2023-06-15T10:17:52.904000Z",
     "iopub.status.idle": "2023-06-15T10:17:54.210000Z",
     "shell.execute_reply": "2023-06-15T10:17:54.210000Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PyObject PumpParam(cost=('repair', 'water'), delay=1)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pump_module = pyimport(\"pump_stochastic\")\n",
    "pump_model = pump_module.Pump(p = Dict(\"delay\" => 1.0))\n",
    "pump_model.p"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68a67d1b",
   "metadata": {},
   "source": [
    "To get the propagation/analysis methods, we can further import the fmdtools packages..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "dc59387f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-15T10:17:54.210000Z",
     "iopub.status.busy": "2023-06-15T10:17:54.210000Z",
     "iopub.status.idle": "2023-06-15T10:17:54.218000Z",
     "shell.execute_reply": "2023-06-15T10:17:54.218000Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PyObject <module 'fmdtools.analyze' from 'c:\\\\users\\\\dhulse\\\\documents\\\\github\\\\fmdtools\\\\fmdtools\\\\analyze\\\\__init__.py'>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fmd = pyimport(\"fmdtools\")\n",
    "prop = fmd.sim.propagate\n",
    "an = fmd.analyze"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8444934b",
   "metadata": {},
   "source": [
    "Example simulation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7dcfe4f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-15T10:17:54.218000Z",
     "iopub.status.busy": "2023-06-15T10:17:54.218000Z",
     "iopub.status.idle": "2023-06-15T10:17:54.444000Z",
     "shell.execute_reply": "2023-06-15T10:17:54.444000Z"
    }
   },
   "outputs": [],
   "source": [
    "endresult, mdlhist = prop.nominal(pump_model, run_stochastic=true);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17405c00",
   "metadata": {},
   "source": [
    "NOTE: in order for `Result.plot_line` to work correctly, make sure to use the `Using PyCall` command at the beginning."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "266479ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-15T10:17:54.444000Z",
     "iopub.status.busy": "2023-06-15T10:17:54.444000Z",
     "iopub.status.idle": "2023-06-15T10:17:58.497000Z",
     "shell.execute_reply": "2023-06-15T10:17:58.497000Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "Figure(PyObject <Figure size 600x400 with 4 Axes>)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(Figure(PyObject <Figure size 600x400 with 4 Axes>), PyObject[PyObject <Axes: title={'center': 'fxns.move_water.s.eff'}, xlabel=' '>, PyObject <Axes: title={'center': 'fxns.move_water.s.total_flow'}, xlabel=' '>, PyObject <Axes: title={'center': 'flows.wat_2.s.flowrate'}, xlabel='time'>, PyObject <Axes: title={'center': 'flows.wat_2.s.pressure'}, xlabel='time'>])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fig, axs = mdlhist.plot_line(\"fxns.move_water.s.eff\", \n",
    "                                 \"fxns.move_water.s.total_flow\", \n",
    "                                 \"flows.wat_2.s.flowrate\", \n",
    "                                 \"flows.wat_2.s.pressure\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "153ace5a",
   "metadata": {},
   "source": [
    "## AdaStress Setup\n",
    "\n",
    "Interfacing AdaStress with fmdtools models is enabled by the `DynamicProblem` class in `sim.search` (though this can also be done manually). See below. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a48dc64c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-15T10:17:58.497000Z",
     "iopub.status.busy": "2023-06-15T10:17:58.497000Z",
     "iopub.status.idle": "2023-06-15T10:17:58.505000Z",
     "shell.execute_reply": "2023-06-15T10:17:58.505000Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PyObject <class 'fmdtools.sim.search.DynamicInterface'>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DynamicProblem = fmd.sim.search.DynamicInterface"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ef67cf58",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-15T10:17:58.505000Z",
     "iopub.status.busy": "2023-06-15T10:17:58.505000Z",
     "iopub.status.idle": "2023-06-15T10:17:58.515000Z",
     "shell.execute_reply": "2023-06-15T10:17:58.515000Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PyObject <fmdtools.sim.search.DynamicInterface object at 0x000001FBEA47D7B0>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prob = DynamicProblem(pump_model)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "760aa341",
   "metadata": {},
   "source": [
    "Defining the simulation is quite simple with the DynamicProblem class. Note the possible options from this class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "06627f99",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-15T10:17:58.517000Z",
     "iopub.status.busy": "2023-06-15T10:17:58.517000Z",
     "iopub.status.idle": "2023-06-15T10:17:59.007000Z",
     "shell.execute_reply": "2023-06-15T10:17:59.007000Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\n",
       "        Initialize the problem.\n",
       "\n",
       "        Parameters\n",
       "        ----------\n",
       "        mdl : Model\n",
       "            Model defining the simulation.\n",
       "        mdl_kwargs : dict, optional\n",
       "            Parameters to run the model at. The default is {}.\n",
       "        t_max : float, optional\n",
       "            Maximum simulation time. The default is False.\n",
       "        track : str/dict, optional\n",
       "            Properties of the model to track over time. The default is \"all\".\n",
       "        run_stochastic : bool/str, optional\n",
       "            Whether to run stochastic behaviors (True/False) and/or\n",
       "            return pdf (\"track_pdf\"). The default is \"track_pdf\".\n",
       "        desired_result : list, optional\n",
       "            List of desired results to return at each update. The default is [].\n",
       "        use_end_condition : bool, optional\n",
       "            Whether to use model end-condition. The default is None.\n",
       "        "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "?DynamicProblem.__init__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c94fe3cc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-15T10:17:59.007000Z",
     "iopub.status.busy": "2023-06-15T10:17:59.007000Z",
     "iopub.status.idle": "2023-06-15T10:17:59.365000Z",
     "shell.execute_reply": "2023-06-15T10:17:59.365000Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PumpSim"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Base.@kwdef mutable struct PumpSim <: AdaStress.BlackBox\n",
    "    sim::PyObject = DynamicProblem(pump_model)\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "933cf0b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-15T10:17:59.365000Z",
     "iopub.status.busy": "2023-06-15T10:17:59.365000Z",
     "iopub.status.idle": "2023-06-15T10:17:59.592000Z",
     "shell.execute_reply": "2023-06-15T10:17:59.592000Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "initialize! (generic function with 1 method)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function initialize!(sim::PumpSim)\n",
    "    sim.sim = DynamicProblem(pump_model)\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57a3d513",
   "metadata": {},
   "source": [
    "Updating is further enabled by DynamicProblem.update"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "fd7159cd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-15T10:17:59.600000Z",
     "iopub.status.busy": "2023-06-15T10:17:59.600000Z",
     "iopub.status.idle": "2023-06-15T10:17:59.600000Z",
     "shell.execute_reply": "2023-06-15T10:17:59.600000Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\n",
       "        Update the model states at the simulation time and iterates time.\n",
       "\n",
       "        Parameters\n",
       "        ----------\n",
       "        seed : seed, optional\n",
       "            Seed for the simulation. The default is {}.\n",
       "        faults : dict, optional\n",
       "            faults to inject in the model, with structure {fxn:[faults]}.\n",
       "            The default is {}.\n",
       "        disturbances : dict, optional\n",
       "            Variables to change in the model, with structure {fxn.var:value}.\n",
       "            The default is {}.\n",
       "\n",
       "        Returns\n",
       "        -------\n",
       "        returns : dict\n",
       "            dictionary of returns with values corresponding to desired_result\n",
       "        "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "?DynamicProblem.update"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "87be1b0f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-15T10:17:59.600000Z",
     "iopub.status.busy": "2023-06-15T10:17:59.600000Z",
     "iopub.status.idle": "2023-06-15T10:17:59.710000Z",
     "shell.execute_reply": "2023-06-15T10:17:59.710000Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "update! (generic function with 1 method)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function update!(sim::PumpSim)\n",
    "    seed = rand(0:1_000_000_000)\n",
    "    returns = sim.sim.update(seed=seed)\n",
    "    return log(returns[\"pdf\"]) # note: needs to return a probability from somewhere - needs to be a log pdf?\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0804eed8",
   "metadata": {},
   "source": [
    "Model end-states can be interfaced with using `DynamicProblem.check_sim_end`, which additionally accomodates external conditions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ea418b84",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-15T10:17:59.710000Z",
     "iopub.status.busy": "2023-06-15T10:17:59.710000Z",
     "iopub.status.idle": "2023-06-15T10:17:59.789000Z",
     "shell.execute_reply": "2023-06-15T10:17:59.789000Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "isterminal! (generic function with 1 method)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function isterminal!(sim::PumpSim)\n",
    "    has_faults = sim.sim.mdl.fxns[\"move_water\"].m.any_faults() # our external condition\n",
    "    terminal = sim.sim.check_sim_end(external_condition=has_faults)\n",
    "    return terminal\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "4ecc3e3f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-15T10:17:59.804000Z",
     "iopub.status.busy": "2023-06-15T10:17:59.804000Z",
     "iopub.status.idle": "2023-06-15T10:17:59.889000Z",
     "shell.execute_reply": "2023-06-15T10:17:59.889000Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "isevent! (generic function with 1 method)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function isevent!(sim::PumpSim)\n",
    "    faults = sim.sim.mdl.fxns[\"move_water\"].m.any_faults()\n",
    "    return faults\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46c84a95",
   "metadata": {},
   "source": [
    "Finally, the below shows the full setup:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "2e90ff57",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-15T10:17:59.889000Z",
     "iopub.status.busy": "2023-06-15T10:17:59.889000Z",
     "iopub.status.idle": "2023-06-15T10:17:59.889000Z",
     "shell.execute_reply": "2023-06-15T10:17:59.889000Z"
    }
   },
   "outputs": [],
   "source": [
    "AdaStress.reset!(sim::PumpSim) = initialize!(sim)\n",
    "AdaStress.step!(sim::PumpSim) = update!(sim)\n",
    "AdaStress.isterminal(sim::PumpSim) = isterminal!(sim)\n",
    "AdaStress.isevent(sim::PumpSim) = isevent!(sim)     # difficult: get pressure > 15 ten times\n",
    "# AdaStress.isevent(sim::PumpSim) = 15.0-sim.mdl.flows[\"Wat_1\"].pressure <= 0 # - easy: just get pressure > 15 (once!)\n",
    "#AdaStress.distance(sim::PumpSim) = 15.0-sim.mdl.flows[\"Wat_1\"].pressure\n",
    "AdaStress.distance(sim::PumpSim) = float(sum(sim.sim.mdl.h.flows.wat_1.s.pressure.<=15))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d67cf2f",
   "metadata": {},
   "source": [
    "### Running AdaStress Methods\n",
    "\n",
    "Monte Carlo Search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "4654a064",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-15T10:17:59.889000Z",
     "iopub.status.busy": "2023-06-15T10:17:59.889000Z",
     "iopub.status.idle": "2023-06-15T10:18:00.174000Z",
     "shell.execute_reply": "2023-06-15T10:18:00.174000Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AdaStress.Solvers.MonteCarloSearch.MCS(1000, 10)"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mcs = AdaStress.Solvers.MCS(num_iterations=10_00)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "8186e879",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-15T10:18:00.174000Z",
     "iopub.status.busy": "2023-06-15T10:18:00.174000Z",
     "iopub.status.idle": "2023-06-15T10:18:00.528000Z",
     "shell.execute_reply": "2023-06-15T10:18:00.528000Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "200.0"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mdp = AdaStress.ASTMDP(PumpSim())\n",
    "mdp.reward.event_bonus = 200.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "0a8f52cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-15T10:18:00.544000Z",
     "iopub.status.busy": "2023-06-15T10:18:00.544000Z",
     "iopub.status.idle": "2023-06-15T10:18:00.560000Z",
     "shell.execute_reply": "2023-06-15T10:18:00.560000Z"
    }
   },
   "outputs": [],
   "source": [
    "using Random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "45fbe92a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-15T10:18:00.560000Z",
     "iopub.status.busy": "2023-06-15T10:18:00.560000Z",
     "iopub.status.idle": "2023-06-15T10:18:03.959000Z",
     "shell.execute_reply": "2023-06-15T10:18:03.959000Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[32mProgress: 100%|█████████████████████████████████████████| Time: 0:00:37\u001b[39m\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "DataStructures.PriorityQueue{Any, Any, Base.Order.ForwardOrdering} with 10 entries:\n",
       "  MCSResult(UInt32[0x20a6d935, 0x28bba493, 0xb7b93759, 0xd1a1446c, 0… => 206.991\n",
       "  MCSResult(UInt32[0x084541d7, 0x84540de9, 0x7cc282fe, 0x8c04197f, 0… => 207.019\n",
       "  MCSResult(UInt32[0x13ad911b, 0xf09a855d, 0x47101ea7, 0x25d57373, 0… => 208.057\n",
       "  MCSResult(UInt32[0xef54ffaf, 0x5b752e2b, 0x8940f9fe, 0x87bfa056])   => 208.121\n",
       "  MCSResult(UInt32[0xa4fdc8b9, 0xbc7ce3e9, 0x1d17d64d, 0xc72e51ab, 0… => 208.256\n",
       "  MCSResult(UInt32[0xfb1a01a1, 0x45b42a6c, 0xdea6badb, 0x49b2b636, 0… => 209.586\n",
       "  MCSResult(UInt32[0x10c6c90c, 0xb0192166, 0xd7c40237, 0x6b827ac9, 0… => 210.216\n",
       "  MCSResult(UInt32[0x1c031724, 0x22bca5ad, 0xec5453ee, 0x38a2c995, 0… => 210.228\n",
       "  MCSResult(UInt32[0x769c9150, 0x211f39ca, 0x8b28f979, 0xb16ab1f2, 0… => 211.552\n",
       "  MCSResult(UInt32[0x3ab41a82, 0xcd4d763d, 0x219e185b, 0xca868fbb, 0… => 213.017"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Random.seed!(0)\n",
    "sol = mcs(() -> mdp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "cc905111",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PyObject scen1.i.finished:              array(56)\n",
       "scen1.i.on:                    array(56)\n",
       "scen1.r.probdens:              array(56)\n",
       "scen1.flows.ee_1.s.current:    array(56)\n",
       "scen1.flows.ee_1.s.voltage:    array(56)\n",
       "scen1.flows.sig_1.s.power:     array(56)\n",
       "scen1.flows.wat_1.s.flowrate:  array(56)\n",
       "scen1.flows.wat_1.s.pressure:  array(56)\n",
       "scen1.flows.wat_1.s.area:      array(56)\n",
       "scen1.flows.wat_1.s.level:     array(56)\n",
       "scen1.flows.wat_2.s.flowrate:  array(56)\n",
       "scen1.flows.wat_2.s.pressure:  array(56)\n",
       "scen1.flows.wat_2.s.area:      array(56)\n",
       "scen1.flows.wat_2.s.level:     array(56)\n",
       "scen1.fxns.import_ee.s.effstate: array(56)\n",
       "scen1.fxns.import_ee.m.faults.no_v: array(56)\n",
       "scen1.fxns.import_ee.m.faults.inf_v: array(56)\n",
       "scen1.fxns.import_ee.r.s.effstate: array(56)\n",
       "scen1.fxns.import_ee.r.s.grid_noise: array(56)\n",
       "scen1.fxns.import_ee.r.probdens: array(56)\n",
       "scen1.fxns.import_wa           array(56)\n",
       "scen1.fxns.import_wa           array(56)\n",
       "scen1.fxns.import_si           array(56)\n",
       "scen1.fxns.import_signal.r.s.sig_noise: array(56)\n",
       "scen1.fxns.import_signal.r.probdens: array(56)\n",
       "scen1.fxns.move_water.i.over_pressure: array(56)\n",
       "scen1.fxns.move_water.s.total_flow: array(56)\n",
       "scen1.fxns.move_water.s.eff:   array(56)\n",
       "scen1.fxns.move_wate           array(56)\n",
       "scen1.fxns.move_water.m.faults.short: array(56)\n",
       "scen1.fxns.move_water.r.s.eff: array(56)\n",
       "scen1.fxns.move_water.r.probdens: array(56)\n",
       "scen1.fxns.move_wate           array(56)\n",
       "scen1.fxns.move_wate           array(56)\n",
       "scen1.fxns.export_water.m.faults.block: array(56)\n",
       "scen1.time:                    array(56)\n",
       "scen5.i.finished:              array(56)\n",
       "scen5.i.on:                    array(56)\n",
       "scen5.r.probdens:              array(56)\n",
       "scen5.flows.ee_1.s.current:    array(56)\n",
       "scen5.flows.ee_1.s.voltage:    array(56)\n",
       "scen5.flows.sig_1.s.power:     array(56)\n",
       "scen5.flows.wat_1.s.flowrate:  array(56)\n",
       "scen5.flows.wat_1.s.pressure:  array(56)\n",
       "scen5.flows.wat_1.s.area:      array(56)\n",
       "scen5.flows.wat_1.s.level:     array(56)\n",
       "scen5.flows.wat_2.s.flowrate:  array(56)\n",
       "scen5.flows.wat_2.s.pressure:  array(56)\n",
       "scen5.flows.wat_2.s.area:      array(56)\n",
       "scen5.flows.wat_2.s.level:     array(56)\n",
       "scen5.fxns.import_ee.s.effstate: array(56)\n",
       "scen5.fxns.import_ee.m.faults.no_v: array(56)\n",
       "scen5.fxns.import_ee.m.faults.inf_v: array(56)\n",
       "scen5.fxns.import_ee.r.s.effstate: array(56)\n",
       "scen5.fxns.import_ee.r.s.grid_noise: array(56)\n",
       "scen5.fxns.import_ee.r.probdens: array(56)\n",
       "scen5.fxns.import_wa           array(56)\n",
       "scen5.fxns.import_wa           array(56)\n",
       "scen5.fxns.import_si           array(56)\n",
       "scen5.fxns.import_signal.r.s.sig_noise: array(56)\n",
       "scen5.fxns.import_signal.r.probdens: array(56)\n",
       "scen5.fxns.move_water.i.over_pressure: array(56)\n",
       "scen5.fxns.move_water.s.total_flow: array(56)\n",
       "scen5.fxns.move_water.s.eff:   array(56)\n",
       "scen5.fxns.move_wate           array(56)\n",
       "scen5.fxns.move_water.m.faults.short: array(56)\n",
       "scen5.fxns.move_water.r.s.eff: array(56)\n",
       "scen5.fxns.move_water.r.probdens: array(56)\n",
       "scen5.fxns.move_wate           array(56)\n",
       "scen5.fxns.move_wate           array(56)\n",
       "scen5.fxns.export_water.m.faults.block: array(56)\n",
       "scen5.time:                    array(56)\n",
       "scen6.i.finished:              array(56)\n",
       "scen6.i.on:                    array(56)\n",
       "scen6.r.probdens:              array(56)\n",
       "scen6.flows.ee_1.s.current:    array(56)\n",
       "scen6.flows.ee_1.s.voltage:    array(56)\n",
       "scen6.flows.sig_1.s.power:     array(56)\n",
       "scen6.flows.wat_1.s.flowrate:  array(56)\n",
       "scen6.flows.wat_1.s.pressure:  array(56)\n",
       "scen6.flows.wat_1.s.area:      array(56)\n",
       "scen6.flows.wat_1.s.level:     array(56)\n",
       "scen6.flows.wat_2.s.flowrate:  array(56)\n",
       "scen6.flows.wat_2.s.pressure:  array(56)\n",
       "scen6.flows.wat_2.s.area:      array(56)\n",
       "scen6.flows.wat_2.s.level:     array(56)\n",
       "scen6.fxns.import_ee.s.effstate: array(56)\n",
       "scen6.fxns.import_ee.m.faults.no_v: array(56)\n",
       "scen6.fxns.import_ee.m.faults.inf_v: array(56)\n",
       "scen6.fxns.import_ee.r.s.effstate: array(56)\n",
       "scen6.fxns.import_ee.r.s.grid_noise: array(56)\n",
       "scen6.fxns.import_ee.r.probdens: array(56)\n",
       "scen6.fxns.import_wa           array(56)\n",
       "scen6.fxns.import_wa           array(56)\n",
       "scen6.fxns.import_si           array(56)\n",
       "scen6.fxns.import_signal.r.s.sig_noise: array(56)\n",
       "scen6.fxns.import_signal.r.probdens: array(56)\n",
       "scen6.fxns.move_water.i.over_pressure: array(56)\n",
       "scen6.fxns.move_water.s.total_flow: array(56)\n",
       "scen6.fxns.move_water.s.eff:   array(56)\n",
       "scen6.fxns.move_wate           array(56)\n",
       "scen6.fxns.move_water.m.faults.short: array(56)\n",
       "scen6.fxns.move_water.r.s.eff: array(56)\n",
       "scen6.fxns.move_water.r.probdens: array(56)\n",
       "scen6.fxns.move_wate           array(56)\n",
       "scen6.fxns.move_wate           array(56)\n",
       "scen6.fxns.export_water.m.faults.block: array(56)\n",
       "scen6.time:                    array(56)\n",
       "scen3.i.finished:              array(56)\n",
       "scen3.i.on:                    array(56)\n",
       "scen3.r.probdens:              array(56)\n",
       "scen3.flows.ee_1.s.current:    array(56)\n",
       "scen3.flows.ee_1.s.voltage:    array(56)\n",
       "scen3.flows.sig_1.s.power:     array(56)\n",
       "scen3.flows.wat_1.s.flowrate:  array(56)\n",
       "scen3.flows.wat_1.s.pressure:  array(56)\n",
       "scen3.flows.wat_1.s.area:      array(56)\n",
       "scen3.flows.wat_1.s.level:     array(56)\n",
       "scen3.flows.wat_2.s.flowrate:  array(56)\n",
       "scen3.flows.wat_2.s.pressure:  array(56)\n",
       "scen3.flows.wat_2.s.area:      array(56)\n",
       "scen3.flows.wat_2.s.level:     array(56)\n",
       "scen3.fxns.import_ee.s.effstate: array(56)\n",
       "scen3.fxns.import_ee.m.faults.no_v: array(56)\n",
       "scen3.fxns.import_ee.m.faults.inf_v: array(56)\n",
       "scen3.fxns.import_ee.r.s.effstate: array(56)\n",
       "scen3.fxns.import_ee.r.s.grid_noise: array(56)\n",
       "scen3.fxns.import_ee.r.probdens: array(56)\n",
       "scen3.fxns.import_wa           array(56)\n",
       "scen3.fxns.import_wa           array(56)\n",
       "scen3.fxns.import_si           array(56)\n",
       "scen3.fxns.import_signal.r.s.sig_noise: array(56)\n",
       "scen3.fxns.import_signal.r.probdens: array(56)\n",
       "scen3.fxns.move_water.i.over_pressure: array(56)\n",
       "scen3.fxns.move_water.s.total_flow: array(56)\n",
       "scen3.fxns.move_water.s.eff:   array(56)\n",
       "scen3.fxns.move_wate           array(56)\n",
       "scen3.fxns.move_water.m.faults.short: array(56)\n",
       "scen3.fxns.move_water.r.s.eff: array(56)\n",
       "scen3.fxns.move_water.r.probdens: array(56)\n",
       "scen3.fxns.move_wate           array(56)\n",
       "scen3.fxns.move_wate           array(56)\n",
       "scen3.fxns.export_water.m.faults.block: array(56)\n",
       "scen3.time:                    array(56)\n",
       "scen4.i.finished:              array(56)\n",
       "scen4.i.on:                    array(56)\n",
       "scen4.r.probdens:              array(56)\n",
       "scen4.flows.ee_1.s.current:    array(56)\n",
       "scen4.flows.ee_1.s.voltage:    array(56)\n",
       "scen4.flows.sig_1.s.power:     array(56)\n",
       "scen4.flows.wat_1.s.flowrate:  array(56)\n",
       "scen4.flows.wat_1.s.pressure:  array(56)\n",
       "scen4.flows.wat_1.s.area:      array(56)\n",
       "scen4.flows.wat_1.s.level:     array(56)\n",
       "scen4.flows.wat_2.s.flowrate:  array(56)\n",
       "scen4.flows.wat_2.s.pressure:  array(56)\n",
       "scen4.flows.wat_2.s.area:      array(56)\n",
       "scen4.flows.wat_2.s.level:     array(56)\n",
       "scen4.fxns.import_ee.s.effstate: array(56)\n",
       "scen4.fxns.import_ee.m.faults.no_v: array(56)\n",
       "scen4.fxns.import_ee.m.faults.inf_v: array(56)\n",
       "scen4.fxns.import_ee.r.s.effstate: array(56)\n",
       "scen4.fxns.import_ee.r.s.grid_noise: array(56)\n",
       "scen4.fxns.import_ee.r.probdens: array(56)\n",
       "scen4.fxns.import_wa           array(56)\n",
       "scen4.fxns.import_wa           array(56)\n",
       "scen4.fxns.import_si           array(56)\n",
       "scen4.fxns.import_signal.r.s.sig_noise: array(56)\n",
       "scen4.fxns.import_signal.r.probdens: array(56)\n",
       "scen4.fxns.move_water.i.over_pressure: array(56)\n",
       "scen4.fxns.move_water.s.total_flow: array(56)\n",
       "scen4.fxns.move_water.s.eff:   array(56)\n",
       "scen4.fxns.move_wate           array(56)\n",
       "scen4.fxns.move_water.m.faults.short: array(56)\n",
       "scen4.fxns.move_water.r.s.eff: array(56)\n",
       "scen4.fxns.move_water.r.probdens: array(56)\n",
       "scen4.fxns.move_wate           array(56)\n",
       "scen4.fxns.move_wate           array(56)\n",
       "scen4.fxns.export_water.m.faults.block: array(56)\n",
       "scen4.time:                    array(56)\n",
       "scen0.i.finished:              array(56)\n",
       "scen0.i.on:                    array(56)\n",
       "scen0.r.probdens:              array(56)\n",
       "scen0.flows.ee_1.s.current:    array(56)\n",
       "scen0.flows.ee_1.s.voltage:    array(56)\n",
       "scen0.flows.sig_1.s.power:     array(56)\n",
       "scen0.flows.wat_1.s.flowrate:  array(56)\n",
       "scen0.flows.wat_1.s.pressure:  array(56)\n",
       "scen0.flows.wat_1.s.area:      array(56)\n",
       "scen0.flows.wat_1.s.level:     array(56)\n",
       "scen0.flows.wat_2.s.flowrate:  array(56)\n",
       "scen0.flows.wat_2.s.pressure:  array(56)\n",
       "scen0.flows.wat_2.s.area:      array(56)\n",
       "scen0.flows.wat_2.s.level:     array(56)\n",
       "scen0.fxns.import_ee.s.effstate: array(56)\n",
       "scen0.fxns.import_ee.m.faults.no_v: array(56)\n",
       "scen0.fxns.import_ee.m.faults.inf_v: array(56)\n",
       "scen0.fxns.import_ee.r.s.effstate: array(56)\n",
       "scen0.fxns.import_ee.r.s.grid_noise: array(56)\n",
       "scen0.fxns.import_ee.r.probdens: array(56)\n",
       "scen0.fxns.import_wa           array(56)\n",
       "scen0.fxns.import_wa           array(56)\n",
       "scen0.fxns.import_si           array(56)\n",
       "scen0.fxns.import_signal.r.s.sig_noise: array(56)\n",
       "scen0.fxns.import_signal.r.probdens: array(56)\n",
       "scen0.fxns.move_water.i.over_pressure: array(56)\n",
       "scen0.fxns.move_water.s.total_flow: array(56)\n",
       "scen0.fxns.move_water.s.eff:   array(56)\n",
       "scen0.fxns.move_wate           array(56)\n",
       "scen0.fxns.move_water.m.faults.short: array(56)\n",
       "scen0.fxns.move_water.r.s.eff: array(56)\n",
       "scen0.fxns.move_water.r.probdens: array(56)\n",
       "scen0.fxns.move_wate           array(56)\n",
       "scen0.fxns.move_wate           array(56)\n",
       "scen0.fxns.export_water.m.faults.block: array(56)\n",
       "scen0.time:                    array(56)\n",
       "scen2.i.finished:              array(56)\n",
       "scen2.i.on:                    array(56)\n",
       "scen2.r.probdens:              array(56)\n",
       "scen2.flows.ee_1.s.current:    array(56)\n",
       "scen2.flows.ee_1.s.voltage:    array(56)\n",
       "scen2.flows.sig_1.s.power:     array(56)\n",
       "scen2.flows.wat_1.s.flowrate:  array(56)\n",
       "scen2.flows.wat_1.s.pressure:  array(56)\n",
       "scen2.flows.wat_1.s.area:      array(56)\n",
       "scen2.flows.wat_1.s.level:     array(56)\n",
       "scen2.flows.wat_2.s.flowrate:  array(56)\n",
       "scen2.flows.wat_2.s.pressure:  array(56)\n",
       "scen2.flows.wat_2.s.area:      array(56)\n",
       "scen2.flows.wat_2.s.level:     array(56)\n",
       "scen2.fxns.import_ee.s.effstate: array(56)\n",
       "scen2.fxns.import_ee.m.faults.no_v: array(56)\n",
       "scen2.fxns.import_ee.m.faults.inf_v: array(56)\n",
       "scen2.fxns.import_ee.r.s.effstate: array(56)\n",
       "scen2.fxns.import_ee.r.s.grid_noise: array(56)\n",
       "scen2.fxns.import_ee.r.probdens: array(56)\n",
       "scen2.fxns.import_wa           array(56)\n",
       "scen2.fxns.import_wa           array(56)\n",
       "scen2.fxns.import_si           array(56)\n",
       "scen2.fxns.import_signal.r.s.sig_noise: array(56)\n",
       "scen2.fxns.import_signal.r.probdens: array(56)\n",
       "scen2.fxns.move_water.i.over_pressure: array(56)\n",
       "scen2.fxns.move_water.s.total_flow: array(56)\n",
       "scen2.fxns.move_water.s.eff:   array(56)\n",
       "scen2.fxns.move_wate           array(56)\n",
       "scen2.fxns.move_water.m.faults.short: array(56)\n",
       "scen2.fxns.move_water.r.s.eff: array(56)\n",
       "scen2.fxns.move_water.r.probdens: array(56)\n",
       "scen2.fxns.move_wate           array(56)\n",
       "scen2.fxns.move_wate           array(56)\n",
       "scen2.fxns.export_water.m.faults.block: array(56)\n",
       "scen2.time:                    array(56)\n",
       "scen9.i.finished:              array(56)\n",
       "scen9.i.on:                    array(56)\n",
       "scen9.r.probdens:              array(56)\n",
       "scen9.flows.ee_1.s.current:    array(56)\n",
       "scen9.flows.ee_1.s.voltage:    array(56)\n",
       "scen9.flows.sig_1.s.power:     array(56)\n",
       "scen9.flows.wat_1.s.flowrate:  array(56)\n",
       "scen9.flows.wat_1.s.pressure:  array(56)\n",
       "scen9.flows.wat_1.s.area:      array(56)\n",
       "scen9.flows.wat_1.s.level:     array(56)\n",
       "scen9.flows.wat_2.s.flowrate:  array(56)\n",
       "scen9.flows.wat_2.s.pressure:  array(56)\n",
       "scen9.flows.wat_2.s.area:      array(56)\n",
       "scen9.flows.wat_2.s.level:     array(56)\n",
       "scen9.fxns.import_ee.s.effstate: array(56)\n",
       "scen9.fxns.import_ee.m.faults.no_v: array(56)\n",
       "scen9.fxns.import_ee.m.faults.inf_v: array(56)\n",
       "scen9.fxns.import_ee.r.s.effstate: array(56)\n",
       "scen9.fxns.import_ee.r.s.grid_noise: array(56)\n",
       "scen9.fxns.import_ee.r.probdens: array(56)\n",
       "scen9.fxns.import_wa           array(56)\n",
       "scen9.fxns.import_wa           array(56)\n",
       "scen9.fxns.import_si           array(56)\n",
       "scen9.fxns.import_signal.r.s.sig_noise: array(56)\n",
       "scen9.fxns.import_signal.r.probdens: array(56)\n",
       "scen9.fxns.move_water.i.over_pressure: array(56)\n",
       "scen9.fxns.move_water.s.total_flow: array(56)\n",
       "scen9.fxns.move_water.s.eff:   array(56)\n",
       "scen9.fxns.move_wate           array(56)\n",
       "scen9.fxns.move_water.m.faults.short: array(56)\n",
       "scen9.fxns.move_water.r.s.eff: array(56)\n",
       "scen9.fxns.move_water.r.probdens: array(56)\n",
       "scen9.fxns.move_wate           array(56)\n",
       "scen9.fxns.move_wate           array(56)\n",
       "scen9.fxns.export_water.m.faults.block: array(56)\n",
       "scen9.time:                    array(56)\n",
       "scen8.i.finished:              array(56)\n",
       "scen8.i.on:                    array(56)\n",
       "scen8.r.probdens:              array(56)\n",
       "scen8.flows.ee_1.s.current:    array(56)\n",
       "scen8.flows.ee_1.s.voltage:    array(56)\n",
       "scen8.flows.sig_1.s.power:     array(56)\n",
       "scen8.flows.wat_1.s.flowrate:  array(56)\n",
       "scen8.flows.wat_1.s.pressure:  array(56)\n",
       "scen8.flows.wat_1.s.area:      array(56)\n",
       "scen8.flows.wat_1.s.level:     array(56)\n",
       "scen8.flows.wat_2.s.flowrate:  array(56)\n",
       "scen8.flows.wat_2.s.pressure:  array(56)\n",
       "scen8.flows.wat_2.s.area:      array(56)\n",
       "scen8.flows.wat_2.s.level:     array(56)\n",
       "scen8.fxns.import_ee.s.effstate: array(56)\n",
       "scen8.fxns.import_ee.m.faults.no_v: array(56)\n",
       "scen8.fxns.import_ee.m.faults.inf_v: array(56)\n",
       "scen8.fxns.import_ee.r.s.effstate: array(56)\n",
       "scen8.fxns.import_ee.r.s.grid_noise: array(56)\n",
       "scen8.fxns.import_ee.r.probdens: array(56)\n",
       "scen8.fxns.import_wa           array(56)\n",
       "scen8.fxns.import_wa           array(56)\n",
       "scen8.fxns.import_si           array(56)\n",
       "scen8.fxns.import_signal.r.s.sig_noise: array(56)\n",
       "scen8.fxns.import_signal.r.probdens: array(56)\n",
       "scen8.fxns.move_water.i.over_pressure: array(56)\n",
       "scen8.fxns.move_water.s.total_flow: array(56)\n",
       "scen8.fxns.move_water.s.eff:   array(56)\n",
       "scen8.fxns.move_wate           array(56)\n",
       "scen8.fxns.move_water.m.faults.short: array(56)\n",
       "scen8.fxns.move_water.r.s.eff: array(56)\n",
       "scen8.fxns.move_water.r.probdens: array(56)\n",
       "scen8.fxns.move_wate           array(56)\n",
       "scen8.fxns.move_wate           array(56)\n",
       "scen8.fxns.export_water.m.faults.block: array(56)\n",
       "scen8.time:                    array(56)\n",
       "scen7.i.finished:              array(56)\n",
       "scen7.i.on:                    array(56)\n",
       "scen7.r.probdens:              array(56)\n",
       "scen7.flows.ee_1.s.current:    array(56)\n",
       "scen7.flows.ee_1.s.voltage:    array(56)\n",
       "scen7.flows.sig_1.s.power:     array(56)\n",
       "scen7.flows.wat_1.s.flowrate:  array(56)\n",
       "scen7.flows.wat_1.s.pressure:  array(56)\n",
       "scen7.flows.wat_1.s.area:      array(56)\n",
       "scen7.flows.wat_1.s.level:     array(56)\n",
       "scen7.flows.wat_2.s.flowrate:  array(56)\n",
       "scen7.flows.wat_2.s.pressure:  array(56)\n",
       "scen7.flows.wat_2.s.area:      array(56)\n",
       "scen7.flows.wat_2.s.level:     array(56)\n",
       "scen7.fxns.import_ee.s.effstate: array(56)\n",
       "scen7.fxns.import_ee.m.faults.no_v: array(56)\n",
       "scen7.fxns.import_ee.m.faults.inf_v: array(56)\n",
       "scen7.fxns.import_ee.r.s.effstate: array(56)\n",
       "scen7.fxns.import_ee.r.s.grid_noise: array(56)\n",
       "scen7.fxns.import_ee.r.probdens: array(56)\n",
       "scen7.fxns.import_wa           array(56)\n",
       "scen7.fxns.import_wa           array(56)\n",
       "scen7.fxns.import_si           array(56)\n",
       "scen7.fxns.import_signal.r.s.sig_noise: array(56)\n",
       "scen7.fxns.import_signal.r.probdens: array(56)\n",
       "scen7.fxns.move_water.i.over_pressure: array(56)\n",
       "scen7.fxns.move_water.s.total_flow: array(56)\n",
       "scen7.fxns.move_water.s.eff:   array(56)\n",
       "scen7.fxns.move_wate           array(56)\n",
       "scen7.fxns.move_water.m.faults.short: array(56)\n",
       "scen7.fxns.move_water.r.s.eff: array(56)\n",
       "scen7.fxns.move_water.r.probdens: array(56)\n",
       "scen7.fxns.move_wate           array(56)\n",
       "scen7.fxns.move_wate           array(56)\n",
       "scen7.fxns.export_water.m.faults.block: array(56)\n",
       "scen7.time:                    array(56)"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "i=0\n",
    "mdlhists = Dict()\n",
    "for (result, r) in sol\n",
    "    AdaStress.replay!(mdp, result)\n",
    "    mdlhists[string(\"scen\", i)] = mdp.sim.sim.hist\n",
    "    i+=1\n",
    "end\n",
    "mdlhists = fmd.analyze.history.History(mdlhists)\n",
    "mdlhists = mdlhists.flatten()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "d39d5238",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "Figure(PyObject <Figure size 600x400 with 4 Axes>)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(Figure(PyObject <Figure size 600x400 with 4 Axes>), PyObject[PyObject <Axes: title={'center': 'fxns.move_water.s.eff'}, xlabel=' '>, PyObject <Axes: title={'center': 'fxns.move_water.s.total_flow'}, xlabel=' '>, PyObject <Axes: title={'center': 'flows.wat_2.s.flowrate'}, xlabel='time'>, PyObject <Axes: title={'center': 'flows.wat_2.s.pressure'}, xlabel='time'>])"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mdlhists.plot_line(\"fxns.move_water.s.eff\", \n",
    "                        \"fxns.move_water.s.total_flow\", \n",
    "                        \"flows.wat_2.s.flowrate\", \n",
    "                        \"flows.wat_2.s.pressure\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "694dfcca",
   "metadata": {},
   "source": [
    "### MCTS\n",
    "\n",
    "Monte Carlo Tree Search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "19fc8863",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AdaStress.Solvers.MonteCarloTreeSearch.MCTS(1000, 10, 1.0, 0.7, 1.0, nothing)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mcts = AdaStress.Solvers.MCTS(num_iterations=1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "baf75882",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[32mProgress: 100%|█████████████████████████████████████████| Time: 0:00:14\u001b[39m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " 14.751713 seconds (5.93 M allocations: 283.844 MiB, 0.48% gc time, 2.24% compilation time)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "DataStructures.PriorityQueue{Any, Any, Base.Order.ForwardOrdering} with 10 entries:\n",
       "  MCTSResult(UInt32[0x828d83bf, 0x569a8b4b, 0x42db7247, 0x860d2412])  => 203.112\n",
       "  MCTSResult(UInt32[0x9be7bec6, 0xa281bfa4, 0xa911ec3d])              => 203.12\n",
       "  MCTSResult(UInt32[0x9be7bec6, 0xd34fd93a, 0x6bc04b0b])              => 203.151\n",
       "  MCTSResult(UInt32[0xfd5b9189, 0xe6ed8348, 0x53813216])              => 203.248\n",
       "  MCTSResult(UInt32[0x77d94185, 0x0593823c, 0xe2a9136a, 0x16e247bc, … => 203.706\n",
       "  MCTSResult(UInt32[0x48cea00e, 0x5e5903be, 0x40184882, 0x11abadd6, … => 204.454\n",
       "  MCTSResult(UInt32[0xe04f8a60, 0xff8d3670, 0x5846f74e, 0xd2c176d0, … => 204.516\n",
       "  MCTSResult(UInt32[0x76bdd112, 0x40fc08c9, 0x7151eb1c, 0x25a0e9a5, … => 204.932\n",
       "  MCTSResult(UInt32[0xc72f45c9, 0x2a4519ab, 0x52413abb])              => 205.292\n",
       "  MCTSResult(UInt32[0x57387aea, 0xaf5383c3, 0x43d34d08, 0x1720253e, … => 206.777"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Random.seed!(0)\n",
    "@time sol = mcts(() -> mdp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "1d049974",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PyObject t0.i.finished:                 array(56)\n",
       "t0.i.on:                       array(56)\n",
       "t0.r.probdens:                 array(56)\n",
       "t0.flows.ee_1.s.current:       array(56)\n",
       "t0.flows.ee_1.s.voltage:       array(56)\n",
       "t0.flows.sig_1.s.power:        array(56)\n",
       "t0.flows.wat_1.s.flowrate:     array(56)\n",
       "t0.flows.wat_1.s.pressure:     array(56)\n",
       "t0.flows.wat_1.s.area:         array(56)\n",
       "t0.flows.wat_1.s.level:        array(56)\n",
       "t0.flows.wat_2.s.flowrate:     array(56)\n",
       "t0.flows.wat_2.s.pressure:     array(56)\n",
       "t0.flows.wat_2.s.area:         array(56)\n",
       "t0.flows.wat_2.s.level:        array(56)\n",
       "t0.fxns.import_ee.s.effstate:  array(56)\n",
       "t0.fxns.import_ee.m.faults.no_v: array(56)\n",
       "t0.fxns.import_ee.m.faults.inf_v: array(56)\n",
       "t0.fxns.import_ee.r.s.effstate: array(56)\n",
       "t0.fxns.import_ee.r.s.grid_noise: array(56)\n",
       "t0.fxns.import_ee.r.probdens:  array(56)\n",
       "t0.fxns.import_water.m.faults.no_wat: array(56)\n",
       "t0.fxns.import_water.m.faults.less_wat: array(56)\n",
       "t0.fxns.import_signal.m.faults.no_sig: array(56)\n",
       "t0.fxns.import_signal.r.s.sig_noise: array(56)\n",
       "t0.fxns.import_signal.r.probdens: array(56)\n",
       "t0.fxns.move_water.i.over_pressure: array(56)\n",
       "t0.fxns.move_water.s.total_flow: array(56)\n",
       "t0.fxns.move_water.s.eff:      array(56)\n",
       "t0.fxns.move_water.m.faults.mech_break: array(56)\n",
       "t0.fxns.move_water.m.faults.short: array(56)\n",
       "t0.fxns.move_water.r.s.eff:    array(56)\n",
       "t0.fxns.move_water.r.probdens: array(56)\n",
       "t0.fxns.move_water.t           array(56)\n",
       "t0.fxns.move_water.t           array(56)\n",
       "t0.fxns.export_water.m.faults.block: array(56)\n",
       "t0.time:                       array(56)\n",
       "t4.i.finished:                 array(56)\n",
       "t4.i.on:                       array(56)\n",
       "t4.r.probdens:                 array(56)\n",
       "t4.flows.ee_1.s.current:       array(56)\n",
       "t4.flows.ee_1.s.voltage:       array(56)\n",
       "t4.flows.sig_1.s.power:        array(56)\n",
       "t4.flows.wat_1.s.flowrate:     array(56)\n",
       "t4.flows.wat_1.s.pressure:     array(56)\n",
       "t4.flows.wat_1.s.area:         array(56)\n",
       "t4.flows.wat_1.s.level:        array(56)\n",
       "t4.flows.wat_2.s.flowrate:     array(56)\n",
       "t4.flows.wat_2.s.pressure:     array(56)\n",
       "t4.flows.wat_2.s.area:         array(56)\n",
       "t4.flows.wat_2.s.level:        array(56)\n",
       "t4.fxns.import_ee.s.effstate:  array(56)\n",
       "t4.fxns.import_ee.m.faults.no_v: array(56)\n",
       "t4.fxns.import_ee.m.faults.inf_v: array(56)\n",
       "t4.fxns.import_ee.r.s.effstate: array(56)\n",
       "t4.fxns.import_ee.r.s.grid_noise: array(56)\n",
       "t4.fxns.import_ee.r.probdens:  array(56)\n",
       "t4.fxns.import_water.m.faults.no_wat: array(56)\n",
       "t4.fxns.import_water.m.faults.less_wat: array(56)\n",
       "t4.fxns.import_signal.m.faults.no_sig: array(56)\n",
       "t4.fxns.import_signal.r.s.sig_noise: array(56)\n",
       "t4.fxns.import_signal.r.probdens: array(56)\n",
       "t4.fxns.move_water.i.over_pressure: array(56)\n",
       "t4.fxns.move_water.s.total_flow: array(56)\n",
       "t4.fxns.move_water.s.eff:      array(56)\n",
       "t4.fxns.move_water.m.faults.mech_break: array(56)\n",
       "t4.fxns.move_water.m.faults.short: array(56)\n",
       "t4.fxns.move_water.r.s.eff:    array(56)\n",
       "t4.fxns.move_water.r.probdens: array(56)\n",
       "t4.fxns.move_water.t           array(56)\n",
       "t4.fxns.move_water.t           array(56)\n",
       "t4.fxns.export_water.m.faults.block: array(56)\n",
       "t4.time:                       array(56)\n",
       "t5.i.finished:                 array(56)\n",
       "t5.i.on:                       array(56)\n",
       "t5.r.probdens:                 array(56)\n",
       "t5.flows.ee_1.s.current:       array(56)\n",
       "t5.flows.ee_1.s.voltage:       array(56)\n",
       "t5.flows.sig_1.s.power:        array(56)\n",
       "t5.flows.wat_1.s.flowrate:     array(56)\n",
       "t5.flows.wat_1.s.pressure:     array(56)\n",
       "t5.flows.wat_1.s.area:         array(56)\n",
       "t5.flows.wat_1.s.level:        array(56)\n",
       "t5.flows.wat_2.s.flowrate:     array(56)\n",
       "t5.flows.wat_2.s.pressure:     array(56)\n",
       "t5.flows.wat_2.s.area:         array(56)\n",
       "t5.flows.wat_2.s.level:        array(56)\n",
       "t5.fxns.import_ee.s.effstate:  array(56)\n",
       "t5.fxns.import_ee.m.faults.no_v: array(56)\n",
       "t5.fxns.import_ee.m.faults.inf_v: array(56)\n",
       "t5.fxns.import_ee.r.s.effstate: array(56)\n",
       "t5.fxns.import_ee.r.s.grid_noise: array(56)\n",
       "t5.fxns.import_ee.r.probdens:  array(56)\n",
       "t5.fxns.import_water.m.faults.no_wat: array(56)\n",
       "t5.fxns.import_water.m.faults.less_wat: array(56)\n",
       "t5.fxns.import_signal.m.faults.no_sig: array(56)\n",
       "t5.fxns.import_signal.r.s.sig_noise: array(56)\n",
       "t5.fxns.import_signal.r.probdens: array(56)\n",
       "t5.fxns.move_water.i.over_pressure: array(56)\n",
       "t5.fxns.move_water.s.total_flow: array(56)\n",
       "t5.fxns.move_water.s.eff:      array(56)\n",
       "t5.fxns.move_water.m.faults.mech_break: array(56)\n",
       "t5.fxns.move_water.m.faults.short: array(56)\n",
       "t5.fxns.move_water.r.s.eff:    array(56)\n",
       "t5.fxns.move_water.r.probdens: array(56)\n",
       "t5.fxns.move_water.t           array(56)\n",
       "t5.fxns.move_water.t           array(56)\n",
       "t5.fxns.export_water.m.faults.block: array(56)\n",
       "t5.time:                       array(56)\n",
       "t6.i.finished:                 array(56)\n",
       "t6.i.on:                       array(56)\n",
       "t6.r.probdens:                 array(56)\n",
       "t6.flows.ee_1.s.current:       array(56)\n",
       "t6.flows.ee_1.s.voltage:       array(56)\n",
       "t6.flows.sig_1.s.power:        array(56)\n",
       "t6.flows.wat_1.s.flowrate:     array(56)\n",
       "t6.flows.wat_1.s.pressure:     array(56)\n",
       "t6.flows.wat_1.s.area:         array(56)\n",
       "t6.flows.wat_1.s.level:        array(56)\n",
       "t6.flows.wat_2.s.flowrate:     array(56)\n",
       "t6.flows.wat_2.s.pressure:     array(56)\n",
       "t6.flows.wat_2.s.area:         array(56)\n",
       "t6.flows.wat_2.s.level:        array(56)\n",
       "t6.fxns.import_ee.s.effstate:  array(56)\n",
       "t6.fxns.import_ee.m.faults.no_v: array(56)\n",
       "t6.fxns.import_ee.m.faults.inf_v: array(56)\n",
       "t6.fxns.import_ee.r.s.effstate: array(56)\n",
       "t6.fxns.import_ee.r.s.grid_noise: array(56)\n",
       "t6.fxns.import_ee.r.probdens:  array(56)\n",
       "t6.fxns.import_water.m.faults.no_wat: array(56)\n",
       "t6.fxns.import_water.m.faults.less_wat: array(56)\n",
       "t6.fxns.import_signal.m.faults.no_sig: array(56)\n",
       "t6.fxns.import_signal.r.s.sig_noise: array(56)\n",
       "t6.fxns.import_signal.r.probdens: array(56)\n",
       "t6.fxns.move_water.i.over_pressure: array(56)\n",
       "t6.fxns.move_water.s.total_flow: array(56)\n",
       "t6.fxns.move_water.s.eff:      array(56)\n",
       "t6.fxns.move_water.m.faults.mech_break: array(56)\n",
       "t6.fxns.move_water.m.faults.short: array(56)\n",
       "t6.fxns.move_water.r.s.eff:    array(56)\n",
       "t6.fxns.move_water.r.probdens: array(56)\n",
       "t6.fxns.move_water.t           array(56)\n",
       "t6.fxns.move_water.t           array(56)\n",
       "t6.fxns.export_water.m.faults.block: array(56)\n",
       "t6.time:                       array(56)\n",
       "t2.i.finished:                 array(56)\n",
       "t2.i.on:                       array(56)\n",
       "t2.r.probdens:                 array(56)\n",
       "t2.flows.ee_1.s.current:       array(56)\n",
       "t2.flows.ee_1.s.voltage:       array(56)\n",
       "t2.flows.sig_1.s.power:        array(56)\n",
       "t2.flows.wat_1.s.flowrate:     array(56)\n",
       "t2.flows.wat_1.s.pressure:     array(56)\n",
       "t2.flows.wat_1.s.area:         array(56)\n",
       "t2.flows.wat_1.s.level:        array(56)\n",
       "t2.flows.wat_2.s.flowrate:     array(56)\n",
       "t2.flows.wat_2.s.pressure:     array(56)\n",
       "t2.flows.wat_2.s.area:         array(56)\n",
       "t2.flows.wat_2.s.level:        array(56)\n",
       "t2.fxns.import_ee.s.effstate:  array(56)\n",
       "t2.fxns.import_ee.m.faults.no_v: array(56)\n",
       "t2.fxns.import_ee.m.faults.inf_v: array(56)\n",
       "t2.fxns.import_ee.r.s.effstate: array(56)\n",
       "t2.fxns.import_ee.r.s.grid_noise: array(56)\n",
       "t2.fxns.import_ee.r.probdens:  array(56)\n",
       "t2.fxns.import_water.m.faults.no_wat: array(56)\n",
       "t2.fxns.import_water.m.faults.less_wat: array(56)\n",
       "t2.fxns.import_signal.m.faults.no_sig: array(56)\n",
       "t2.fxns.import_signal.r.s.sig_noise: array(56)\n",
       "t2.fxns.import_signal.r.probdens: array(56)\n",
       "t2.fxns.move_water.i.over_pressure: array(56)\n",
       "t2.fxns.move_water.s.total_flow: array(56)\n",
       "t2.fxns.move_water.s.eff:      array(56)\n",
       "t2.fxns.move_water.m.faults.mech_break: array(56)\n",
       "t2.fxns.move_water.m.faults.short: array(56)\n",
       "t2.fxns.move_water.r.s.eff:    array(56)\n",
       "t2.fxns.move_water.r.probdens: array(56)\n",
       "t2.fxns.move_water.t           array(56)\n",
       "t2.fxns.move_water.t           array(56)\n",
       "t2.fxns.export_water.m.faults.block: array(56)\n",
       "t2.time:                       array(56)\n",
       "t7.i.finished:                 array(56)\n",
       "t7.i.on:                       array(56)\n",
       "t7.r.probdens:                 array(56)\n",
       "t7.flows.ee_1.s.current:       array(56)\n",
       "t7.flows.ee_1.s.voltage:       array(56)\n",
       "t7.flows.sig_1.s.power:        array(56)\n",
       "t7.flows.wat_1.s.flowrate:     array(56)\n",
       "t7.flows.wat_1.s.pressure:     array(56)\n",
       "t7.flows.wat_1.s.area:         array(56)\n",
       "t7.flows.wat_1.s.level:        array(56)\n",
       "t7.flows.wat_2.s.flowrate:     array(56)\n",
       "t7.flows.wat_2.s.pressure:     array(56)\n",
       "t7.flows.wat_2.s.area:         array(56)\n",
       "t7.flows.wat_2.s.level:        array(56)\n",
       "t7.fxns.import_ee.s.effstate:  array(56)\n",
       "t7.fxns.import_ee.m.faults.no_v: array(56)\n",
       "t7.fxns.import_ee.m.faults.inf_v: array(56)\n",
       "t7.fxns.import_ee.r.s.effstate: array(56)\n",
       "t7.fxns.import_ee.r.s.grid_noise: array(56)\n",
       "t7.fxns.import_ee.r.probdens:  array(56)\n",
       "t7.fxns.import_water.m.faults.no_wat: array(56)\n",
       "t7.fxns.import_water.m.faults.less_wat: array(56)\n",
       "t7.fxns.import_signal.m.faults.no_sig: array(56)\n",
       "t7.fxns.import_signal.r.s.sig_noise: array(56)\n",
       "t7.fxns.import_signal.r.probdens: array(56)\n",
       "t7.fxns.move_water.i.over_pressure: array(56)\n",
       "t7.fxns.move_water.s.total_flow: array(56)\n",
       "t7.fxns.move_water.s.eff:      array(56)\n",
       "t7.fxns.move_water.m.faults.mech_break: array(56)\n",
       "t7.fxns.move_water.m.faults.short: array(56)\n",
       "t7.fxns.move_water.r.s.eff:    array(56)\n",
       "t7.fxns.move_water.r.probdens: array(56)\n",
       "t7.fxns.move_water.t           array(56)\n",
       "t7.fxns.move_water.t           array(56)\n",
       "t7.fxns.export_water.m.faults.block: array(56)\n",
       "t7.time:                       array(56)\n",
       "t9.i.finished:                 array(56)\n",
       "t9.i.on:                       array(56)\n",
       "t9.r.probdens:                 array(56)\n",
       "t9.flows.ee_1.s.current:       array(56)\n",
       "t9.flows.ee_1.s.voltage:       array(56)\n",
       "t9.flows.sig_1.s.power:        array(56)\n",
       "t9.flows.wat_1.s.flowrate:     array(56)\n",
       "t9.flows.wat_1.s.pressure:     array(56)\n",
       "t9.flows.wat_1.s.area:         array(56)\n",
       "t9.flows.wat_1.s.level:        array(56)\n",
       "t9.flows.wat_2.s.flowrate:     array(56)\n",
       "t9.flows.wat_2.s.pressure:     array(56)\n",
       "t9.flows.wat_2.s.area:         array(56)\n",
       "t9.flows.wat_2.s.level:        array(56)\n",
       "t9.fxns.import_ee.s.effstate:  array(56)\n",
       "t9.fxns.import_ee.m.faults.no_v: array(56)\n",
       "t9.fxns.import_ee.m.faults.inf_v: array(56)\n",
       "t9.fxns.import_ee.r.s.effstate: array(56)\n",
       "t9.fxns.import_ee.r.s.grid_noise: array(56)\n",
       "t9.fxns.import_ee.r.probdens:  array(56)\n",
       "t9.fxns.import_water.m.faults.no_wat: array(56)\n",
       "t9.fxns.import_water.m.faults.less_wat: array(56)\n",
       "t9.fxns.import_signal.m.faults.no_sig: array(56)\n",
       "t9.fxns.import_signal.r.s.sig_noise: array(56)\n",
       "t9.fxns.import_signal.r.probdens: array(56)\n",
       "t9.fxns.move_water.i.over_pressure: array(56)\n",
       "t9.fxns.move_water.s.total_flow: array(56)\n",
       "t9.fxns.move_water.s.eff:      array(56)\n",
       "t9.fxns.move_water.m.faults.mech_break: array(56)\n",
       "t9.fxns.move_water.m.faults.short: array(56)\n",
       "t9.fxns.move_water.r.s.eff:    array(56)\n",
       "t9.fxns.move_water.r.probdens: array(56)\n",
       "t9.fxns.move_water.t           array(56)\n",
       "t9.fxns.move_water.t           array(56)\n",
       "t9.fxns.export_water.m.faults.block: array(56)\n",
       "t9.time:                       array(56)\n",
       "t8.i.finished:                 array(56)\n",
       "t8.i.on:                       array(56)\n",
       "t8.r.probdens:                 array(56)\n",
       "t8.flows.ee_1.s.current:       array(56)\n",
       "t8.flows.ee_1.s.voltage:       array(56)\n",
       "t8.flows.sig_1.s.power:        array(56)\n",
       "t8.flows.wat_1.s.flowrate:     array(56)\n",
       "t8.flows.wat_1.s.pressure:     array(56)\n",
       "t8.flows.wat_1.s.area:         array(56)\n",
       "t8.flows.wat_1.s.level:        array(56)\n",
       "t8.flows.wat_2.s.flowrate:     array(56)\n",
       "t8.flows.wat_2.s.pressure:     array(56)\n",
       "t8.flows.wat_2.s.area:         array(56)\n",
       "t8.flows.wat_2.s.level:        array(56)\n",
       "t8.fxns.import_ee.s.effstate:  array(56)\n",
       "t8.fxns.import_ee.m.faults.no_v: array(56)\n",
       "t8.fxns.import_ee.m.faults.inf_v: array(56)\n",
       "t8.fxns.import_ee.r.s.effstate: array(56)\n",
       "t8.fxns.import_ee.r.s.grid_noise: array(56)\n",
       "t8.fxns.import_ee.r.probdens:  array(56)\n",
       "t8.fxns.import_water.m.faults.no_wat: array(56)\n",
       "t8.fxns.import_water.m.faults.less_wat: array(56)\n",
       "t8.fxns.import_signal.m.faults.no_sig: array(56)\n",
       "t8.fxns.import_signal.r.s.sig_noise: array(56)\n",
       "t8.fxns.import_signal.r.probdens: array(56)\n",
       "t8.fxns.move_water.i.over_pressure: array(56)\n",
       "t8.fxns.move_water.s.total_flow: array(56)\n",
       "t8.fxns.move_water.s.eff:      array(56)\n",
       "t8.fxns.move_water.m.faults.mech_break: array(56)\n",
       "t8.fxns.move_water.m.faults.short: array(56)\n",
       "t8.fxns.move_water.r.s.eff:    array(56)\n",
       "t8.fxns.move_water.r.probdens: array(56)\n",
       "t8.fxns.move_water.t           array(56)\n",
       "t8.fxns.move_water.t           array(56)\n",
       "t8.fxns.export_water.m.faults.block: array(56)\n",
       "t8.time:                       array(56)\n",
       "t3.i.finished:                 array(56)\n",
       "t3.i.on:                       array(56)\n",
       "t3.r.probdens:                 array(56)\n",
       "t3.flows.ee_1.s.current:       array(56)\n",
       "t3.flows.ee_1.s.voltage:       array(56)\n",
       "t3.flows.sig_1.s.power:        array(56)\n",
       "t3.flows.wat_1.s.flowrate:     array(56)\n",
       "t3.flows.wat_1.s.pressure:     array(56)\n",
       "t3.flows.wat_1.s.area:         array(56)\n",
       "t3.flows.wat_1.s.level:        array(56)\n",
       "t3.flows.wat_2.s.flowrate:     array(56)\n",
       "t3.flows.wat_2.s.pressure:     array(56)\n",
       "t3.flows.wat_2.s.area:         array(56)\n",
       "t3.flows.wat_2.s.level:        array(56)\n",
       "t3.fxns.import_ee.s.effstate:  array(56)\n",
       "t3.fxns.import_ee.m.faults.no_v: array(56)\n",
       "t3.fxns.import_ee.m.faults.inf_v: array(56)\n",
       "t3.fxns.import_ee.r.s.effstate: array(56)\n",
       "t3.fxns.import_ee.r.s.grid_noise: array(56)\n",
       "t3.fxns.import_ee.r.probdens:  array(56)\n",
       "t3.fxns.import_water.m.faults.no_wat: array(56)\n",
       "t3.fxns.import_water.m.faults.less_wat: array(56)\n",
       "t3.fxns.import_signal.m.faults.no_sig: array(56)\n",
       "t3.fxns.import_signal.r.s.sig_noise: array(56)\n",
       "t3.fxns.import_signal.r.probdens: array(56)\n",
       "t3.fxns.move_water.i.over_pressure: array(56)\n",
       "t3.fxns.move_water.s.total_flow: array(56)\n",
       "t3.fxns.move_water.s.eff:      array(56)\n",
       "t3.fxns.move_water.m.faults.mech_break: array(56)\n",
       "t3.fxns.move_water.m.faults.short: array(56)\n",
       "t3.fxns.move_water.r.s.eff:    array(56)\n",
       "t3.fxns.move_water.r.probdens: array(56)\n",
       "t3.fxns.move_water.t           array(56)\n",
       "t3.fxns.move_water.t           array(56)\n",
       "t3.fxns.export_water.m.faults.block: array(56)\n",
       "t3.time:                       array(56)\n",
       "t1.i.finished:                 array(56)\n",
       "t1.i.on:                       array(56)\n",
       "t1.r.probdens:                 array(56)\n",
       "t1.flows.ee_1.s.current:       array(56)\n",
       "t1.flows.ee_1.s.voltage:       array(56)\n",
       "t1.flows.sig_1.s.power:        array(56)\n",
       "t1.flows.wat_1.s.flowrate:     array(56)\n",
       "t1.flows.wat_1.s.pressure:     array(56)\n",
       "t1.flows.wat_1.s.area:         array(56)\n",
       "t1.flows.wat_1.s.level:        array(56)\n",
       "t1.flows.wat_2.s.flowrate:     array(56)\n",
       "t1.flows.wat_2.s.pressure:     array(56)\n",
       "t1.flows.wat_2.s.area:         array(56)\n",
       "t1.flows.wat_2.s.level:        array(56)\n",
       "t1.fxns.import_ee.s.effstate:  array(56)\n",
       "t1.fxns.import_ee.m.faults.no_v: array(56)\n",
       "t1.fxns.import_ee.m.faults.inf_v: array(56)\n",
       "t1.fxns.import_ee.r.s.effstate: array(56)\n",
       "t1.fxns.import_ee.r.s.grid_noise: array(56)\n",
       "t1.fxns.import_ee.r.probdens:  array(56)\n",
       "t1.fxns.import_water.m.faults.no_wat: array(56)\n",
       "t1.fxns.import_water.m.faults.less_wat: array(56)\n",
       "t1.fxns.import_signal.m.faults.no_sig: array(56)\n",
       "t1.fxns.import_signal.r.s.sig_noise: array(56)\n",
       "t1.fxns.import_signal.r.probdens: array(56)\n",
       "t1.fxns.move_water.i.over_pressure: array(56)\n",
       "t1.fxns.move_water.s.total_flow: array(56)\n",
       "t1.fxns.move_water.s.eff:      array(56)\n",
       "t1.fxns.move_water.m.faults.mech_break: array(56)\n",
       "t1.fxns.move_water.m.faults.short: array(56)\n",
       "t1.fxns.move_water.r.s.eff:    array(56)\n",
       "t1.fxns.move_water.r.probdens: array(56)\n",
       "t1.fxns.move_water.t           array(56)\n",
       "t1.fxns.move_water.t           array(56)\n",
       "t1.fxns.export_water.m.faults.block: array(56)\n",
       "t1.time:                       array(56)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "i=0\n",
    "mdlhists2 = Dict()\n",
    "for (result, r) in sol\n",
    "    AdaStress.replay!(mdp, result)\n",
    "    mdlhists2[i] = mdp.sim.sim.hist\n",
    "    i+=1\n",
    "end\n",
    "mdlhists2 = fmd.analyze.history.History(mdlhists2)\n",
    "mdlhists2 = mdlhists2.flatten()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "0d6c7d7d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "Figure(PyObject <Figure size 600x400 with 4 Axes>)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(Figure(PyObject <Figure size 600x400 with 4 Axes>), PyObject[PyObject <Axes: title={'center': 'fxns.move_water.s.eff'}, xlabel=' '>, PyObject <Axes: title={'center': 'fxns.move_water.s.total_flow'}, xlabel=' '>, PyObject <Axes: title={'center': 'flows.wat_2.s.flowrate'}, xlabel='time'>, PyObject <Axes: title={'center': 'flows.wat_2.s.pressure'}, xlabel='time'>])"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fig, axs = mdlhists2.plot_line(\"fxns.move_water.s.eff\", \"fxns.move_water.s.total_flow\",\n",
    "                    \"flows.wat_2.s.flowrate\", \"flows.wat_2.s.pressure\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "796eacc7",
   "metadata": {},
   "source": [
    "As we can see, MCTS finds more breakage faults (8 instead of 3), as a result of being a more informed search method."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dda77c6a",
   "metadata": {},
   "source": [
    "## Grey Box Methods\n",
    "\n",
    "As opposed to black box methods, which share no information about the system state with the agent, grey box methods let the agent sample the random distributions and pass disturbances to the model directly, rather than just passing seeds.\n",
    "\n",
    "Implementation is based off of: https://github.com/NASA-SW-VnV/AdaStress.jl/blob/master/examples/walk2d/walk2d.ipynb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "ead2f54c",
   "metadata": {},
   "outputs": [],
   "source": [
    "using AdaStress\n",
    "import AdaStress.GrayBox\n",
    "using Distributions\n",
    "using Random"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3064d55e",
   "metadata": {},
   "source": [
    "### Pump"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ba2b6a9",
   "metadata": {},
   "source": [
    "To use the gray box method, we have to first define which variables in the model to sample/update. fmdtools models have two types of random states:\n",
    "- general random states, which are updated in the behavioral method (whose distributions thus cannot be accessed without looking at the code)\n",
    "- auto-updating random states, which are updated from a given distribution defined with auto_update=(dist,params). These distributions can be accessed directly from the model.\n",
    "\n",
    "Both can be queried in AdaStress, but using different methods. In general, however, using a Gray Box method means that *all* stochastic behavior (desired by the analysis) should be represented in AdaStress/Julia, since integration relies on running the model as deterministic.\n",
    "\n",
    "Below are the random states of the model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "78389ef5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Dict{Any, Any} with 3 entries:\n",
       "  \"move_water\"    => Dict{Any, Any}(\"eff\"=>1.0)\n",
       "  \"import_signal\" => Dict{Any, Any}(\"sig_noise\"=>1.0)\n",
       "  \"import_ee\"     => Dict{Any, Any}(\"effstate\"=>1.0, \"grid_noise\"=>1.0)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rand_states = pump_model.get_rand_states()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7217502a",
   "metadata": {},
   "source": [
    "As well as the auto-updating random states:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "38cf8386",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Dict{Any, Any} with 1 entry:\n",
       "  \"move_water\" => Dict{Any, Any}(\"eff\"=>1.0)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rand_states = pump_model.get_rand_states(auto_update_only=true)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5e646ab",
   "metadata": {},
   "source": [
    "### Simulator\n",
    "The simulator is roughly the same as the simulation for the black box model except it has an `environment` which samples stochastic variables and then changes parameters in the model. Note that in this case `run_stochastic` is set to `false`, since the variables are being sampled in AdaStress itself (rather than the model)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "ff7af46e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "update! (generic function with 2 methods)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Base.@kwdef mutable struct Simulator <: AdaStress.GrayBox\n",
    "    sim::PyObject = DynamicProblem(pump_model)\n",
    "    env::AdaStress.Environment = AdaStress.Environment()\n",
    "end\n",
    "\n",
    "function initialize(sim::Simulator)\n",
    "    sim.env[:eff] = Normal(1.0, 0.2) #creating  \n",
    "    sim.sim=DynamicProblem(pump_model, run_stochastic=false)\n",
    "    return\n",
    "end\n",
    "\n",
    "function update!(sim::Simulator, value::AdaStress.EnvironmentValue)\n",
    "    #sim.mdl.set_values(\"MoveWater.eff\", value[:eff])\n",
    "    disturbances=Dict(\"move_water.s.eff\"=>value[:eff])\n",
    "    sim.sim.update(disturbances=disturbances)\n",
    "    return\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dde5af67",
   "metadata": {},
   "source": [
    "The isterminal and isevent functions will be the same as in the black box model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "1c045ee6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "isevent! (generic function with 2 methods)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function isterminal!(sim::Simulator)\n",
    "    has_faults = sim.sim.mdl.fxns[\"move_water\"].m.any_faults() # our external condition\n",
    "    terminal = sim.sim.check_sim_end(external_condition=has_faults)\n",
    "    return terminal\n",
    "end\n",
    "function isevent!(sim::Simulator)\n",
    "    faults = sim.sim.mdl.fxns[\"move_water\"].m.any_faults()\n",
    "    return faults\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7e67b888",
   "metadata": {},
   "source": [
    "The interface to adastress is set up below. Of note is the observation interface, which observes `eff` (which is also the action in this simple setup)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "1181b995",
   "metadata": {},
   "outputs": [],
   "source": [
    "Interface.reset!(sim::Simulator) = initialize(sim)\n",
    "\n",
    "Interface.environment(sim::Simulator) = sim.env\n",
    "\n",
    "Interface.observe(sim::Simulator) = vcat(sim.sim.mdl.flows.wat_2.pressure, sim.sim.t / sim.sim.t_max)\n",
    "\n",
    "Interface.step!(sim::Simulator, value::AdaStress.EnvironmentValue) = update!(sim, value)\n",
    "\n",
    "Interface.isterminal(sim::Simulator) = isterminal!(sim)\n",
    "\n",
    "Interface.isevent(sim::Simulator) = isevent!(sim)\n",
    "\n",
    "Interface.distance(sim::Simulator) = float(sum([(16-max(min(i,16), 0))^2 for i in sim.sim.log[\"flows.wat_1.s.pressure\"]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "0d4dfab8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "mdp_env (generic function with 1 method)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function mdp_env(; kwargs...)\n",
    "    mdp = Interface.ASTMDP(Simulator(; kwargs...))\n",
    "    mdp.rewaan.event_bonus = 2000.0\n",
    "    return mdp\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29c4f6d5",
   "metadata": {},
   "source": [
    "Now using the gray box mdp solver:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "0b1cf116",
   "metadata": {},
   "outputs": [],
   "source": [
    "# AdaStress.enable(\"SoftActorCritic\")\n",
    "# using AdaStress.SoftActorCritic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "21a23704",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Random.seed!(0)\n",
    "# sac = SAC(;\n",
    "#     obs_dim=2, \n",
    "#     act_dim=1,\n",
    "#     gamma=0.95,\n",
    "#     act_mins=-1*ones(1),    #number of standard deviations\n",
    "#     act_maxs=10*ones(1),\n",
    "#     hidden_sizes=[30,30,30],\n",
    "#     num_q=2,\n",
    "#     max_buffer_size=1000000,\n",
    "#     batch_size=128,\n",
    "#     epochs=100,\n",
    "#     update_after=0,\n",
    "#     update_every=1,\n",
    "#     steps_per_epoch=54,\n",
    "#     start_steps=100,\n",
    "#     max_ep_len=54,\n",
    "#     num_test_episodes=100,\n",
    "#     displays=[(:fails, mdp -> mdp.sim.sim.mdl.fxns[\"MoveWater\"].has_fault(\"mech_break\") )],\n",
    "#     use_gpu=false\n",
    "# )\n",
    "\n",
    "# SoftActorCritic.ProgressMeter.ijulia_behavior(:clear)\n",
    "# ac, info = sac(mdp_env)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "7a0eaa77",
   "metadata": {},
   "outputs": [],
   "source": [
    "# using PyPlot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "b172aadf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# plt.plot(info[\"fails\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "64fc9be8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# plt.plot(info[\"score\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "9eebffd7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ac"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "85d90481",
   "metadata": {},
   "outputs": [],
   "source": [
    "# i=0\n",
    "# mdlhists3 = Dict()\n",
    "# mdp = mdp_env()\n",
    "# for i in 1:100\n",
    "#     a= AdaStress.replay!(mdp, ac)\n",
    "#     mdlhists3[i] = mdp.sim.sim.hist\n",
    "#     i+=1\n",
    "# end\n",
    "# mdlhists3 = fmd.analyze.history.History(mdlhists3)\n",
    "# mdlhists3 = mdlhists3.flatten()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "d69724e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# a= AdaStress.replay!(mdp, ac)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "5bd8ddcb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "009b78fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# mdlhists3.plot_line(\"fxns.move_water.s.eff\", \"fxns.move_water.s.total_flow\",\n",
    "#                     \"flows.wat_2.s.flowrate\", \"flows.wat_2.s.pressure\", aggregation=\"percentile\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e220ae47",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Julia 1.10.0",
   "language": "julia",
   "name": "julia-1.10"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "1.10.0"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
