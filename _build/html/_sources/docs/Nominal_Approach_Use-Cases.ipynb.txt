{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Defining Nominal Approaches in fmdtools\n",
    "\n",
    "Nominal simulation approaches are used to evaluate the performance of a model over a set of input parameters. It can then be used to:\n",
    "- define/understand the operational envelope for different system parameters (i.e., what inputs can the system safely encounter)\n",
    "- quantify failure probabilities given stochastic inputs (i.e., if the statistical distribution of inputs are known, what is the resulting probability of hazards given the design)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys, os\n",
    "sys.path.insert(1,os.path.join(\"..\"))\n",
    "\n",
    "from fmdtools.modeldef import Model, FxnBlock\n",
    "import fmdtools.resultdisp as rd\n",
    "import fmdtools.faultsim.propagate as prop"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following rover model will be used to demonstrate this approach. The main task of the rover is to follow a given lane from a starting location to an ending location."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can view the ability of the rover to track a given line with the following function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "def plot_map(mdl, mdlhist):\n",
    "    fig = plt.figure()\n",
    "    ax = fig.add_subplot(111)\n",
    "    x_ground = mdlhist['flows']['Ground']['x']\n",
    "    y_ground = mdlhist['flows']['Ground']['liney']\n",
    "    plt.plot(x_ground,y_ground, label=\"Centerline\")\n",
    "    \n",
    "    x_rover = mdlhist['flows']['Ground']['x']\n",
    "    y_rover = mdlhist['flows']['Ground']['y']\n",
    "    plt.plot(x_rover,y_rover, label = \"Rover\")\n",
    "    \n",
    "    plt.scatter(mdl.params['end'][0],mdl.params['end'][1], label=\"End Location\")\n",
    "    plt.scatter(mdlhist['flows']['Ground']['x'][-1],mdlhist['flows']['Ground']['y'][-1], label=\"Final Position\")\n",
    "    \n",
    "    plt.scatter(0,0, label=\"Start Location\")\n",
    "\n",
    "    plt.xlabel(\"x-distance (meters)\")\n",
    "    plt.ylabel(\"y-distance (meters)\")\n",
    "    plt.title(\"Rover Centerline Tracking\")\n",
    "    plt.grid()\n",
    "\n",
    "    plt.legend()\n",
    "    \n",
    "    fig = plt.figure()\n",
    "    if mdl.params['linetype']=='sine':\n",
    "        y_line = [sin_func(x,y_rover[i], mdl.params['amp'], mdl.params['period'])[1] for i,x in enumerate(x_rover)]\n",
    "    elif mdl.params['linetype']=='turn':\n",
    "        y_line = [turn_func(x,y_rover[i], mdl.params['radius'], mdl.params['start'])[1] for i,x in enumerate(x_rover)]\n",
    "        \n",
    "    plt.plot(x_rover, y_rover-y_line)\n",
    "    plt.xlabel(\"x-distance (meters)\")\n",
    "    plt.ylabel(\"y-error (meters)\")\n",
    "    plt.title(\"Rover Centerline Error\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Additionally, this model has a corresponding *parameter generation* function which generates the design parameters (`params`) of the model given a reduced space of input parameters. This is the set use-case because often the *explored* set of variables is smaller than the full set. Parameter generation functions are specified in the form `method(staticargs, rangearg1=x, rangearg2=y)`, where staticargs are arguments used to define discrete cases and rangeargs are arguments used to define corresponding varied parameters. \n",
    "\n",
    "In this case, the static cases are 'sine' or 'turn', the type of curve being generated in the function, with the corresponding range parameters of `amplitude` and `period` (of the wave used to generate the lane), and `radius` (of the turn) and `start` (distance before/after the curve starts/ends), respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gen_params(linetype, **kwargs):\n",
    "    if linetype == 'sine':\n",
    "        amp = kwargs.pop('amp',0.2)\n",
    "        wavelength=kwargs.pop('wavelength', 50.0)\n",
    "        period = 2*np.pi/wavelength\n",
    "        initangle = sin_angle_func(0.0, amp, period)\n",
    "        lineparams = {'linetype':linetype, 'amp':amp, 'period':period, 'initangle':initangle, 'end':[wavelength,0.0]}\n",
    "    elif linetype == 'turn':\n",
    "        radius = kwargs.pop('radius',20.0)\n",
    "        start = kwargs.pop('start', 20.0)\n",
    "        lineparams = {'linetype':linetype, 'radius':radius, 'start':start, 'initangle':0.0, 'end':[radius+start,radius+start]}\n",
    "    return lineparams"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below is the rest of the model setup:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "class Avionics(FxnBlock):\n",
    "    def __init__(self,name, flows, params):\n",
    "        self.add_params(params)\n",
    "        super().__init__(name, flows, flownames={'AvionicsControl':'Control'})\n",
    "        self.assoc_modes({'no_con':[1e-4, 200]}, ['drive','standby'], initmode='standby')\n",
    "    def dynamic_behavior(self,time):\n",
    "        if not self.in_mode('no_con'):\n",
    "            if time == 5: self.set_mode('drive')\n",
    "            if time == 50 or in_area(self.end[0],self.end[1],1,self.Pos_Signal.x,self.Pos_Signal.y): \n",
    "                self.set_mode('standby')\n",
    "                self.Control.completed=1\n",
    "            \n",
    "        if self.in_mode('drive'):\n",
    "            self.Pos_Signal.assign(self.Video, 'angle', 'linex', 'liney')\n",
    "            self.Pos_Signal.heading = self.Ground.ang \n",
    "            self.Pos_Signal.assign(self.Ground, 'x', 'y', 'vel')\n",
    "            \n",
    "            if in_area(self.end[0],self.end[1],1,self.Pos_Signal.x,self.Pos_Signal.y):\n",
    "                self.set_mode('standby')\n",
    "            elif self.Video.quality==0: self.set_mode('standby')\n",
    "            else:\n",
    "                ycorrection= np.arctan((self.Pos_Signal.y-self.Pos_Signal.liney)/(self.Pos_Signal.vel*np.cos(np.pi/180 * self.Pos_Signal.heading)+0.001))\n",
    "                xcorrection= np.arctan((self.Pos_Signal.x-self.Pos_Signal.linex)/(self.Pos_Signal.vel*np.sin(np.pi/180 * self.Pos_Signal.heading)+0.001))\n",
    "                rdiff = (self.Pos_Signal.angle - self.Pos_Signal.heading -5*(xcorrection+ycorrection))/180\n",
    "                self.Control.put(rpower = 1+rdiff, lpower = 1-rdiff)\n",
    "                self.Control.limit(rpower=(-1,2), lpower=(-1,2))  \n",
    "        if self.in_mode('standby'):   self.Control.put(rpower = 0, lpower = 0)\n",
    "\n",
    "class Drive(FxnBlock):\n",
    "    def __init__(self,name, flows):\n",
    "        super().__init__(name, flows, flownames={\"EE_15\":\"EE_in\"})\n",
    "        self.assoc_modes({\"mech_loss\", \"elec_open\"})\n",
    "    def dynamic_behavior(self, time):\n",
    "        rpower = self.EE_in.v*self.MotorControl.rpower*self.no_fault(\"elec_open\")/15\n",
    "        lpower = self.EE_in.v*self.MotorControl.lpower*self.no_fault(\"elec_open\")/15\n",
    "        self.EE_in.a = (lpower + rpower)/12\n",
    "        if (lpower + rpower) >100: self.add_fault(\"elec_open\")\n",
    "        else:\n",
    "            self.Ground.vel= rpower + lpower\n",
    "            self.Ground.inc(ang = 180*(rpower-lpower)/(rpower+lpower +0.001))\n",
    "            self.Ground.inc(x = np.cos(np.pi/180 *self.Ground.ang) * self.Ground.vel, \\\n",
    "                            y = np.sin(np.pi/180 *self.Ground.ang) * self.Ground.vel)\n",
    "\n",
    "class Perception(FxnBlock):\n",
    "    def __init__(self, name, flows):\n",
    "        self.set_atts(rad=1)\n",
    "        super().__init__(name, flows, flownames={'EE_12':'EE'})\n",
    "        self.assoc_modes({}, ['off', 'feed'], initmode='off')\n",
    "    def dynamic_behavior(self,time):\n",
    "        if self.in_mode('off'):\n",
    "            self.EE.a=0\n",
    "            self.Video.put(linex = 0,liney=0, angle = 0, quality = 0)\n",
    "            if self.EE.v ==12: self.set_mode(\"feed\")\n",
    "        elif self.in_mode(\"feed\"):\n",
    "            if self.EE.v > 8:\n",
    "                if in_area(self.Ground.x, self.Ground.liney, self.rad, self.Ground.x, self.Ground.y):\n",
    "                    self.Video.assign(self.Ground, 'linex','liney', 'angle')\n",
    "                    self.Video.quality = 1\n",
    "                else:\n",
    "                    self.Video.quality=0\n",
    "            elif self.EE.v == 0: self.set_mode(\"off\")\n",
    "            else: self.Video.quality = 0\n",
    "\n",
    "def in_area(x,y,rad,xc,yc):\n",
    "    dist = np.sqrt((x-xc)**2+(y-yc)**2)\n",
    "    return not dist > rad\n",
    "    \n",
    "\n",
    "class Power(FxnBlock):\n",
    "    def __init__(self, name, flows):\n",
    "        super().__init__(name,flows, states={\"charge\": 100.0, 'power':0.0})\n",
    "        self.assoc_modes({\"no_charge\":[1e-5, {'off':1.0}, 100],\"open_circ\":[1e-5, {'supply':1.0}, 100]}, [\"supply\",\"charge\",\"standby\",\"off\"], initmode=\"off\", exclusive = True, key_phases_by='self')\n",
    "    def static_behavior(self,time):\n",
    "        if self.in_mode(\"off\"):     \n",
    "            self.EE_5.put(v=0,a=0); self.EE_12.put(v=0,a=0);self.EE_15.put(v=0,a=0)\n",
    "            if self.Control.power==1 and self.AvionicsControl.completed==0:   self.set_mode(\"supply\")\n",
    "        elif self.in_mode(\"supply\"):\n",
    "            if self.charge > 0:         self.EE_5.v = 5; self.EE_12.v = 12; self.EE_15.v = 15; \n",
    "            else:                       self.set_mode(\"no_charge\")\n",
    "            if self.Control.power==0:   self.set_mode(\"off\")\n",
    "            elif self.AvionicsControl.completed==1: self.set_mode(\"off\")\n",
    "        elif self.in_mode(\"no_charge\",\"open_circ\"): self.EE_5.v = 0; self.EE_12.v = 0; self.EE_15.v = 0; \n",
    "        if self.in_mode(\"charge\"):\n",
    "            self.power = - 1\n",
    "            if self.charge==100:self.set_mode(\"off\")\n",
    "        else:\n",
    "            self.power=1+self.EE_12.mul('v','a')+self.EE_5.mul('v','a')+self.EE_15.mul('v','a')\n",
    "    def dynamic_behavior(self,time):\n",
    "        self.inc(charge = - self.power/100)\n",
    "        self.limit(charge=(0,100))\n",
    "\n",
    "class Override(FxnBlock):\n",
    "    def __init__(self,name,flows):\n",
    "        super().__init__(name,flows, flownames={'EE_5':'EE'})\n",
    "        self.assoc_modes({}, ['off','standby','override'], initmode = 'off')\n",
    "    def dynamic_behavior(self,time):\n",
    "        if self.in_mode('off'):\n",
    "            self.EE.a=0\n",
    "            if self.EE.v==5: self.set_mode('standby')\n",
    "        elif self.in_mode('standby'):\n",
    "            self.MotorControl.assign(self.AvionicsControl, 'rpower','lpower')\n",
    "            if self.OverrideComms =='active' and self.EE.v>4: self.set_mode('override')\n",
    "        elif self.in_mode('override'):\n",
    "            self.MotorControl.assign(self.OverrideComms, 'rpower', 'lpower')\n",
    "   \n",
    "class Communications(FxnBlock):\n",
    "    def __init__(self, name, flows):\n",
    "        super().__init__(name,flows)\n",
    "    def dynamic_behavior(self,time):\n",
    "        if self.EE_12.v == 12:\n",
    "            self.EE_12.a=1\n",
    "            self.Comms.assign(self.Pos_Signal, 'x', 'y', 'vel', 'heading')\n",
    "        else:   self.Comms.put(x=0, y=0, vel=0, heading=0)\n",
    "\n",
    "class Operator(FxnBlock):\n",
    "    def __init__(self, name, flows):\n",
    "        super().__init__(name,flows)\n",
    "    def dynamic_behavior(self, t):\n",
    "        if t==3:    self.Control.power=1\n",
    "        elif t==55: self.Control.power=0\n",
    "\n",
    "class Environment(FxnBlock):\n",
    "    def __init__(self, name, flows,params):\n",
    "        self.add_params(params)\n",
    "        super().__init__(name,flows)\n",
    "    def dynamic_behavior(self, t):\n",
    "        if self.linetype=='sine':\n",
    "            self.Ground.angle = sin_angle_func(self.Ground.x, self.amp, self.period)\n",
    "            self.Ground.linex,self.Ground.liney = sin_func(self.Ground.x,self.Ground.y, self.amp, self.period)\n",
    "        elif self.linetype=='turn':\n",
    "            self.Ground.angle = turn_angle_func(self.Ground.x, self.radius, self.start)\n",
    "            self.Ground.linex, self.Ground.liney = turn_func(self.Ground.x, self.Ground.y, self.radius, self.start)\n",
    "\n",
    "def sin_func(x,y, amp, period):\n",
    "    return x, amp * np.sin(period*x)\n",
    "def sin_angle_func(x, amp, period):\n",
    "    return amp * period * np.cos(period*x)*180/np.pi\n",
    "\n",
    "def turn_func(x,y, radius,start):\n",
    "    if   x >= start+radius: return start+radius, y\n",
    "    elif y >= radius:       return start+radius, y\n",
    "    elif x >= start:        return x, radius - np.sqrt(radius**2 - (x-start)**2)\n",
    "    elif x < start:         return x, 0.0\n",
    "def turn_angle_func(x, radius, start):\n",
    "    if   x >= start+radius: return 90.0\n",
    "    elif x >= start:        return 90.0 - np.arccos(((x-start)/radius))*180/np.pi  #np.arctan((x-start)/(radius**2-(start-x)**2))*180/np.pi\n",
    "    elif x<start:           return 0.0\n",
    "\n",
    "class Rover(Model):\n",
    "    def __init__(self, params=gen_params('turn'),\\\n",
    "                 modelparams={'times':[0,60], 'tstep':1, 'phases':{'start':[1,30], 'end':[31, 60]}},\\\n",
    "                     valparams={}):\n",
    "        super().__init__(params, modelparams, valparams)\n",
    "        \n",
    "        self.add_flow('Ground', {'x':0.0,'y':0.0,'liney':0.0,'linex':0.0, 'vel':0.0, 'line':0.0, 'angle':params['initangle'], 'ang':0.0})\n",
    "        self.add_flow('Pos_Signal', {'x':0.0,'y':0.0,'liney':0.0,'linex':0.0, 'heading':0.0, 'vel':0.0, 'line':0, 'angle':0.0})\n",
    "        self.add_flow('EE_12', {'v':0.0, 'a':0.0})\n",
    "        self.add_flow('EE_5', {'v':0.0, 'a':0.0})\n",
    "        self.add_flow('EE_15', {'v':0.0, 'a':0.0})\n",
    "        self.add_flow('Video', {'liney':0.0,'linex':0.0, 'angle':params['initangle'], 'quality':1})\n",
    "        self.add_flow('AvionicsControl', {'rpower':0.0, 'lpower':0.0, 'completed':0})\n",
    "        self.add_flow('MotorControl', {'rpower':0.0, 'lpower':0.0})\n",
    "        self.add_flow('Control', {'power':0.0})\n",
    "        self.add_flow('Comms', {'x':0.0,'y':0.0, 'vel':0.0, 'heading':0.0})\n",
    "        self.add_flow('OverrideComms', {'rpower':0.0, 'lpower':0.0, 'active':0} ) \n",
    "        #self.add_flow('Example_Disconnect')\n",
    "        \n",
    "        self.add_fxn(\"Power\", [\"EE_15\",\"EE_5\",'EE_12', \"Control\", \"AvionicsControl\"], Power)\n",
    "        self.add_fxn(\"Operator\", [\"Comms\", \"OverrideComms\", \"Pos_Signal\", \"Control\"], Operator)\n",
    "        self.add_fxn(\"Communications\", [\"Comms\", \"EE_12\", 'Pos_Signal'], Communications)\n",
    "        self.add_fxn(\"Perception\", [\"Ground\", \"EE_12\", \"Video\"], Perception)\n",
    "        self.add_fxn(\"Avionics\",[\"Video\",\"Comms\", \"EE_5\",'Pos_Signal',\"Ground\", \"AvionicsControl\"], fclass=Avionics, fparams=params)\n",
    "        self.add_fxn(\"Override\", [\"OverrideComms\", \"EE_5\", 'MotorControl','AvionicsControl'], Override)\n",
    "        self.add_fxn(\"Drive\", [\"Ground\",\"EE_15\",\"EE_5\", \"MotorControl\"], fclass = Drive)\n",
    "        self.add_fxn(\"Environment\", ['Ground'], Environment, fparams = params)\n",
    "        \n",
    "        pos_bip = {'Power': [-0.684772948203272, -0.2551613615446115],\n",
    "                 'Operator': [-0.798933011500376, 0.565156755693186],\n",
    "                 'Communications': [-0.5566050878414673, 0.14159180700630447],\n",
    "                 'Perception': [0.996672509613648, 0.2507215448302319],\n",
    "                 'Avionics': [0.28027473355741117, 0.47255264233968597],\n",
    "                 'Override': [0.28987624783062627, -0.17144760874154652],\n",
    "                 'Drive': [0.6671719569482308, -0.571646956655247],\n",
    "                 'Environment': [1.1329643169383754, -0.6375225566564033],\n",
    "                 'Ground': [1.108432946123935, -0.3228541151507237],\n",
    "                 'Pos_Signal': [-0.256557435572734, 0.5411037985681082],\n",
    "                 'EE_12': [-0.3676879520509888, -0.04754907961317867],\n",
    "                 'EE_5': [-0.2181352416728437, -0.2015320865756482],\n",
    "                 'EE_15': [-0.5352906801304353, -0.5288715575154177],\n",
    "                 'Video': [0.6726175830840695, 0.396008366729458],\n",
    "                 'AvionicsControl': [0.45997843863482324, 0.04522869632581994],\n",
    "                 'MotorControl': [0.6350063940085445, -0.3013633829278297],\n",
    "                 'Control': [-0.9857988678463686, 0.07960895587242012],\n",
    "                 'Comms': [-0.642370284813957, 0.35285736707043763],\n",
    "                 'OverrideComms': [-0.14607433032593392, 0.2981956996230818]}\n",
    "        \n",
    "        self.build_model(bipartite_pos = pos_bip)\n",
    "    def find_classification(self,scen,mdlhist):\n",
    "        modes, modeproperties = self.return_faultmodes()\n",
    "        classification = str()\n",
    "        if not in_area(self.flows['Ground'].x,self.flows['Ground'].y,1,self.params['end'][0],self.params['end'][1]):\n",
    "                                classification = \"incomplete mission\"; cost=500\n",
    "        if not classification:  classification = 'nominal mission'; cost=0\n",
    "        if any(modes):          classification = classification +' faulty'; cost+=100\n",
    "        return {'rate':0,'cost':cost, 'prob':scen['properties'].get('prob',1), 'expected cost':scen['properties'].get('prob',1)*cost, 'faults':modes, 'classification':classification}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below shows the performance of the rover during a (default) turn with a radius of 20 meters that begins at 20 meters. As shown, there is a significant amount of drift, but not enough for the rover to get lost (that would take 1 meter of drift)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "mdl = Rover(params=gen_params('turn'))\n",
    "results, mdlhist = prop.nominal(mdl)\n",
    "plot_map(mdl, mdlhist)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below shows the performance of the model over a sine wave. As shown, the drift is much smaller because the turns are much less pronounced (a movement of 0.2 meters over 25 meters). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "mdl = Rover(params=gen_params('sine'))\n",
    "results, mdlhist = prop.nominal(mdl)\n",
    "plot_map(mdl, mdlhist)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The performance of the rover in these situations is dependent on the parameters of the situation (e.g., the radius of the curve and the amplitude of the sine wave). Thus, it is important to define the operational envelope for the system. This can be done using a `NominalApproach`, which can be used to define ranges of variables to simulate the system under."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from fmdtools.modeldef import NominalApproach"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on class NominalApproach in module fmdtools.modeldef:\n",
      "\n",
      "class NominalApproach(builtins.object)\n",
      " |  Class for defining sets of nominal simulations. To explain, a given system \n",
      " |  may have a number of input situations (missions, terrain, etc) which the \n",
      " |  user may want to simulate to ensure the system operates as desired. This \n",
      " |  class (in conjunction with propagate.nominal_approach()) can be used to \n",
      " |  perform these simulations.\n",
      " |  \n",
      " |  Attributes\n",
      " |  ----------\n",
      " |  scenarios : dict\n",
      " |      scenarios to inject based on the approach\n",
      " |  num_scenarios : int\n",
      " |      number of scenarios in the approach\n",
      " |  ranges : dict\n",
      " |      dict of the parameters defined in each method for the approach\n",
      " |  \n",
      " |  Methods defined here:\n",
      " |  \n",
      " |  __init__(self)\n",
      " |      Instantiates NominalApproach (simulation params are defined using methods)\n",
      " |  \n",
      " |  __repr__(self)\n",
      " |      Return repr(self).\n",
      " |  \n",
      " |  add_param_ranges(self, paramfunc, rangeid, *args, replicates=1, seeds='shared', set_args={}, **kwargs)\n",
      " |      Adds a set of scenarios to the approach.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      paramfunc : method\n",
      " |          Python method which generates a set of model parameters given the input arguments.\n",
      " |          method should have form: method(fixedarg, fixedarg..., inputarg=X, inputarg=X)\n",
      " |      rangeid : str\n",
      " |          Name for the range being used. Default is 'nominal'\n",
      " |      *args: specifies values for positional args of paramfunc.\n",
      " |          May be given as a fixed float/int/dict/str defining a set value for positional arguments\n",
      " |      replicates : int\n",
      " |          Number of points to take over each range (for random parameters). Default is 1.\n",
      " |      seeds : str/list\n",
      " |          Options for seeding models/replicates: (Default is 'shared')\n",
      " |              - 'shared' creates random seeds and shares them between parameters and models\n",
      " |              - 'independent' creates separate random seeds for models and parameter generation\n",
      " |              - 'keep_model' uses the seed provided in the model for all of the model\n",
      " |          When a list is provided, these seeds are are used (and shared). Must be of length replicates.\n",
      " |      set_args : dict\n",
      " |          Dictionary of lists of values for each param e.g., {'param1':[value1, value2, value3]}\n",
      " |      **kwargs : specifies range for keyword args of paramfunc\n",
      " |          May be given as a fixed float/int/dict/str (k=value) defining a set value for the range (if not the default) or\n",
      " |          as a tuple k=(start, end, step) for the range, or\n",
      " |  \n",
      " |  add_param_replicates(self, paramfunc, rangeid, replicates, *args, ind_seeds=True, **kwargs)\n",
      " |      Adds a set of repeated scenarios to the approach. For use in (external) random scenario generation.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      paramfunc : method\n",
      " |          Python method which generates a set of model parameters given the input arguments.\n",
      " |          method should have form: method(fixedarg, fixedarg..., inputarg=X, inputarg=X)\n",
      " |      rangeid : str\n",
      " |          Name for the set of replicates\n",
      " |      replicates : int\n",
      " |          Number of replicates to use\n",
      " |      *args : any\n",
      " |          arguments to send to paramfunc\n",
      " |      ind_seeds : Bool/list\n",
      " |          Whether the models should be run with different seeds (rather than the same seed). Default is True\n",
      " |          When a list is provided, these seeds are are used. Must be of length replicates.\n",
      " |      **kwargs : any\n",
      " |          keyword arguments to send to paramfunc\n",
      " |  \n",
      " |  add_rand_params(self, paramfunc, rangeid, *fixedargs, prob_weight=1.0, replicates=1000, seeds='shared', **randvars)\n",
      " |      Adds a set of random scenarios to the approach.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      paramfunc : method\n",
      " |          Python method which generates a set of model parameters given the input arguments.\n",
      " |          method should have form: method(fixedarg, fixedarg..., inputarg=X, inputarg=X)\n",
      " |      rangeid : str\n",
      " |          Name for the range being used. Default is 'nominal'\n",
      " |      prob_weight : float (0-1)\n",
      " |          Overall probability for the set of scenarios (to use if adding more ranges). Default is 1.0\n",
      " |      *fixedargs : any\n",
      " |          Fixed positional arguments in the parameter generator function. \n",
      " |          Useful for discrete modes with different parameters.\n",
      " |      seeds : str/list\n",
      " |          Options for seeding models/replicates: (Default is 'shared')\n",
      " |              - 'shared' creates random seeds and shares them between parameters and models\n",
      " |              - 'independent' creates separate random seeds for models and parameter generation\n",
      " |              - 'keep_model' uses the seed provided in the model for all of the model\n",
      " |          When a list is provided, these seeds are are used (and shared). Must be of length replicates.\n",
      " |      **randvars : key=tuple\n",
      " |          Specification for each random input parameter, specified as \n",
      " |          input = (randfunc, param1, param2...)\n",
      " |          where randfunc is the method producing random outputs (e.g. numpy.random.rand)\n",
      " |          and the successive parameters param1, param2, etc are inputs to the method\n",
      " |  \n",
      " |  add_seed_replicates(self, rangeid, seeds)\n",
      " |      Generates an approach with different seeds to use for the model's internal stochastic behaviors\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      rangeid : str\n",
      " |          Name for the set of replicates\n",
      " |      seeds : int/list\n",
      " |          Number of seeds (if an int) or a list of seeds to use.\n",
      " |  \n",
      " |  assoc_probs(self, rangeid, prob_weight=1.0, **inputpdfs)\n",
      " |      Associates a probability model (assuming variable independence) with a \n",
      " |      given previously-defined range of scenarios using given pdfs\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      rangeid : str\n",
      " |          Name of the range to apply the probability model to.\n",
      " |      prob_weight : float, optional\n",
      " |          Overall probability for the set of scenarios (to use if adding more ranges \n",
      " |          or if the range does not cover the space of probability). The default is 1.0.\n",
      " |      **inputpdfs : key=(pdf, params)\n",
      " |          pdf to associate with the different variables of the model. \n",
      " |          Where the pdf has form pdf(x, **kwargs) where x is the location and **kwargs is parameters\n",
      " |          (for example, scipy.stats.norm.pdf)\n",
      " |          and params is a dictionary of parameters (e.g., {'mu':1,'std':1}) to use '\n",
      " |          as the key/parameter inputs to the pdf\n",
      " |  \n",
      " |  change_params(self, rangeid='all', **kwargs)\n",
      " |      Changes a given parameter across all scenarios. Modifies 'params' (rather than regenerating params from the paramfunc).\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      rangeid : str\n",
      " |          Name of the range to modify. Optional. Defaults to \"all\"\n",
      " |      **kwargs : any\n",
      " |          Parameters to change stated as paramname=value or \n",
      " |          as a dict paramname={'sub_param':value}, where 'sub_param' is the parameter of the dictionary with name paramname to update\n",
      " |  \n",
      " |  copy(self)\n",
      " |      Copies the given sampleapproach. Used in nested scenario sampling.\n",
      " |  \n",
      " |  get_param_scens(self, rangeid, *level_params)\n",
      " |      Returns the scenarios of a range associated with given parameter ranges\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      rangeid : str\n",
      " |          Range id to check\n",
      " |      level_params : str (multiple)\n",
      " |          Level parameters iterate over\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      param_scens : dict\n",
      " |          The scenarios associated with each level of parameter (or joint parameters)\n",
      " |  \n",
      " |  range_to_space(self, inputranges)\n",
      " |  \n",
      " |  update_factor_seeds(self, rangeid, inputparam, seeds='new')\n",
      " |      Changes/randomizes the seeds along a given factor in a range\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      rangeid : str\n",
      " |          Name of the range being updated\n",
      " |      inputparam : str\n",
      " |          Name of the parameter to vary the seeds over\n",
      " |      seeds : str/list, optional\n",
      " |          List of seeds to update to. The default is 'new', which picks them randomly\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data descriptors defined here:\n",
      " |  \n",
      " |  __dict__\n",
      " |      dictionary for instance variables (if defined)\n",
      " |  \n",
      " |  __weakref__\n",
      " |      list of weak references to the object (if defined)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(NominalApproach)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this approach we define parameter ranges for the two major situations--a wavelength and amplitude for the sine wave, and a radius and start location for the turn.\n",
    "\n",
    "Defining an approach in terms of ranges is performed with `.add_param_ranges()`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on method add_param_ranges in module fmdtools.modeldef:\n",
      "\n",
      "add_param_ranges(paramfunc, rangeid, *args, replicates=1, seeds='shared', set_args={}, **kwargs) method of fmdtools.modeldef.NominalApproach instance\n",
      "    Adds a set of scenarios to the approach.\n",
      "    \n",
      "    Parameters\n",
      "    ----------\n",
      "    paramfunc : method\n",
      "        Python method which generates a set of model parameters given the input arguments.\n",
      "        method should have form: method(fixedarg, fixedarg..., inputarg=X, inputarg=X)\n",
      "    rangeid : str\n",
      "        Name for the range being used. Default is 'nominal'\n",
      "    *args: specifies values for positional args of paramfunc.\n",
      "        May be given as a fixed float/int/dict/str defining a set value for positional arguments\n",
      "    replicates : int\n",
      "        Number of points to take over each range (for random parameters). Default is 1.\n",
      "    seeds : str/list\n",
      "        Options for seeding models/replicates: (Default is 'shared')\n",
      "            - 'shared' creates random seeds and shares them between parameters and models\n",
      "            - 'independent' creates separate random seeds for models and parameter generation\n",
      "            - 'keep_model' uses the seed provided in the model for all of the model\n",
      "        When a list is provided, these seeds are are used (and shared). Must be of length replicates.\n",
      "    set_args : dict\n",
      "        Dictionary of lists of values for each param e.g., {'param1':[value1, value2, value3]}\n",
      "    **kwargs : specifies range for keyword args of paramfunc\n",
      "        May be given as a fixed float/int/dict/str (k=value) defining a set value for the range (if not the default) or\n",
      "        as a tuple k=(start, end, step) for the range, or\n",
      "\n"
     ]
    }
   ],
   "source": [
    "nomapp = NominalApproach()\n",
    "help(nomapp.add_param_ranges)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "nomapp.add_param_ranges(gen_params,'sine','sine', amp=(0, 10, 0.2), wavelength=(10,50,10))\n",
    "nomapp.add_param_ranges(gen_params,'turn','turn', radius=(5,40,5), start=(0, 20,5))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that `gen_params` is the handle of the method defined earlier to generate the nominal parameters of the model, `sine` is a fixed parameter defining a discrete case of scenarios, and `amp` and `wavelenth` are parameters that are varied (the given tuples define the respective ranges).\n",
    "\n",
    "The result is a defined set of scenarios which can be run in the model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'sine_1': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_1',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 0.0,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 0.0,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 0.0, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_2': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_2',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 0.0,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 0.0,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 0.0, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_3': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_3',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 0.0,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 0.0,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 0.0, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_4': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_4',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 0.0,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 0.0,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 0.0, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_5': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_5',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 0.2,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 7.200000000000001,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 0.2, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_6': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_6',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 0.2,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 3.6000000000000005,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 0.2, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_7': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_7',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 0.2,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 2.4000000000000004,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 0.2, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_8': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_8',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 0.2,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 1.8000000000000003,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 0.2, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_9': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_9',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 0.4,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 14.400000000000002,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 0.4, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_10': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_10',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 0.4,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 7.200000000000001,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 0.4, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_11': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_11',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 0.4,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 4.800000000000001,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 0.4, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_12': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_12',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 0.4,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 3.6000000000000005,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 0.4, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_13': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_13',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 0.6000000000000001,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 21.6,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 0.6000000000000001, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_14': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_14',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 0.6000000000000001,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 10.8,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 0.6000000000000001, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_15': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_15',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 0.6000000000000001,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 7.200000000000001,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 0.6000000000000001, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_16': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_16',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 0.6000000000000001,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 5.4,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 0.6000000000000001, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_17': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_17',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 0.8,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 28.800000000000004,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 0.8, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_18': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_18',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 0.8,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 14.400000000000002,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 0.8, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_19': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_19',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 0.8,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 9.600000000000001,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 0.8, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_20': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_20',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 0.8,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 7.200000000000001,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 0.8, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_21': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_21',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 1.0,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 36.0,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 1.0, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_22': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_22',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 1.0,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 18.0,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 1.0, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_23': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_23',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 1.0,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 12.0,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 1.0, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_24': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_24',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 1.0,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 9.0,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 1.0, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_25': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_25',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 1.2000000000000002,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 43.2,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 1.2000000000000002, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_26': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_26',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 1.2000000000000002,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 21.6,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 1.2000000000000002, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_27': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_27',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 1.2000000000000002,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 14.400000000000002,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 1.2000000000000002, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_28': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_28',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 1.2000000000000002,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 10.8,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 1.2000000000000002, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_29': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_29',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 1.4000000000000001,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 50.400000000000006,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 1.4000000000000001, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_30': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_30',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 1.4000000000000001,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 25.200000000000003,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 1.4000000000000001, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_31': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_31',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 1.4000000000000001,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 16.8,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 1.4000000000000001, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_32': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_32',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 1.4000000000000001,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 12.600000000000001,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 1.4000000000000001, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_33': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_33',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 1.6,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 57.60000000000001,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 1.6, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_34': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_34',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 1.6,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 28.800000000000004,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 1.6, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_35': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_35',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 1.6,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 19.200000000000003,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 1.6, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_36': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_36',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 1.6,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 14.400000000000002,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 1.6, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_37': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_37',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 1.8,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 64.80000000000001,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 1.8, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_38': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_38',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 1.8,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 32.400000000000006,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 1.8, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_39': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_39',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 1.8,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 21.6,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 1.8, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_40': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_40',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 1.8,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 16.200000000000003,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 1.8, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_41': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_41',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 2.0,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 72.0,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 2.0, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_42': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_42',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 2.0,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 36.0,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 2.0, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_43': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_43',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 2.0,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 24.0,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 2.0, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_44': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_44',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 2.0,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 18.0,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 2.0, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_45': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_45',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 2.2,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 79.20000000000002,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 2.2, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_46': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_46',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 2.2,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 39.60000000000001,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 2.2, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_47': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_47',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 2.2,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 26.400000000000006,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 2.2, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_48': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_48',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 2.2,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 19.800000000000004,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 2.2, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_49': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_49',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 2.4000000000000004,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 86.4,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 2.4000000000000004, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_50': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_50',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 2.4000000000000004,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 43.2,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 2.4000000000000004, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_51': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_51',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 2.4000000000000004,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 28.800000000000004,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 2.4000000000000004, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_52': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_52',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 2.4000000000000004,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 21.6,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 2.4000000000000004, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_53': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_53',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 2.6,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 93.60000000000001,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 2.6, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_54': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_54',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 2.6,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 46.800000000000004,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 2.6, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_55': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_55',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 2.6,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 31.2,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 2.6, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_56': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_56',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 2.6,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 23.400000000000002,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 2.6, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_57': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_57',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 2.8000000000000003,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 100.80000000000001,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 2.8000000000000003, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_58': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_58',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 2.8000000000000003,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 50.400000000000006,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 2.8000000000000003, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_59': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_59',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 2.8000000000000003,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 33.6,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 2.8000000000000003, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_60': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_60',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 2.8000000000000003,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 25.200000000000003,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 2.8000000000000003, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_61': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_61',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 3.0,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 108.0,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 3.0, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_62': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_62',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 3.0,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 54.0,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 3.0, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_63': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_63',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 3.0,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 36.0,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 3.0, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_64': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_64',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 3.0,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 27.0,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 3.0, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_65': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_65',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 3.2,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 115.20000000000002,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 3.2, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_66': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_66',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 3.2,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 57.60000000000001,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 3.2, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_67': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_67',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 3.2,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 38.400000000000006,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 3.2, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_68': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_68',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 3.2,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 28.800000000000004,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 3.2, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_69': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_69',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 3.4000000000000004,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 122.40000000000002,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 3.4000000000000004, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_70': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_70',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 3.4000000000000004,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 61.20000000000001,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 3.4000000000000004, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_71': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_71',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 3.4000000000000004,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 40.800000000000004,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 3.4000000000000004, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_72': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_72',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 3.4000000000000004,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 30.600000000000005,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 3.4000000000000004, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_73': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_73',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 3.6,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 129.60000000000002,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 3.6, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_74': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_74',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 3.6,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 64.80000000000001,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 3.6, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_75': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_75',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 3.6,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 43.2,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 3.6, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_76': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_76',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 3.6,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 32.400000000000006,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 3.6, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_77': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_77',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 3.8000000000000003,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 136.8,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 3.8000000000000003, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_78': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_78',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 3.8000000000000003,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 68.4,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 3.8000000000000003, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_79': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_79',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 3.8000000000000003,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 45.6,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 3.8000000000000003, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_80': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_80',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 3.8000000000000003,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 34.2,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 3.8000000000000003, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_81': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_81',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 4.0,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 144.0,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 4.0, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_82': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_82',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 4.0,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 72.0,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 4.0, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_83': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_83',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 4.0,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 48.0,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 4.0, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_84': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_84',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 4.0,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 36.0,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 4.0, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_85': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_85',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 4.2,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 151.20000000000002,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 4.2, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_86': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_86',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 4.2,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 75.60000000000001,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 4.2, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_87': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_87',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 4.2,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 50.400000000000006,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 4.2, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_88': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_88',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 4.2,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 37.800000000000004,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 4.2, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_89': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_89',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 4.4,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 158.40000000000003,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 4.4, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_90': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_90',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 4.4,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 79.20000000000002,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 4.4, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_91': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_91',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 4.4,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 52.80000000000001,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 4.4, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_92': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_92',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 4.4,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 39.60000000000001,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 4.4, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_93': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_93',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 4.6000000000000005,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 165.60000000000002,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 4.6000000000000005, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_94': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_94',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 4.6000000000000005,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 82.80000000000001,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 4.6000000000000005, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_95': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_95',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 4.6000000000000005,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 55.2,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 4.6000000000000005, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_96': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_96',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 4.6000000000000005,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 41.400000000000006,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 4.6000000000000005, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_97': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_97',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 4.800000000000001,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 172.8,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 4.800000000000001, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_98': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_98',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 4.800000000000001,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 86.4,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 4.800000000000001, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_99': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_99',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 4.800000000000001,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 57.60000000000001,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 4.800000000000001, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_100': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_100',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 4.800000000000001,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 43.2,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 4.800000000000001, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_101': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_101',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 5.0,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 180.0,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 5.0, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_102': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_102',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 5.0,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 90.0,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 5.0, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_103': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_103',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 5.0,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 59.99999999999999,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 5.0, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_104': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_104',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 5.0,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 45.0,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 5.0, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_105': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_105',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 5.2,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 187.20000000000002,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 5.2, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_106': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_106',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 5.2,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 93.60000000000001,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 5.2, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_107': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_107',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 5.2,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 62.4,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 5.2, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_108': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_108',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 5.2,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 46.800000000000004,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 5.2, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_109': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_109',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 5.4,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 194.4,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 5.4, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_110': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_110',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 5.4,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 97.2,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 5.4, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_111': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_111',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 5.4,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 64.80000000000001,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 5.4, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_112': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_112',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 5.4,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 48.6,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 5.4, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_113': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_113',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 5.6000000000000005,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 201.60000000000002,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 5.6000000000000005, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_114': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_114',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 5.6000000000000005,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 100.80000000000001,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 5.6000000000000005, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_115': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_115',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 5.6000000000000005,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 67.2,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 5.6000000000000005, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_116': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_116',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 5.6000000000000005,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 50.400000000000006,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 5.6000000000000005, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_117': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_117',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 5.800000000000001,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 208.8,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 5.800000000000001, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_118': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_118',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 5.800000000000001,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 104.4,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 5.800000000000001, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_119': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_119',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 5.800000000000001,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 69.60000000000001,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 5.800000000000001, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_120': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_120',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 5.800000000000001,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 52.2,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 5.800000000000001, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_121': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_121',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 6.0,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 216.0,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 6.0, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_122': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_122',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 6.0,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 108.0,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 6.0, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_123': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_123',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 6.0,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 72.0,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 6.0, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_124': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_124',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 6.0,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 54.0,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 6.0, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_125': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_125',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 6.2,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 223.2,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 6.2, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_126': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_126',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 6.2,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 111.6,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 6.2, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_127': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_127',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 6.2,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 74.4,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 6.2, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_128': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_128',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 6.2,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 55.8,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 6.2, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_129': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_129',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 6.4,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 230.40000000000003,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 6.4, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_130': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_130',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 6.4,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 115.20000000000002,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 6.4, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_131': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_131',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 6.4,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 76.80000000000001,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 6.4, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_132': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_132',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 6.4,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 57.60000000000001,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 6.4, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_133': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_133',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 6.6000000000000005,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 237.60000000000005,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 6.6000000000000005, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_134': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_134',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 6.6000000000000005,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 118.80000000000003,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 6.6000000000000005, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_135': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_135',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 6.6000000000000005,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 79.19999999999999,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 6.6000000000000005, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_136': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_136',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 6.6000000000000005,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 59.40000000000001,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 6.6000000000000005, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_137': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_137',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 6.800000000000001,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 244.80000000000004,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 6.800000000000001, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_138': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_138',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 6.800000000000001,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 122.40000000000002,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 6.800000000000001, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_139': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_139',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 6.800000000000001,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 81.60000000000001,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 6.800000000000001, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_140': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_140',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 6.800000000000001,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 61.20000000000001,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 6.800000000000001, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_141': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_141',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 7.0,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 252.0,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 7.0, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_142': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_142',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 7.0,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 126.0,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 7.0, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_143': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_143',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 7.0,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 83.99999999999999,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 7.0, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_144': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_144',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 7.0,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 63.0,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 7.0, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_145': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_145',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 7.2,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 259.20000000000005,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 7.2, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_146': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_146',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 7.2,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 129.60000000000002,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 7.2, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_147': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_147',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 7.2,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 86.4,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 7.2, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_148': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_148',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 7.2,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 64.80000000000001,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 7.2, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_149': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_149',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 7.4,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 266.40000000000003,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 7.4, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_150': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_150',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 7.4,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 133.20000000000002,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 7.4, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_151': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_151',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 7.4,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 88.8,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 7.4, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_152': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_152',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 7.4,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 66.60000000000001,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 7.4, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_153': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_153',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 7.6000000000000005,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 273.6,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 7.6000000000000005, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_154': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_154',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 7.6000000000000005,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 136.8,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 7.6000000000000005, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_155': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_155',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 7.6000000000000005,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 91.2,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 7.6000000000000005, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_156': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_156',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 7.6000000000000005,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 68.4,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 7.6000000000000005, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_157': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_157',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 7.800000000000001,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 280.8,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 7.800000000000001, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_158': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_158',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 7.800000000000001,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 140.4,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 7.800000000000001, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_159': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_159',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 7.800000000000001,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 93.60000000000001,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 7.800000000000001, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_160': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_160',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 7.800000000000001,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 70.2,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 7.800000000000001, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_161': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_161',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 8.0,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 288.0,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 8.0, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_162': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_162',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 8.0,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 144.0,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 8.0, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_163': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_163',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 8.0,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 96.0,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 8.0, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_164': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_164',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 8.0,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 72.0,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 8.0, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_165': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_165',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 8.200000000000001,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 295.2000000000001,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 8.200000000000001, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_166': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_166',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 8.200000000000001,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 147.60000000000005,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 8.200000000000001, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_167': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_167',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 8.200000000000001,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 98.40000000000002,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 8.200000000000001, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_168': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_168',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 8.200000000000001,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 73.80000000000003,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 8.200000000000001, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_169': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_169',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 8.4,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 302.40000000000003,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 8.4, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_170': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_170',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 8.4,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 151.20000000000002,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 8.4, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_171': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_171',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 8.4,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 100.80000000000001,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 8.4, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_172': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_172',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 8.4,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 75.60000000000001,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 8.4, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_173': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_173',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 8.6,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 309.59999999999997,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 8.6, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_174': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_174',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 8.6,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 154.79999999999998,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 8.6, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_175': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_175',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 8.6,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 103.19999999999999,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 8.6, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_176': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_176',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 8.6,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 77.39999999999999,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 8.6, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_177': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_177',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 8.8,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 316.80000000000007,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 8.8, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_178': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_178',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 8.8,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 158.40000000000003,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 8.8, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_179': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_179',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 8.8,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 105.60000000000002,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 8.8, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_180': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_180',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 8.8,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 79.20000000000002,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 8.8, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_181': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_181',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 9.0,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 324.0,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 9.0, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_182': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_182',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 9.0,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 162.0,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 9.0, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_183': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_183',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 9.0,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 108.0,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 9.0, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_184': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_184',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 9.0,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 81.0,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 9.0, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_185': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_185',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 9.200000000000001,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 331.20000000000005,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 9.200000000000001, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_186': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_186',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 9.200000000000001,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 165.60000000000002,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 9.200000000000001, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_187': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_187',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 9.200000000000001,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 110.4,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 9.200000000000001, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_188': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_188',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 9.200000000000001,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 82.80000000000001,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 9.200000000000001, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_189': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_189',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 9.4,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 338.4,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 9.4, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_190': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_190',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 9.4,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 169.2,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 9.4, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_191': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_191',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 9.4,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 112.79999999999998,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 9.4, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_192': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_192',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 9.4,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 84.6,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 9.4, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_193': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_193',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 9.600000000000001,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 345.6,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 9.600000000000001, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_194': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_194',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 9.600000000000001,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 172.8,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 9.600000000000001, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_195': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_195',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 9.600000000000001,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 115.20000000000002,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 9.600000000000001, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_196': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_196',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 9.600000000000001,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 86.4,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 9.600000000000001, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_197': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_197',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 9.8,\n",
       "    'period': 0.6283185307179586,\n",
       "    'initangle': 352.80000000000007,\n",
       "    'end': [10, 0.0]},\n",
       "   'inputparams': {'amp': 9.8, 'wavelength': 10},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_198': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_198',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 9.8,\n",
       "    'period': 0.3141592653589793,\n",
       "    'initangle': 176.40000000000003,\n",
       "    'end': [20, 0.0]},\n",
       "   'inputparams': {'amp': 9.8, 'wavelength': 20},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_199': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_199',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 9.8,\n",
       "    'period': 0.20943951023931953,\n",
       "    'initangle': 117.60000000000001,\n",
       "    'end': [30, 0.0]},\n",
       "   'inputparams': {'amp': 9.8, 'wavelength': 30},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'sine_200': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'sine_200',\n",
       "   'rangeid': 'sine',\n",
       "   'params': {'linetype': 'sine',\n",
       "    'amp': 9.8,\n",
       "    'period': 0.15707963267948966,\n",
       "    'initangle': 88.20000000000002,\n",
       "    'end': [40, 0.0]},\n",
       "   'inputparams': {'amp': 9.8, 'wavelength': 40},\n",
       "   'modelparams': {'seed': 3667026230},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('sine',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.005}},\n",
       " 'turn_201': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'turn_201',\n",
       "   'rangeid': 'turn',\n",
       "   'params': {'linetype': 'turn',\n",
       "    'radius': 5,\n",
       "    'start': 0,\n",
       "    'initangle': 0.0,\n",
       "    'end': [5, 5]},\n",
       "   'inputparams': {'radius': 5, 'start': 0},\n",
       "   'modelparams': {'seed': 1154356067},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('turn',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.03571428571428571}},\n",
       " 'turn_202': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'turn_202',\n",
       "   'rangeid': 'turn',\n",
       "   'params': {'linetype': 'turn',\n",
       "    'radius': 5,\n",
       "    'start': 5,\n",
       "    'initangle': 0.0,\n",
       "    'end': [10, 10]},\n",
       "   'inputparams': {'radius': 5, 'start': 5},\n",
       "   'modelparams': {'seed': 1154356067},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('turn',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.03571428571428571}},\n",
       " 'turn_203': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'turn_203',\n",
       "   'rangeid': 'turn',\n",
       "   'params': {'linetype': 'turn',\n",
       "    'radius': 5,\n",
       "    'start': 10,\n",
       "    'initangle': 0.0,\n",
       "    'end': [15, 15]},\n",
       "   'inputparams': {'radius': 5, 'start': 10},\n",
       "   'modelparams': {'seed': 1154356067},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('turn',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.03571428571428571}},\n",
       " 'turn_204': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'turn_204',\n",
       "   'rangeid': 'turn',\n",
       "   'params': {'linetype': 'turn',\n",
       "    'radius': 5,\n",
       "    'start': 15,\n",
       "    'initangle': 0.0,\n",
       "    'end': [20, 20]},\n",
       "   'inputparams': {'radius': 5, 'start': 15},\n",
       "   'modelparams': {'seed': 1154356067},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('turn',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.03571428571428571}},\n",
       " 'turn_205': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'turn_205',\n",
       "   'rangeid': 'turn',\n",
       "   'params': {'linetype': 'turn',\n",
       "    'radius': 10,\n",
       "    'start': 0,\n",
       "    'initangle': 0.0,\n",
       "    'end': [10, 10]},\n",
       "   'inputparams': {'radius': 10, 'start': 0},\n",
       "   'modelparams': {'seed': 1154356067},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('turn',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.03571428571428571}},\n",
       " 'turn_206': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'turn_206',\n",
       "   'rangeid': 'turn',\n",
       "   'params': {'linetype': 'turn',\n",
       "    'radius': 10,\n",
       "    'start': 5,\n",
       "    'initangle': 0.0,\n",
       "    'end': [15, 15]},\n",
       "   'inputparams': {'radius': 10, 'start': 5},\n",
       "   'modelparams': {'seed': 1154356067},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('turn',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.03571428571428571}},\n",
       " 'turn_207': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'turn_207',\n",
       "   'rangeid': 'turn',\n",
       "   'params': {'linetype': 'turn',\n",
       "    'radius': 10,\n",
       "    'start': 10,\n",
       "    'initangle': 0.0,\n",
       "    'end': [20, 20]},\n",
       "   'inputparams': {'radius': 10, 'start': 10},\n",
       "   'modelparams': {'seed': 1154356067},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('turn',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.03571428571428571}},\n",
       " 'turn_208': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'turn_208',\n",
       "   'rangeid': 'turn',\n",
       "   'params': {'linetype': 'turn',\n",
       "    'radius': 10,\n",
       "    'start': 15,\n",
       "    'initangle': 0.0,\n",
       "    'end': [25, 25]},\n",
       "   'inputparams': {'radius': 10, 'start': 15},\n",
       "   'modelparams': {'seed': 1154356067},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('turn',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.03571428571428571}},\n",
       " 'turn_209': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'turn_209',\n",
       "   'rangeid': 'turn',\n",
       "   'params': {'linetype': 'turn',\n",
       "    'radius': 15,\n",
       "    'start': 0,\n",
       "    'initangle': 0.0,\n",
       "    'end': [15, 15]},\n",
       "   'inputparams': {'radius': 15, 'start': 0},\n",
       "   'modelparams': {'seed': 1154356067},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('turn',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.03571428571428571}},\n",
       " 'turn_210': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'turn_210',\n",
       "   'rangeid': 'turn',\n",
       "   'params': {'linetype': 'turn',\n",
       "    'radius': 15,\n",
       "    'start': 5,\n",
       "    'initangle': 0.0,\n",
       "    'end': [20, 20]},\n",
       "   'inputparams': {'radius': 15, 'start': 5},\n",
       "   'modelparams': {'seed': 1154356067},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('turn',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.03571428571428571}},\n",
       " 'turn_211': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'turn_211',\n",
       "   'rangeid': 'turn',\n",
       "   'params': {'linetype': 'turn',\n",
       "    'radius': 15,\n",
       "    'start': 10,\n",
       "    'initangle': 0.0,\n",
       "    'end': [25, 25]},\n",
       "   'inputparams': {'radius': 15, 'start': 10},\n",
       "   'modelparams': {'seed': 1154356067},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('turn',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.03571428571428571}},\n",
       " 'turn_212': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'turn_212',\n",
       "   'rangeid': 'turn',\n",
       "   'params': {'linetype': 'turn',\n",
       "    'radius': 15,\n",
       "    'start': 15,\n",
       "    'initangle': 0.0,\n",
       "    'end': [30, 30]},\n",
       "   'inputparams': {'radius': 15, 'start': 15},\n",
       "   'modelparams': {'seed': 1154356067},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('turn',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.03571428571428571}},\n",
       " 'turn_213': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'turn_213',\n",
       "   'rangeid': 'turn',\n",
       "   'params': {'linetype': 'turn',\n",
       "    'radius': 20,\n",
       "    'start': 0,\n",
       "    'initangle': 0.0,\n",
       "    'end': [20, 20]},\n",
       "   'inputparams': {'radius': 20, 'start': 0},\n",
       "   'modelparams': {'seed': 1154356067},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('turn',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.03571428571428571}},\n",
       " 'turn_214': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'turn_214',\n",
       "   'rangeid': 'turn',\n",
       "   'params': {'linetype': 'turn',\n",
       "    'radius': 20,\n",
       "    'start': 5,\n",
       "    'initangle': 0.0,\n",
       "    'end': [25, 25]},\n",
       "   'inputparams': {'radius': 20, 'start': 5},\n",
       "   'modelparams': {'seed': 1154356067},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('turn',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.03571428571428571}},\n",
       " 'turn_215': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'turn_215',\n",
       "   'rangeid': 'turn',\n",
       "   'params': {'linetype': 'turn',\n",
       "    'radius': 20,\n",
       "    'start': 10,\n",
       "    'initangle': 0.0,\n",
       "    'end': [30, 30]},\n",
       "   'inputparams': {'radius': 20, 'start': 10},\n",
       "   'modelparams': {'seed': 1154356067},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('turn',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.03571428571428571}},\n",
       " 'turn_216': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'turn_216',\n",
       "   'rangeid': 'turn',\n",
       "   'params': {'linetype': 'turn',\n",
       "    'radius': 20,\n",
       "    'start': 15,\n",
       "    'initangle': 0.0,\n",
       "    'end': [35, 35]},\n",
       "   'inputparams': {'radius': 20, 'start': 15},\n",
       "   'modelparams': {'seed': 1154356067},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('turn',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.03571428571428571}},\n",
       " 'turn_217': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'turn_217',\n",
       "   'rangeid': 'turn',\n",
       "   'params': {'linetype': 'turn',\n",
       "    'radius': 25,\n",
       "    'start': 0,\n",
       "    'initangle': 0.0,\n",
       "    'end': [25, 25]},\n",
       "   'inputparams': {'radius': 25, 'start': 0},\n",
       "   'modelparams': {'seed': 1154356067},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('turn',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.03571428571428571}},\n",
       " 'turn_218': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'turn_218',\n",
       "   'rangeid': 'turn',\n",
       "   'params': {'linetype': 'turn',\n",
       "    'radius': 25,\n",
       "    'start': 5,\n",
       "    'initangle': 0.0,\n",
       "    'end': [30, 30]},\n",
       "   'inputparams': {'radius': 25, 'start': 5},\n",
       "   'modelparams': {'seed': 1154356067},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('turn',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.03571428571428571}},\n",
       " 'turn_219': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'turn_219',\n",
       "   'rangeid': 'turn',\n",
       "   'params': {'linetype': 'turn',\n",
       "    'radius': 25,\n",
       "    'start': 10,\n",
       "    'initangle': 0.0,\n",
       "    'end': [35, 35]},\n",
       "   'inputparams': {'radius': 25, 'start': 10},\n",
       "   'modelparams': {'seed': 1154356067},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('turn',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.03571428571428571}},\n",
       " 'turn_220': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'turn_220',\n",
       "   'rangeid': 'turn',\n",
       "   'params': {'linetype': 'turn',\n",
       "    'radius': 25,\n",
       "    'start': 15,\n",
       "    'initangle': 0.0,\n",
       "    'end': [40, 40]},\n",
       "   'inputparams': {'radius': 25, 'start': 15},\n",
       "   'modelparams': {'seed': 1154356067},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('turn',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.03571428571428571}},\n",
       " 'turn_221': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'turn_221',\n",
       "   'rangeid': 'turn',\n",
       "   'params': {'linetype': 'turn',\n",
       "    'radius': 30,\n",
       "    'start': 0,\n",
       "    'initangle': 0.0,\n",
       "    'end': [30, 30]},\n",
       "   'inputparams': {'radius': 30, 'start': 0},\n",
       "   'modelparams': {'seed': 1154356067},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('turn',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.03571428571428571}},\n",
       " 'turn_222': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'turn_222',\n",
       "   'rangeid': 'turn',\n",
       "   'params': {'linetype': 'turn',\n",
       "    'radius': 30,\n",
       "    'start': 5,\n",
       "    'initangle': 0.0,\n",
       "    'end': [35, 35]},\n",
       "   'inputparams': {'radius': 30, 'start': 5},\n",
       "   'modelparams': {'seed': 1154356067},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('turn',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.03571428571428571}},\n",
       " 'turn_223': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'turn_223',\n",
       "   'rangeid': 'turn',\n",
       "   'params': {'linetype': 'turn',\n",
       "    'radius': 30,\n",
       "    'start': 10,\n",
       "    'initangle': 0.0,\n",
       "    'end': [40, 40]},\n",
       "   'inputparams': {'radius': 30, 'start': 10},\n",
       "   'modelparams': {'seed': 1154356067},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('turn',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.03571428571428571}},\n",
       " 'turn_224': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'turn_224',\n",
       "   'rangeid': 'turn',\n",
       "   'params': {'linetype': 'turn',\n",
       "    'radius': 30,\n",
       "    'start': 15,\n",
       "    'initangle': 0.0,\n",
       "    'end': [45, 45]},\n",
       "   'inputparams': {'radius': 30, 'start': 15},\n",
       "   'modelparams': {'seed': 1154356067},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('turn',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.03571428571428571}},\n",
       " 'turn_225': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'turn_225',\n",
       "   'rangeid': 'turn',\n",
       "   'params': {'linetype': 'turn',\n",
       "    'radius': 35,\n",
       "    'start': 0,\n",
       "    'initangle': 0.0,\n",
       "    'end': [35, 35]},\n",
       "   'inputparams': {'radius': 35, 'start': 0},\n",
       "   'modelparams': {'seed': 1154356067},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('turn',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.03571428571428571}},\n",
       " 'turn_226': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'turn_226',\n",
       "   'rangeid': 'turn',\n",
       "   'params': {'linetype': 'turn',\n",
       "    'radius': 35,\n",
       "    'start': 5,\n",
       "    'initangle': 0.0,\n",
       "    'end': [40, 40]},\n",
       "   'inputparams': {'radius': 35, 'start': 5},\n",
       "   'modelparams': {'seed': 1154356067},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('turn',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.03571428571428571}},\n",
       " 'turn_227': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'turn_227',\n",
       "   'rangeid': 'turn',\n",
       "   'params': {'linetype': 'turn',\n",
       "    'radius': 35,\n",
       "    'start': 10,\n",
       "    'initangle': 0.0,\n",
       "    'end': [45, 45]},\n",
       "   'inputparams': {'radius': 35, 'start': 10},\n",
       "   'modelparams': {'seed': 1154356067},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('turn',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.03571428571428571}},\n",
       " 'turn_228': {'sequence': {},\n",
       "  'properties': {'type': 'nominal',\n",
       "   'time': 0.0,\n",
       "   'name': 'turn_228',\n",
       "   'rangeid': 'turn',\n",
       "   'params': {'linetype': 'turn',\n",
       "    'radius': 35,\n",
       "    'start': 15,\n",
       "    'initangle': 0.0,\n",
       "    'end': [50, 50]},\n",
       "   'inputparams': {'radius': 35, 'start': 15},\n",
       "   'modelparams': {'seed': 1154356067},\n",
       "   'paramfunc': <function __main__.gen_params(linetype, **kwargs)>,\n",
       "   'fixedargs': ('turn',),\n",
       "   'fixedkwargs': {},\n",
       "   'prob': 0.03571428571428571}}}"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nomapp.scenarios"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Nominal Approaches are simulated using `prop.nominal_approach`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on function nominal_approach in module fmdtools.faultsim.propagate:\n",
      "\n",
      "nominal_approach(mdl, nomapp, **kwargs)\n",
      "    Simulates a set of nominal scenarios through a model. Useful to understand\n",
      "    the sets of parameters where the system will run nominally and/or lead to \n",
      "    a fault.\n",
      "    \n",
      "    Parameters\n",
      "    ----------\n",
      "    mdl : Model\n",
      "        Model to simulate\n",
      "    nomapp : NominalApproach\n",
      "        Nominal Approach defining the nominal scenarios to run the system over.\n",
      "    get_endclass : bool\n",
      "        Whether to return endclasses from mdl.find_classification. Default is True.\n",
      "    **kwargs : kwargs\n",
      "        Additional keyword arguments, may include:\n",
      "            - :data:`sim_kwargs` : kwargs\n",
      "                Simulation options for :func:`prop_one_scen\n",
      "            - :data:`run_kwargs` : kwargs\n",
      "                Run options for :func:`nom_helper` and others\n",
      "            - :data:`mult_kwargs` : kwargs\n",
      "                Multi-scenario options for :func:`approach` and others\n",
      "    Returns\n",
      "    -------\n",
      "    nomresults:\n",
      "        dict of result corresponding to desired result {'scenname':return}\n",
      "    nomhists : Dict\n",
      "        Dictionary of model histories, with structure {'scenname':mdlhist}\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(prop.nominal_approach)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "SCENARIOS COMPLETE: 100%|████████████████████████████████████████████████████████████| 228/228 [00:04<00:00, 51.78it/s]\n"
     ]
    }
   ],
   "source": [
    "endclasses, mdlhists= prop.nominal_approach(mdl, nomapp)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To speed up execution over large numbers of scenarios, multiprocessing can also be used to run the scenarios in parallel by passing an execution pool. This is not done here because it would require the model to be in a different file, and because the gains on a light-weight model like this are not significant."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that the approach has been simulated, the operational envelope can be visualized. There are three methods to perform this visualization `rd.plot.nominal_vals_1d`, `rd.plot.nominal_vals_2d`, and `rd.plot.nominal_vals_3d`, which each plot the *classification* of the model in the 1/2/3 dimensions over the set of given parameters as nominal or incomplete. \n",
    "\n",
    "Note that this classification must be in the dictionary returned from the Model's `find_classification` function at the end of the model run under the key `classification` as is done in the rover model. This classification must also be encoded as a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on function nominal_vals_2d in module fmdtools.resultdisp.plot:\n",
      "\n",
      "nominal_vals_2d(nomapp, nomapp_endclasses, param1, param2, title='Nominal Operational Envelope', nomlabel='nominal', metric='classification', legendloc='best', figsize=(6, 4), xlabel='', ylabel='')\n",
      "    Visualizes the nominal operational envelope along two given parameters\n",
      "    \n",
      "    Parameters\n",
      "    ----------\n",
      "    nomapp : NominalApproach\n",
      "        Nominal sample approach simulated in the model.\n",
      "    nomapp_endclasses : dict\n",
      "        End-classifications for the set of simulations in the model.\n",
      "    param1 : str\n",
      "        First parameter (x) desired to visualize in the operational envelope\n",
      "    param2 : str\n",
      "        Second arameter (y) desired to visualize in the operational envelope\n",
      "    title : str, optional\n",
      "        Plot title. The default is \"Nominal Operational Envelope\".\n",
      "    nomlabel : str, optional\n",
      "        Flag for nominal end-states. The default is 'nominal'.\n",
      "    xlabel: str, optional\n",
      "        label for x-axis (defaults to parameter name for param1)\n",
      "    ylabel: str, optional\n",
      "        label for y-axis (defaults to parameter name for param2)\n",
      "    \n",
      "    Returns\n",
      "    -------\n",
      "    fig : matplotlib figure\n",
      "        Figure for the plot.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(rd.plot.nominal_vals_2d)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can then use these results to visualize the operational envelope for the system over each case. In this case, the parameter ranges of the sine wave are plotted, showing that the rover can only a low ration of amplitude to wavelenght."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = rd.plot.nominal_vals_2d(nomapp, endclasses, 'amp', 'wavelength')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The plot below shows the same results for the turn parameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = rd.plot.nominal_vals_2d(nomapp, endclasses, 'radius', 'start')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Because the primary effect is one in terms of radius, we might visualize this trend in one dimension instead:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = rd.plot.nominal_vals_1d(nomapp, endclasses, 'radius')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "While this is helpful for plotting string classifications, we also might want to compare numeric quantities (e.g., costs, hazard probabilities, etc) over the set of factors. For this, `rd.tabulate.nominal_factor_comparison` is used, which creates a table of  metrics over a given set of parameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on function nominal_factor_comparison in module fmdtools.resultdisp.tabulate:\n",
      "\n",
      "nominal_factor_comparison(nomapp, endclasses, params, metrics='all', rangeid='default', nan_as=nan, percent=True, give_ci=False, **kwargs)\n",
      "    Compares a metric for a given set of model parameters/factors over set of nominal scenarios.\n",
      "    \n",
      "    Parameters\n",
      "    ----------\n",
      "    nomapp : NominalApproach\n",
      "        Nominal Approach used to generate the simulations\n",
      "    endclasses : dict\n",
      "        dict of endclasses from propagate.nominal_approach or nested_approach with structure: \n",
      "            {scen_x:{metric1:x, metric2:x...}} or {scen_x:{fault:{metric1:x, metric2:x...}}} \n",
      "    params : list/str\n",
      "        List of parameters (or parameter) to use for the factor levels in the comparison\n",
      "    metrics : 'all'/list, optional\n",
      "        Metrics to show in the table. The default is 'all'.\n",
      "    rangeid : str, optional\n",
      "        Nominal Approach range to use for the test, if run over a single range.\n",
      "        The default is 'default', which either:\n",
      "            - picks the only range (if there is only one), or\n",
      "            - compares between ranges (if more than one)\n",
      "    nan_as : float, optional\n",
      "        Number to parse NaNs as (if present). The default is np.nan.\n",
      "    percent : bool, optional\n",
      "        Whether to compare metrics as bools (True - results in a comparison of percentages of indicator variables) \n",
      "        or as averages (False - results in a comparison of average values of real valued variables). The default is True.\n",
      "    give_ci = bool:\n",
      "        gives the bootstrap confidence interval for the given statistic using the given kwargs\n",
      "        'combined' combines the values as a strings in the table (for display)\n",
      "    kwargs : keyword arguments for bootstrap_confidence_interval (sample_size, num_samples, interval, seed)\n",
      "    Returns\n",
      "    -------\n",
      "    table : pandas table\n",
      "        Table with the metric statistic (percent or average) over the nominal scenario and each listed function/mode (as differences or averages)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(rd.tabulate.nominal_factor_comparison)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "nomtab = rd.tabulate.nominal_factor_comparison(nomapp, endclasses, ['radius', 'start'], rangeid='turn', percent=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"4\" halign=\"left\">5</th>\n",
       "      <th colspan=\"4\" halign=\"left\">10</th>\n",
       "      <th colspan=\"2\" halign=\"left\">15</th>\n",
       "      <th>...</th>\n",
       "      <th colspan=\"2\" halign=\"left\">25</th>\n",
       "      <th colspan=\"4\" halign=\"left\">30</th>\n",
       "      <th colspan=\"4\" halign=\"left\">35</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>5</th>\n",
       "      <th>10</th>\n",
       "      <th>15</th>\n",
       "      <th>0</th>\n",
       "      <th>5</th>\n",
       "      <th>10</th>\n",
       "      <th>15</th>\n",
       "      <th>0</th>\n",
       "      <th>5</th>\n",
       "      <th>...</th>\n",
       "      <th>10</th>\n",
       "      <th>15</th>\n",
       "      <th>0</th>\n",
       "      <th>5</th>\n",
       "      <th>10</th>\n",
       "      <th>15</th>\n",
       "      <th>0</th>\n",
       "      <th>5</th>\n",
       "      <th>10</th>\n",
       "      <th>15</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>rate</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cost</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>500.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>500.000000</td>\n",
       "      <td>500.000000</td>\n",
       "      <td>500.000000</td>\n",
       "      <td>500.000000</td>\n",
       "      <td>500.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>prob</th>\n",
       "      <td>0.035714</td>\n",
       "      <td>0.035714</td>\n",
       "      <td>0.035714</td>\n",
       "      <td>0.035714</td>\n",
       "      <td>0.035714</td>\n",
       "      <td>0.035714</td>\n",
       "      <td>0.035714</td>\n",
       "      <td>0.035714</td>\n",
       "      <td>0.035714</td>\n",
       "      <td>0.035714</td>\n",
       "      <td>...</td>\n",
       "      <td>0.035714</td>\n",
       "      <td>0.035714</td>\n",
       "      <td>0.035714</td>\n",
       "      <td>0.035714</td>\n",
       "      <td>0.035714</td>\n",
       "      <td>0.035714</td>\n",
       "      <td>0.035714</td>\n",
       "      <td>0.035714</td>\n",
       "      <td>0.035714</td>\n",
       "      <td>0.035714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>expected cost</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>17.857143</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>17.857143</td>\n",
       "      <td>17.857143</td>\n",
       "      <td>17.857143</td>\n",
       "      <td>17.857143</td>\n",
       "      <td>17.857143</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4 rows × 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     5                                             10  \\\n",
       "                     0           5         10          15          0    \n",
       "rate           0.000000    0.000000  0.000000    0.000000    0.000000   \n",
       "cost           0.000000  500.000000  0.000000  500.000000  500.000000   \n",
       "prob           0.035714    0.035714  0.035714    0.035714    0.035714   \n",
       "expected cost  0.000000   17.857143  0.000000   17.857143   17.857143   \n",
       "\n",
       "                                                         15            ...  \\\n",
       "                       5           10          15        0         5   ...   \n",
       "rate             0.000000    0.000000    0.000000  0.000000  0.000000  ...   \n",
       "cost           500.000000  500.000000  500.000000  0.000000  0.000000  ...   \n",
       "prob             0.035714    0.035714    0.035714  0.035714  0.035714  ...   \n",
       "expected cost   17.857143   17.857143   17.857143  0.000000  0.000000  ...   \n",
       "\n",
       "                     25                  30                                \\\n",
       "                     10        15        0         5         10        15   \n",
       "rate           0.000000  0.000000  0.000000  0.000000  0.000000  0.000000   \n",
       "cost           0.000000  0.000000  0.000000  0.000000  0.000000  0.000000   \n",
       "prob           0.035714  0.035714  0.035714  0.035714  0.035714  0.035714   \n",
       "expected cost  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000   \n",
       "\n",
       "                     35                                \n",
       "                     0         5         10        15  \n",
       "rate           0.000000  0.000000  0.000000  0.000000  \n",
       "cost           0.000000  0.000000  0.000000  0.000000  \n",
       "prob           0.035714  0.035714  0.035714  0.035714  \n",
       "expected cost  0.000000  0.000000  0.000000  0.000000  \n",
       "\n",
       "[4 rows x 28 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nomtab"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This table can also be summarized on individual factors:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>(start,)</th>\n",
       "      <th>0</th>\n",
       "      <th>5</th>\n",
       "      <th>10</th>\n",
       "      <th>15</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>rate</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cost</th>\n",
       "      <td>71.428571</td>\n",
       "      <td>142.857143</td>\n",
       "      <td>142.857143</td>\n",
       "      <td>142.857143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>prob</th>\n",
       "      <td>0.035714</td>\n",
       "      <td>0.035714</td>\n",
       "      <td>0.035714</td>\n",
       "      <td>0.035714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>expected cost</th>\n",
       "      <td>2.551020</td>\n",
       "      <td>5.102041</td>\n",
       "      <td>5.102041</td>\n",
       "      <td>5.102041</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "('start',)            0           5           10          15\n",
       "rate            0.000000    0.000000    0.000000    0.000000\n",
       "cost           71.428571  142.857143  142.857143  142.857143\n",
       "prob            0.035714    0.035714    0.035714    0.035714\n",
       "expected cost   2.551020    5.102041    5.102041    5.102041"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nomtab_summ = rd.tabulate.nominal_factor_comparison(nomapp, endclasses, ['start'], rangeid='turn', percent=False)\n",
    "nomtab_summ"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`rd.plot.nominal_factor_comparison` can then be used to visualize one metric from this table as a bar plot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on function nominal_factor_comparison in module fmdtools.resultdisp.plot:\n",
      "\n",
      "nominal_factor_comparison(comparison_table, metric, ylabel='proportion', figsize=(6, 4), title='', maxy='max', xlabel=True, error_bars=False)\n",
      "    Compares/plots a comparison table from tabulate.nominal_factor_comparison as a bar plot for a given metric.\n",
      "    \n",
      "    Parameters\n",
      "    ----------\n",
      "    comparison_table : pandas table\n",
      "        Table from tabulate.nominal_factor_comparison\n",
      "    metrics : string\n",
      "        Metric to use in the plot\n",
      "    ylabel : string, optional\n",
      "        label for the y-axis. The default is 'proportion'.\n",
      "    figsize : tuple, optional\n",
      "        Size for the plot. The default is (12,8).\n",
      "    title : str, optional\n",
      "        Plot title. The default is ''.\n",
      "    maxy : float\n",
      "        Cutoff for the y-axis (to use if the default is bad). The default is 'max'\n",
      "    xlabel : TYPE, optional\n",
      "        DESCRIPTION. The default is True.\n",
      "    error_bars : TYPE, optional\n",
      "        DESCRIPTION. The default is False.\n",
      "    \n",
      "    Returns\n",
      "    -------\n",
      "    figure: matplotlib figure\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(rd.plot.nominal_factor_comparison)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = rd.plot.nominal_factor_comparison(nomtab_summ, 'cost', ylabel='cost', title='average cost at different start locations', maxy=150)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Quantifying probabilities\n",
    "\n",
    "Given the ability to simulate over ranges, it can additionally be used to quantify probabilities of the different end-state classifications. `rd.process.state_probabilities(endclasses)` can be used to quantify the probability these classifications."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The default probability model over ranges is to assume a uniform distribution and only assume one range has been added. This can lead to fallacious results:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'incomplete mission': 1.0050000000000006,\n",
       " 'nominal mission': 0.9949999999999999}"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "state_probabilities = rd.process.state_probabilities(endclasses)\n",
    "state_probabilities"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Thus, `.assoc_probs` to:\n",
    "- associate the probabilities with their corresponding distributions (which may be non-uniform), and\n",
    "- rebalance the overall probability of discrete cases\n",
    "when running the approach over ranges. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on method assoc_probs in module fmdtools.modeldef:\n",
      "\n",
      "assoc_probs(rangeid, prob_weight=1.0, **inputpdfs) method of fmdtools.modeldef.NominalApproach instance\n",
      "    Associates a probability model (assuming variable independence) with a \n",
      "    given previously-defined range of scenarios using given pdfs\n",
      "    \n",
      "    Parameters\n",
      "    ----------\n",
      "    rangeid : str\n",
      "        Name of the range to apply the probability model to.\n",
      "    prob_weight : float, optional\n",
      "        Overall probability for the set of scenarios (to use if adding more ranges \n",
      "        or if the range does not cover the space of probability). The default is 1.0.\n",
      "    **inputpdfs : key=(pdf, params)\n",
      "        pdf to associate with the different variables of the model. \n",
      "        Where the pdf has form pdf(x, **kwargs) where x is the location and **kwargs is parameters\n",
      "        (for example, scipy.stats.norm.pdf)\n",
      "        and params is a dictionary of parameters (e.g., {'mu':1,'std':1}) to use '\n",
      "        as the key/parameter inputs to the pdf\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(nomapp.assoc_probs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, each case is given a weight defining the probability of the discrete case, while the corresponding parameters are given corresponding pdf functions (in this case uniform distributions from the scipy stats package)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy import stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "nomapp.assoc_probs('sine', prob_weight=0.5, amp=(stats.uniform.pdf, {'loc':0,'scale':10}), wavelength=(stats.uniform.pdf,{'loc':10, 'scale':40}))\n",
    "nomapp.assoc_probs('turn', prob_weight=0.5, start=(stats.uniform.pdf, {'loc':5,'scale':10}), radius=(stats.uniform.pdf,{'loc':5, 'scale':30}))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, when the scenarios are run, they should have the correct corresponding probabilities:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "SCENARIOS COMPLETE: 100%|████████████████████████████████████████████████████████████| 228/228 [00:04<00:00, 51.05it/s]\n"
     ]
    }
   ],
   "source": [
    "endclasses, mdlhists= prop.nominal_approach(mdl, nomapp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'incomplete mission': 0.5203571428571433,\n",
       " 'nominal mission': 0.4796428571428575}"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "state_probabilities = rd.process.state_probabilities(endclasses)\n",
    "state_probabilities"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This result (while seemingly extreme due to the large ranges explored) is consistent with the operational envelopes presented earlier."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Random input generation\n",
    "\n",
    "It may additionally be helpful to perform simulations over randomly generated inputs, when there are many parameters and it is difficult to easily quantify the stochastic process. This approach is called Monte Carlo sampling, and enables one to quantify probabilities given stochasticly-generated inputs. Random inputs are assigned using `.add_rand_params`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on method add_rand_params in module fmdtools.modeldef:\n",
      "\n",
      "add_rand_params(paramfunc, rangeid, *fixedargs, prob_weight=1.0, replicates=1000, seeds='shared', **randvars) method of fmdtools.modeldef.NominalApproach instance\n",
      "    Adds a set of random scenarios to the approach.\n",
      "    \n",
      "    Parameters\n",
      "    ----------\n",
      "    paramfunc : method\n",
      "        Python method which generates a set of model parameters given the input arguments.\n",
      "        method should have form: method(fixedarg, fixedarg..., inputarg=X, inputarg=X)\n",
      "    rangeid : str\n",
      "        Name for the range being used. Default is 'nominal'\n",
      "    prob_weight : float (0-1)\n",
      "        Overall probability for the set of scenarios (to use if adding more ranges). Default is 1.0\n",
      "    *fixedargs : any\n",
      "        Fixed positional arguments in the parameter generator function. \n",
      "        Useful for discrete modes with different parameters.\n",
      "    seeds : str/list\n",
      "        Options for seeding models/replicates: (Default is 'shared')\n",
      "            - 'shared' creates random seeds and shares them between parameters and models\n",
      "            - 'independent' creates separate random seeds for models and parameter generation\n",
      "            - 'keep_model' uses the seed provided in the model for all of the model\n",
      "        When a list is provided, these seeds are are used (and shared). Must be of length replicates.\n",
      "    **randvars : key=tuple\n",
      "        Specification for each random input parameter, specified as \n",
      "        input = (randfunc, param1, param2...)\n",
      "        where randfunc is the method producing random outputs (e.g. numpy.random.rand)\n",
      "        and the successive parameters param1, param2, etc are inputs to the method\n",
      "\n"
     ]
    }
   ],
   "source": [
    "nomapp_rand = NominalApproach()\n",
    "help(nomapp_rand.add_rand_params)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below, the same probability model/scenarios used above will be generated using stochastic inputs (rather than a range)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "nomapp_rand.add_rand_params(gen_params,'sine','sine', prob_weight=0.5, replicates=100, amp=(np.random.uniform, 0, 10), wavelength=(np.random.uniform,10,40))\n",
    "nomapp_rand.add_rand_params(gen_params,'turn','turn', prob_weight=0.5, replicates=100, radius=(np.random.uniform,5,40), start=(np.random.uniform,0, 20))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can go through the same process to verify that it tracks the range/pdf method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "SCENARIOS COMPLETE: 100%|████████████████████████████████████████████████████████████| 200/200 [00:03<00:00, 51.97it/s]\n"
     ]
    }
   ],
   "source": [
    "endclasses, mdlhists= prop.nominal_approach(mdl, nomapp_rand)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = rd.plot.nominal_vals_2d(nomapp_rand, endclasses, 'amp', 'wavelength')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = rd.plot.nominal_vals_2d(nomapp_rand, endclasses, 'radius', 'start')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = rd.plot.nominal_vals_1d(nomapp_rand, endclasses, 'radius')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown, these results track the uniform approach, although the spread catches some non-nominal scenarios that were not caught using uniform sampling. The resulting probabilities are:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'incomplete mission': 0.49500000000000033,\n",
       " 'nominal mission': 0.5050000000000003}"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "state_probabilities = rd.process.state_probabilities(endclasses)\n",
    "state_probabilities"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Which is similar to (but not exactly the same as) the uniform approach. The error of Monte Carlo sampling approaches can be reduced by increasing the number of points, but these points increase computational costs."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Nested Scenario Sampling\n",
    "\n",
    "Thus far, we have introduced two types of approaches: \n",
    "- SampleApproach, which is used to evaluate the system resilience to a set of faults\n",
    "- NominalApproach, which is used to evaluate system performance over a set of parameters\n",
    "\n",
    "These both have their limitations when used alone. Simulating a `SampleApproach` using `propagate.approach` solely evaluates evaluates fault-driven hazards in a single nominal set of parameters (which may not generalize) while simulating a `NominalApproach` using `propagate.nominal_approach` evaluates the systerm performance/resilience to external parameters (But not faults).\n",
    "\n",
    "To resolve these limitations, one can use a *nested* scenario sampling approach where a `SampleApproach` is simulated at each parameter level of a `NominalApproach`, giving the resilience of the system to faults over a set of operational parameters. This is called using the `propagate.nested_approach` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on function nested_approach in module fmdtools.faultsim.propagate:\n",
      "\n",
      "nested_approach(mdl, nomapp, get_phases=False, **kwargs)\n",
      "    Simulates a set of fault modes within a set of nominal scenarios defined by a nominal approach.\n",
      "    \n",
      "    Parameters\n",
      "    ----------\n",
      "    mdl : Model\n",
      "        Model Object to use in the simulation.\n",
      "    nomapp : NominalApproach\n",
      "        NominalApproach defining the nominal situations the model will be run over\n",
      "    get_phases : Bool/List/Dict, optional\n",
      "        Whether and how to use nominal simulation phases to set up the SampleApproach. The default is False.\n",
      "        - If True, all phases from the nominal simulation are passed to SampleApproach()\n",
      "        - If a list ['Fxn1', 'Fxn2' etc.], only the phases from the listed functions will be passed.\n",
      "        - If a dict {'Fxn1':'phase1'}, only the phase 'phase1' in the function 'Fxn1' will be passed.\n",
      "    **kwargs : kwargs\n",
      "        Additional keyword arguments, may include:\n",
      "            - :data:`sim_kwargs` : kwargs\n",
      "                Simulation options for :func:`prop_one_scen\n",
      "            - :data:`run_kwargs` : kwargs\n",
      "                Run options for :func:`nom_helper` and others\n",
      "            - :data:`mult_kwargs` : kwargs\n",
      "                Multi-scenario options for :func:`approach` and others\n",
      "            - **app_args : new_params\n",
      "                Keyword arguments for the SampleApproach. See modeldef.SampleApproach documentation.\n",
      "    \n",
      "    Returns\n",
      "    -------\n",
      "    nested_results : dict\n",
      "        A nested dictionary with the desired results of each scenario run with structure {'nomscen1':results, 'nomscen2':results}\n",
      "    nested_mdlhists : dict\n",
      "        A nested dictionary with the history of all model states for each scenario with structure {'nomscen1':mdlhists, 'nomscen2':mdlhists}\n",
      "    apps : dict\n",
      "        A dictionary of the SampleApproaches generated corresponding to each nominal scenario with structure {'nomscen1':app1}\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(prop.nested_approach)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we use the nominal approach generated earlier with a default sampling approach to quantify resilience."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "NESTED SCENARIOS COMPLETE: 100%|█████████████████████████████████████████████████████| 228/228 [00:36<00:00,  6.29it/s]\n"
     ]
    }
   ],
   "source": [
    "nested_endclasses, nested_mdlhists, nested_apps = prop.nested_approach(mdl, nomapp)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " The resulting endclass/mdlhist dictionary is in turn nested within operational scenarios."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['sine_1', 'sine_2', 'sine_3', 'sine_4', 'sine_5', 'sine_6', 'sine_7', 'sine_8', 'sine_9', 'sine_10', 'sine_11', 'sine_12', 'sine_13', 'sine_14', 'sine_15', 'sine_16', 'sine_17', 'sine_18', 'sine_19', 'sine_20', 'sine_21', 'sine_22', 'sine_23', 'sine_24', 'sine_25', 'sine_26', 'sine_27', 'sine_28', 'sine_29', 'sine_30', 'sine_31', 'sine_32', 'sine_33', 'sine_34', 'sine_35', 'sine_36', 'sine_37', 'sine_38', 'sine_39', 'sine_40', 'sine_41', 'sine_42', 'sine_43', 'sine_44', 'sine_45', 'sine_46', 'sine_47', 'sine_48', 'sine_49', 'sine_50', 'sine_51', 'sine_52', 'sine_53', 'sine_54', 'sine_55', 'sine_56', 'sine_57', 'sine_58', 'sine_59', 'sine_60', 'sine_61', 'sine_62', 'sine_63', 'sine_64', 'sine_65', 'sine_66', 'sine_67', 'sine_68', 'sine_69', 'sine_70', 'sine_71', 'sine_72', 'sine_73', 'sine_74', 'sine_75', 'sine_76', 'sine_77', 'sine_78', 'sine_79', 'sine_80', 'sine_81', 'sine_82', 'sine_83', 'sine_84', 'sine_85', 'sine_86', 'sine_87', 'sine_88', 'sine_89', 'sine_90', 'sine_91', 'sine_92', 'sine_93', 'sine_94', 'sine_95', 'sine_96', 'sine_97', 'sine_98', 'sine_99', 'sine_100', 'sine_101', 'sine_102', 'sine_103', 'sine_104', 'sine_105', 'sine_106', 'sine_107', 'sine_108', 'sine_109', 'sine_110', 'sine_111', 'sine_112', 'sine_113', 'sine_114', 'sine_115', 'sine_116', 'sine_117', 'sine_118', 'sine_119', 'sine_120', 'sine_121', 'sine_122', 'sine_123', 'sine_124', 'sine_125', 'sine_126', 'sine_127', 'sine_128', 'sine_129', 'sine_130', 'sine_131', 'sine_132', 'sine_133', 'sine_134', 'sine_135', 'sine_136', 'sine_137', 'sine_138', 'sine_139', 'sine_140', 'sine_141', 'sine_142', 'sine_143', 'sine_144', 'sine_145', 'sine_146', 'sine_147', 'sine_148', 'sine_149', 'sine_150', 'sine_151', 'sine_152', 'sine_153', 'sine_154', 'sine_155', 'sine_156', 'sine_157', 'sine_158', 'sine_159', 'sine_160', 'sine_161', 'sine_162', 'sine_163', 'sine_164', 'sine_165', 'sine_166', 'sine_167', 'sine_168', 'sine_169', 'sine_170', 'sine_171', 'sine_172', 'sine_173', 'sine_174', 'sine_175', 'sine_176', 'sine_177', 'sine_178', 'sine_179', 'sine_180', 'sine_181', 'sine_182', 'sine_183', 'sine_184', 'sine_185', 'sine_186', 'sine_187', 'sine_188', 'sine_189', 'sine_190', 'sine_191', 'sine_192', 'sine_193', 'sine_194', 'sine_195', 'sine_196', 'sine_197', 'sine_198', 'sine_199', 'sine_200', 'turn_201', 'turn_202', 'turn_203', 'turn_204', 'turn_205', 'turn_206', 'turn_207', 'turn_208', 'turn_209', 'turn_210', 'turn_211', 'turn_212', 'turn_213', 'turn_214', 'turn_215', 'turn_216', 'turn_217', 'turn_218', 'turn_219', 'turn_220', 'turn_221', 'turn_222', 'turn_223', 'turn_224', 'turn_225', 'turn_226', 'turn_227', 'turn_228'])"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nested_endclasses.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'rate': 0,\n",
       " 'cost': 0,\n",
       " 'prob': 1,\n",
       " 'expected cost': 0,\n",
       " 'faults': {},\n",
       " 'classification': 'nominal mission'}"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nested_endclasses['sine_1']['nominal']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can compare resilience to faults over the operational envelope using `rd.tabulate.resilience_factor_comparison`, which generates at table similar to `rd.tabulate.nominal_factor_comparison` except for a single metric with rows for each fault scenario."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "restab = rd.tabulate.resilience_factor_comparison(nomapp, nested_endclasses,['start'], 'cost', rangeid='turn', percent=False, difference=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>(start,)</th>\n",
       "      <th>nominal</th>\n",
       "      <th>Drive</th>\n",
       "      <th>Avionics</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>71.428571</td>\n",
       "      <td>260.714286</td>\n",
       "      <td>171.428571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>142.857143</td>\n",
       "      <td>332.142857</td>\n",
       "      <td>242.857143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>142.857143</td>\n",
       "      <td>332.142857</td>\n",
       "      <td>242.857143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>142.857143</td>\n",
       "      <td>350.000000</td>\n",
       "      <td>242.857143</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "('start',)     nominal       Drive    Avionics\n",
       "0            71.428571  260.714286  171.428571\n",
       "5           142.857143  332.142857  242.857143\n",
       "10          142.857143  332.142857  242.857143\n",
       "15          142.857143  350.000000  242.857143"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "restab"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These factors can further be visualized using `rd.plot.resilience_factor_comparison`, which generates a set of bar graphs similar to `rd.plot.nominal_factor_comparison`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on function resilience_factor_comparison in module fmdtools.resultdisp.plot:\n",
      "\n",
      "resilience_factor_comparison(comparison_table, faults='all', rows=1, stat='proportion', figsize=(12, 8), title='', maxy='max', legend='single', stack=False, xlabel=True, error_bars=False)\n",
      "    Plots a comparison_table from tabulate.resilience_factor_comparison as a bar plot for each fault scenario/set of fault scenarios.\n",
      "    \n",
      "    Parameters\n",
      "    ----------\n",
      "    comparison_table : pandas table\n",
      "        Table from tabulate.resilience_factor_test with factors as rows and fault scenarios as columns\n",
      "    faults : list, optional\n",
      "        iterable of faults/fault types to include in the bar plot (the columns of the table). The default is 'all'.\n",
      "        a dictionary {'fault':'title'} will associate the given fault with a title (otherwise 'fault' is used)\n",
      "    rows : int, optional\n",
      "        Number of rows in the multplot. The default is 1.\n",
      "    stat : str, optional\n",
      "        Metric being presented in the table (for the y-axis). The default is 'proportion'.\n",
      "    figsize : tuple(int, int), optional\n",
      "        Size of the figure in (width, height). The default is (12,8).\n",
      "    title : string, optional\n",
      "        Overall title for the plots. The default is ''.\n",
      "    maxy : float, optional\n",
      "        Maximum y-value (to ensure same scale). The default is 'max' (finds max value of table).\n",
      "    legend : str, optional\n",
      "        'all'/'single'/'none'. The default is \"single\".\n",
      "    stack : bool, optional\n",
      "        Whether or not to stack the nominal and resilience plots. The default is False.\n",
      "    xlabel : bool/str\n",
      "        The x-label descriptor for the design factors. Defaults to the column values.\n",
      "    error_bars : bool\n",
      "        Whether to include error bars for the factor. Requires comparison_table to have lower and upper bound information\n",
      "    \n",
      "    Returns\n",
      "    -------\n",
      "    figure: matplotlib figure\n",
      "        Plot handle of the figure.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(rd.plot.resilience_factor_comparison)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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8Zvf/IahQ4d26qnWrd/AdTfdyuc+U12hTNq2bds4//zz044hIlKS1uBidv755/Piiy8yYcIEvve97zF//nyOOuooDj30UI466iiWLVsGwMyZM7nwwgt3jnfiiScy7w9PNpvWJd+4ihdWvsTIhglcPO1bzR578823+MQZ5/HBhvGMOOYT/OLuXwOw4M/PcNTHP8UHG8Yz+vhPsnHTJrZv387F077FEf96KoeMGc9PZs0GYN4fnqThpLM47d8/zwH/Mo4zz//Su5fdueqHHPGvpzLimE80u+xOQ0MDl112GWPGjOEHP/gB06ZN46qrrgJg0bPPceQJEzlkzHhOmfw53li3HoBrZtzMgUd/jEPGjGfSeV+M+R0XESkt/2twNXb99dfz29/+locffpg99tiDDRs28Oijj9KtWzceeOABLrvsMu68886ypnXl5V9m8V+eZ9G8e1s99tuHHmOfvffi17fdAMD6DRt5++23+dR5X+QXN3yfIw49hA0bN7FLr1789Oe306d3bxbcfxdbt77N0Z+YxPENRwPw52efa37ZnScXFi67c+5ZfO3LhQL86Yu+zty5cxk/fjwA69at45FHHgFg2rRpOzOdfeFXufZ/L2fM0aP52pU/YPp3fsj3r/gvrrxmBisWPkTPnj1Yt35D1e+tiEgltAaXsPXr1zNx4kRGjBjBRRddxJIlS2KZ7sEH7s8Djz7BV7/+HR57YgF9duvNsuUrGLjXXhxx6CEA7NZ7V7p168bvH/4DN8/5JSMbJvChcaex9o11PP/i34AyL7vz0EPNcn/qU58q+TrXrd/AmKNHAzD5U6fw6BMLADjkwA9w5vlf4me330O3rl1jef0iIh1RgUvY5ZdfztixY1m8eDG/+tWv2LJlCwDdunVjx44dO9s1DS/X/u8bysIH7uLg4ftz6f98l69f9UPcHbPWbd2da795OYvm3cuiefeyYuFDHD/2w0D7l92548ZrefbRuZx33nnN8r3nPe+pKOuvb5vBBeeeycKnl3D4R09l27ZtFY0vIlKNxAqcmfUys/lm9rSZLTGz6dHwfmZ2v5k9H/3vWzTOpWa23MyWmVkurvOyfv16Bg0aBBT2uzUZMmQIixYtYseOHbz88svMnz+/1bi9d30PGze9WXK6q159jX/aZRfOmngSX77gXP70zBIOGLYfq15bw4I/PwPAxk2b2LZt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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = rd.plot.resilience_factor_comparison(restab, stat='cost', figsize = (6,4), xlabel='curve start point')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown, on average the costs are higher over fault scenarios than in their nominal counterparts. While this difference appears to be uniform for Avionics faults (`no_con`, which merely adds a fault at the times instantiated (since the rover is already in `drive` mode)), resulting in a uniform cost of 100), it changes for the Drive fault depending on the location of the curve. This is because in some cases this fault stops the rover at the finish line (when the line is short), and sometimes during its mission (when the line is long), leading to a cost from the incomplete mission.\n",
    "\n",
    "Thus, the assessed consequences of faults are somewhat prone to parameters leading to a different injection time. We might prefer, for example, for avionics faults to be injected when they would make a difference (i.e. at the start) and for drive faults to be injected multiple. This can be fixed by:\n",
    "- encoding phase information in with modes to ensure they are injected at the right intervals\n",
    "- using the `get_phases` option in `propagate.nested_approach` to get the phases and inject the faults in the corresponding times\n",
    "- passing appropriate Approach arguments to `propagate.nested_approach` (e.g., defaultsamp, etc)\n",
    "\n",
    "This has already been done in the Power faults, which we evaluate below. (note that they were not included above because they were listed to be injected in specific phases using the `key_phases_by` option in `assoc_modes()`)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "NESTED SCENARIOS COMPLETE: 100%|█████████████████████████████████████████████████████| 228/228 [00:18<00:00, 12.18it/s]\n"
     ]
    }
   ],
   "source": [
    "nested_endclasses_power, nested_mdlhists_power, nested_apps_power = prop.nested_approach(mdl, nomapp, get_phases=True, faults='Power')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>(start,)</th>\n",
       "      <th>nominal</th>\n",
       "      <th>Power open_circ</th>\n",
       "      <th>Power no_charge</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>71.428571</td>\n",
       "      <td>528.571429</td>\n",
       "      <td>528.571429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>142.857143</td>\n",
       "      <td>457.142857</td>\n",
       "      <td>457.142857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>142.857143</td>\n",
       "      <td>457.142857</td>\n",
       "      <td>457.142857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>142.857143</td>\n",
       "      <td>457.142857</td>\n",
       "      <td>457.142857</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "('start',)     nominal  Power open_circ  Power no_charge\n",
       "0            71.428571       528.571429       528.571429\n",
       "5           142.857143       457.142857       457.142857\n",
       "10          142.857143       457.142857       457.142857\n",
       "15          142.857143       457.142857       457.142857"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "restab_power = rd.tabulate.resilience_factor_comparison(nomapp, nested_endclasses_power,['start'], 'cost', rangeid='turn', difference=True, percent=False, faults='modes')\n",
    "restab_power"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = rd.plot.resilience_factor_comparison(restab_power, stat='cost', figsize = (6,4), xlabel='curve start point', stack=True, maxy=800)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown, all power faults result in the same cost, since they all result in both a fault and an incomplete mission, in part because none of them are injected after the rover completes its mission (which would happen if we were using the global phases as in the drive faults)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
